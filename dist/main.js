/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/chartjs-plugin-datalabels/dist/chartjs-plugin-datalabels.esm.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/chartjs-plugin-datalabels/dist/chartjs-plugin-datalabels.esm.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ plugin)
/* harmony export */ });
/* harmony import */ var chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chart.js/helpers */ "./node_modules/chart.js/helpers/helpers.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/chart.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/chunks/helpers.segment.js");
/*!
 * chartjs-plugin-datalabels v2.2.0
 * https://chartjs-plugin-datalabels.netlify.app
 * (c) 2017-2022 chartjs-plugin-datalabels contributors
 * Released under the MIT license
 */



var devicePixelRatio = (function() {
  if (typeof window !== 'undefined') {
    if (window.devicePixelRatio) {
      return window.devicePixelRatio;
    }

    // devicePixelRatio is undefined on IE10
    // https://stackoverflow.com/a/20204180/8837887
    // https://github.com/chartjs/chartjs-plugin-datalabels/issues/85
    var screen = window.screen;
    if (screen) {
      return (screen.deviceXDPI || 1) / (screen.logicalXDPI || 1);
    }
  }

  return 1;
}());

var utils = {
  // @todo move this in Chart.helpers.toTextLines
  toTextLines: function(inputs) {
    var lines = [];
    var input;

    inputs = [].concat(inputs);
    while (inputs.length) {
      input = inputs.pop();
      if (typeof input === 'string') {
        lines.unshift.apply(lines, input.split('\n'));
      } else if (Array.isArray(input)) {
        inputs.push.apply(inputs, input);
      } else if (!(0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndef)(inputs)) {
        lines.unshift('' + input);
      }
    }

    return lines;
  },

  // @todo move this in Chart.helpers.canvas.textSize
  // @todo cache calls of measureText if font doesn't change?!
  textSize: function(ctx, lines, font) {
    var items = [].concat(lines);
    var ilen = items.length;
    var prev = ctx.font;
    var width = 0;
    var i;

    ctx.font = font.string;

    for (i = 0; i < ilen; ++i) {
      width = Math.max(ctx.measureText(items[i]).width, width);
    }

    ctx.font = prev;

    return {
      height: ilen * font.lineHeight,
      width: width
    };
  },

  /**
   * Returns value bounded by min and max. This is equivalent to max(min, min(value, max)).
   * @todo move this method in Chart.helpers.bound
   * https://doc.qt.io/qt-5/qtglobal.html#qBound
   */
  bound: function(min, value, max) {
    return Math.max(min, Math.min(value, max));
  },

  /**
   * Returns an array of pair [value, state] where state is:
   * * -1: value is only in a0 (removed)
   * *  1: value is only in a1 (added)
   */
  arrayDiff: function(a0, a1) {
    var prev = a0.slice();
    var updates = [];
    var i, j, ilen, v;

    for (i = 0, ilen = a1.length; i < ilen; ++i) {
      v = a1[i];
      j = prev.indexOf(v);

      if (j === -1) {
        updates.push([v, 1]);
      } else {
        prev.splice(j, 1);
      }
    }

    for (i = 0, ilen = prev.length; i < ilen; ++i) {
      updates.push([prev[i], -1]);
    }

    return updates;
  },

  /**
   * https://github.com/chartjs/chartjs-plugin-datalabels/issues/70
   */
  rasterize: function(v) {
    return Math.round(v * devicePixelRatio) / devicePixelRatio;
  }
};

function orient(point, origin) {
  var x0 = origin.x;
  var y0 = origin.y;

  if (x0 === null) {
    return {x: 0, y: -1};
  }
  if (y0 === null) {
    return {x: 1, y: 0};
  }

  var dx = point.x - x0;
  var dy = point.y - y0;
  var ln = Math.sqrt(dx * dx + dy * dy);

  return {
    x: ln ? dx / ln : 0,
    y: ln ? dy / ln : -1
  };
}

function aligned(x, y, vx, vy, align) {
  switch (align) {
  case 'center':
    vx = vy = 0;
    break;
  case 'bottom':
    vx = 0;
    vy = 1;
    break;
  case 'right':
    vx = 1;
    vy = 0;
    break;
  case 'left':
    vx = -1;
    vy = 0;
    break;
  case 'top':
    vx = 0;
    vy = -1;
    break;
  case 'start':
    vx = -vx;
    vy = -vy;
    break;
  case 'end':
    // keep natural orientation
    break;
  default:
    // clockwise rotation (in degree)
    align *= (Math.PI / 180);
    vx = Math.cos(align);
    vy = Math.sin(align);
    break;
  }

  return {
    x: x,
    y: y,
    vx: vx,
    vy: vy
  };
}

// Line clipping (Cohen–Sutherland algorithm)
// https://en.wikipedia.org/wiki/Cohen–Sutherland_algorithm

var R_INSIDE = 0;
var R_LEFT = 1;
var R_RIGHT = 2;
var R_BOTTOM = 4;
var R_TOP = 8;

function region(x, y, rect) {
  var res = R_INSIDE;

  if (x < rect.left) {
    res |= R_LEFT;
  } else if (x > rect.right) {
    res |= R_RIGHT;
  }
  if (y < rect.top) {
    res |= R_TOP;
  } else if (y > rect.bottom) {
    res |= R_BOTTOM;
  }

  return res;
}

function clipped(segment, area) {
  var x0 = segment.x0;
  var y0 = segment.y0;
  var x1 = segment.x1;
  var y1 = segment.y1;
  var r0 = region(x0, y0, area);
  var r1 = region(x1, y1, area);
  var r, x, y;

  // eslint-disable-next-line no-constant-condition
  while (true) {
    if (!(r0 | r1) || (r0 & r1)) {
      // both points inside or on the same side: no clipping
      break;
    }

    // at least one point is outside
    r = r0 || r1;

    if (r & R_TOP) {
      x = x0 + (x1 - x0) * (area.top - y0) / (y1 - y0);
      y = area.top;
    } else if (r & R_BOTTOM) {
      x = x0 + (x1 - x0) * (area.bottom - y0) / (y1 - y0);
      y = area.bottom;
    } else if (r & R_RIGHT) {
      y = y0 + (y1 - y0) * (area.right - x0) / (x1 - x0);
      x = area.right;
    } else if (r & R_LEFT) {
      y = y0 + (y1 - y0) * (area.left - x0) / (x1 - x0);
      x = area.left;
    }

    if (r === r0) {
      x0 = x;
      y0 = y;
      r0 = region(x0, y0, area);
    } else {
      x1 = x;
      y1 = y;
      r1 = region(x1, y1, area);
    }
  }

  return {
    x0: x0,
    x1: x1,
    y0: y0,
    y1: y1
  };
}

function compute$1(range, config) {
  var anchor = config.anchor;
  var segment = range;
  var x, y;

  if (config.clamp) {
    segment = clipped(segment, config.area);
  }

  if (anchor === 'start') {
    x = segment.x0;
    y = segment.y0;
  } else if (anchor === 'end') {
    x = segment.x1;
    y = segment.y1;
  } else {
    x = (segment.x0 + segment.x1) / 2;
    y = (segment.y0 + segment.y1) / 2;
  }

  return aligned(x, y, range.vx, range.vy, config.align);
}

var positioners = {
  arc: function(el, config) {
    var angle = (el.startAngle + el.endAngle) / 2;
    var vx = Math.cos(angle);
    var vy = Math.sin(angle);
    var r0 = el.innerRadius;
    var r1 = el.outerRadius;

    return compute$1({
      x0: el.x + vx * r0,
      y0: el.y + vy * r0,
      x1: el.x + vx * r1,
      y1: el.y + vy * r1,
      vx: vx,
      vy: vy
    }, config);
  },

  point: function(el, config) {
    var v = orient(el, config.origin);
    var rx = v.x * el.options.radius;
    var ry = v.y * el.options.radius;

    return compute$1({
      x0: el.x - rx,
      y0: el.y - ry,
      x1: el.x + rx,
      y1: el.y + ry,
      vx: v.x,
      vy: v.y
    }, config);
  },

  bar: function(el, config) {
    var v = orient(el, config.origin);
    var x = el.x;
    var y = el.y;
    var sx = 0;
    var sy = 0;

    if (el.horizontal) {
      x = Math.min(el.x, el.base);
      sx = Math.abs(el.base - el.x);
    } else {
      y = Math.min(el.y, el.base);
      sy = Math.abs(el.base - el.y);
    }

    return compute$1({
      x0: x,
      y0: y + sy,
      x1: x + sx,
      y1: y,
      vx: v.x,
      vy: v.y
    }, config);
  },

  fallback: function(el, config) {
    var v = orient(el, config.origin);

    return compute$1({
      x0: el.x,
      y0: el.y,
      x1: el.x + (el.width || 0),
      y1: el.y + (el.height || 0),
      vx: v.x,
      vy: v.y
    }, config);
  }
};

var rasterize = utils.rasterize;

function boundingRects(model) {
  var borderWidth = model.borderWidth || 0;
  var padding = model.padding;
  var th = model.size.height;
  var tw = model.size.width;
  var tx = -tw / 2;
  var ty = -th / 2;

  return {
    frame: {
      x: tx - padding.left - borderWidth,
      y: ty - padding.top - borderWidth,
      w: tw + padding.width + borderWidth * 2,
      h: th + padding.height + borderWidth * 2
    },
    text: {
      x: tx,
      y: ty,
      w: tw,
      h: th
    }
  };
}

function getScaleOrigin(el, context) {
  var scale = context.chart.getDatasetMeta(context.datasetIndex).vScale;

  if (!scale) {
    return null;
  }

  if (scale.xCenter !== undefined && scale.yCenter !== undefined) {
    return {x: scale.xCenter, y: scale.yCenter};
  }

  var pixel = scale.getBasePixel();
  return el.horizontal ?
    {x: pixel, y: null} :
    {x: null, y: pixel};
}

function getPositioner(el) {
  if (el instanceof chart_js__WEBPACK_IMPORTED_MODULE_1__.ArcElement) {
    return positioners.arc;
  }
  if (el instanceof chart_js__WEBPACK_IMPORTED_MODULE_1__.PointElement) {
    return positioners.point;
  }
  if (el instanceof chart_js__WEBPACK_IMPORTED_MODULE_1__.BarElement) {
    return positioners.bar;
  }
  return positioners.fallback;
}

function drawRoundedRect(ctx, x, y, w, h, radius) {
  var HALF_PI = Math.PI / 2;

  if (radius) {
    var r = Math.min(radius, h / 2, w / 2);
    var left = x + r;
    var top = y + r;
    var right = x + w - r;
    var bottom = y + h - r;

    ctx.moveTo(x, top);
    if (left < right && top < bottom) {
      ctx.arc(left, top, r, -Math.PI, -HALF_PI);
      ctx.arc(right, top, r, -HALF_PI, 0);
      ctx.arc(right, bottom, r, 0, HALF_PI);
      ctx.arc(left, bottom, r, HALF_PI, Math.PI);
    } else if (left < right) {
      ctx.moveTo(left, y);
      ctx.arc(right, top, r, -HALF_PI, HALF_PI);
      ctx.arc(left, top, r, HALF_PI, Math.PI + HALF_PI);
    } else if (top < bottom) {
      ctx.arc(left, top, r, -Math.PI, 0);
      ctx.arc(left, bottom, r, 0, Math.PI);
    } else {
      ctx.arc(left, top, r, -Math.PI, Math.PI);
    }
    ctx.closePath();
    ctx.moveTo(x, y);
  } else {
    ctx.rect(x, y, w, h);
  }
}

function drawFrame(ctx, rect, model) {
  var bgColor = model.backgroundColor;
  var borderColor = model.borderColor;
  var borderWidth = model.borderWidth;

  if (!bgColor && (!borderColor || !borderWidth)) {
    return;
  }

  ctx.beginPath();

  drawRoundedRect(
    ctx,
    rasterize(rect.x) + borderWidth / 2,
    rasterize(rect.y) + borderWidth / 2,
    rasterize(rect.w) - borderWidth,
    rasterize(rect.h) - borderWidth,
    model.borderRadius);

  ctx.closePath();

  if (bgColor) {
    ctx.fillStyle = bgColor;
    ctx.fill();
  }

  if (borderColor && borderWidth) {
    ctx.strokeStyle = borderColor;
    ctx.lineWidth = borderWidth;
    ctx.lineJoin = 'miter';
    ctx.stroke();
  }
}

function textGeometry(rect, align, font) {
  var h = font.lineHeight;
  var w = rect.w;
  var x = rect.x;
  var y = rect.y + h / 2;

  if (align === 'center') {
    x += w / 2;
  } else if (align === 'end' || align === 'right') {
    x += w;
  }

  return {
    h: h,
    w: w,
    x: x,
    y: y
  };
}

function drawTextLine(ctx, text, cfg) {
  var shadow = ctx.shadowBlur;
  var stroked = cfg.stroked;
  var x = rasterize(cfg.x);
  var y = rasterize(cfg.y);
  var w = rasterize(cfg.w);

  if (stroked) {
    ctx.strokeText(text, x, y, w);
  }

  if (cfg.filled) {
    if (shadow && stroked) {
      // Prevent drawing shadow on both the text stroke and fill, so
      // if the text is stroked, remove the shadow for the text fill.
      ctx.shadowBlur = 0;
    }

    ctx.fillText(text, x, y, w);

    if (shadow && stroked) {
      ctx.shadowBlur = shadow;
    }
  }
}

function drawText(ctx, lines, rect, model) {
  var align = model.textAlign;
  var color = model.color;
  var filled = !!color;
  var font = model.font;
  var ilen = lines.length;
  var strokeColor = model.textStrokeColor;
  var strokeWidth = model.textStrokeWidth;
  var stroked = strokeColor && strokeWidth;
  var i;

  if (!ilen || (!filled && !stroked)) {
    return;
  }

  // Adjust coordinates based on text alignment and line height
  rect = textGeometry(rect, align, font);

  ctx.font = font.string;
  ctx.textAlign = align;
  ctx.textBaseline = 'middle';
  ctx.shadowBlur = model.textShadowBlur;
  ctx.shadowColor = model.textShadowColor;

  if (filled) {
    ctx.fillStyle = color;
  }
  if (stroked) {
    ctx.lineJoin = 'round';
    ctx.lineWidth = strokeWidth;
    ctx.strokeStyle = strokeColor;
  }

  for (i = 0, ilen = lines.length; i < ilen; ++i) {
    drawTextLine(ctx, lines[i], {
      stroked: stroked,
      filled: filled,
      w: rect.w,
      x: rect.x,
      y: rect.y + rect.h * i
    });
  }
}

var Label = function(config, ctx, el, index) {
  var me = this;

  me._config = config;
  me._index = index;
  me._model = null;
  me._rects = null;
  me._ctx = ctx;
  me._el = el;
};

(0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.merge)(Label.prototype, {
  /**
   * @private
   */
  _modelize: function(display, lines, config, context) {
    var me = this;
    var index = me._index;
    var font = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toFont)((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.font, {}], context, index));
    var color = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.color, chart_js__WEBPACK_IMPORTED_MODULE_2__.d.color], context, index);

    return {
      align: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.align, 'center'], context, index),
      anchor: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.anchor, 'center'], context, index),
      area: context.chart.chartArea,
      backgroundColor: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.backgroundColor, null], context, index),
      borderColor: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.borderColor, null], context, index),
      borderRadius: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.borderRadius, 0], context, index),
      borderWidth: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.borderWidth, 0], context, index),
      clamp: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.clamp, false], context, index),
      clip: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.clip, false], context, index),
      color: color,
      display: display,
      font: font,
      lines: lines,
      offset: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.offset, 4], context, index),
      opacity: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.opacity, 1], context, index),
      origin: getScaleOrigin(me._el, context),
      padding: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toPadding)((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.padding, 4], context, index)),
      positioner: getPositioner(me._el),
      rotation: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.rotation, 0], context, index) * (Math.PI / 180),
      size: utils.textSize(me._ctx, lines, font),
      textAlign: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.textAlign, 'start'], context, index),
      textShadowBlur: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.textShadowBlur, 0], context, index),
      textShadowColor: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.textShadowColor, color], context, index),
      textStrokeColor: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.textStrokeColor, color], context, index),
      textStrokeWidth: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.textStrokeWidth, 0], context, index)
    };
  },

  update: function(context) {
    var me = this;
    var model = null;
    var rects = null;
    var index = me._index;
    var config = me._config;
    var value, label, lines;

    // We first resolve the display option (separately) to avoid computing
    // other options in case the label is hidden (i.e. display: false).
    var display = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.resolve)([config.display, true], context, index);

    if (display) {
      value = context.dataset.data[index];
      label = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.valueOrDefault)((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.callback)(config.formatter, [value, context]), value);
      lines = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndef)(label) ? [] : utils.toTextLines(label);

      if (lines.length) {
        model = me._modelize(display, lines, config, context);
        rects = boundingRects(model);
      }
    }

    me._model = model;
    me._rects = rects;
  },

  geometry: function() {
    return this._rects ? this._rects.frame : {};
  },

  rotation: function() {
    return this._model ? this._model.rotation : 0;
  },

  visible: function() {
    return this._model && this._model.opacity;
  },

  model: function() {
    return this._model;
  },

  draw: function(chart, center) {
    var me = this;
    var ctx = chart.ctx;
    var model = me._model;
    var rects = me._rects;
    var area;

    if (!this.visible()) {
      return;
    }

    ctx.save();

    if (model.clip) {
      area = model.area;
      ctx.beginPath();
      ctx.rect(
        area.left,
        area.top,
        area.right - area.left,
        area.bottom - area.top);
      ctx.clip();
    }

    ctx.globalAlpha = utils.bound(0, model.opacity, 1);
    ctx.translate(rasterize(center.x), rasterize(center.y));
    ctx.rotate(model.rotation);

    drawFrame(ctx, rects.frame, model);
    drawText(ctx, model.lines, rects.text, model);

    ctx.restore();
  }
});

var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991; // eslint-disable-line es/no-number-minsafeinteger
var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;  // eslint-disable-line es/no-number-maxsafeinteger

function rotated(point, center, angle) {
  var cos = Math.cos(angle);
  var sin = Math.sin(angle);
  var cx = center.x;
  var cy = center.y;

  return {
    x: cx + cos * (point.x - cx) - sin * (point.y - cy),
    y: cy + sin * (point.x - cx) + cos * (point.y - cy)
  };
}

function projected(points, axis) {
  var min = MAX_INTEGER;
  var max = MIN_INTEGER;
  var origin = axis.origin;
  var i, pt, vx, vy, dp;

  for (i = 0; i < points.length; ++i) {
    pt = points[i];
    vx = pt.x - origin.x;
    vy = pt.y - origin.y;
    dp = axis.vx * vx + axis.vy * vy;
    min = Math.min(min, dp);
    max = Math.max(max, dp);
  }

  return {
    min: min,
    max: max
  };
}

function toAxis(p0, p1) {
  var vx = p1.x - p0.x;
  var vy = p1.y - p0.y;
  var ln = Math.sqrt(vx * vx + vy * vy);

  return {
    vx: (p1.x - p0.x) / ln,
    vy: (p1.y - p0.y) / ln,
    origin: p0,
    ln: ln
  };
}

var HitBox = function() {
  this._rotation = 0;
  this._rect = {
    x: 0,
    y: 0,
    w: 0,
    h: 0
  };
};

(0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.merge)(HitBox.prototype, {
  center: function() {
    var r = this._rect;
    return {
      x: r.x + r.w / 2,
      y: r.y + r.h / 2
    };
  },

  update: function(center, rect, rotation) {
    this._rotation = rotation;
    this._rect = {
      x: rect.x + center.x,
      y: rect.y + center.y,
      w: rect.w,
      h: rect.h
    };
  },

  contains: function(point) {
    var me = this;
    var margin = 1;
    var rect = me._rect;

    point = rotated(point, me.center(), -me._rotation);

    return !(point.x < rect.x - margin
      || point.y < rect.y - margin
      || point.x > rect.x + rect.w + margin * 2
      || point.y > rect.y + rect.h + margin * 2);
  },

  // Separating Axis Theorem
  // https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169
  intersects: function(other) {
    var r0 = this._points();
    var r1 = other._points();
    var axes = [
      toAxis(r0[0], r0[1]),
      toAxis(r0[0], r0[3])
    ];
    var i, pr0, pr1;

    if (this._rotation !== other._rotation) {
      // Only separate with r1 axis if the rotation is different,
      // else it's enough to separate r0 and r1 with r0 axis only!
      axes.push(
        toAxis(r1[0], r1[1]),
        toAxis(r1[0], r1[3])
      );
    }

    for (i = 0; i < axes.length; ++i) {
      pr0 = projected(r0, axes[i]);
      pr1 = projected(r1, axes[i]);

      if (pr0.max < pr1.min || pr1.max < pr0.min) {
        return false;
      }
    }

    return true;
  },

  /**
   * @private
   */
  _points: function() {
    var me = this;
    var rect = me._rect;
    var angle = me._rotation;
    var center = me.center();

    return [
      rotated({x: rect.x, y: rect.y}, center, angle),
      rotated({x: rect.x + rect.w, y: rect.y}, center, angle),
      rotated({x: rect.x + rect.w, y: rect.y + rect.h}, center, angle),
      rotated({x: rect.x, y: rect.y + rect.h}, center, angle)
    ];
  }
});

function coordinates(el, model, geometry) {
  var point = model.positioner(el, model);
  var vx = point.vx;
  var vy = point.vy;

  if (!vx && !vy) {
    // if aligned center, we don't want to offset the center point
    return {x: point.x, y: point.y};
  }

  var w = geometry.w;
  var h = geometry.h;

  // take in account the label rotation
  var rotation = model.rotation;
  var dx = Math.abs(w / 2 * Math.cos(rotation)) + Math.abs(h / 2 * Math.sin(rotation));
  var dy = Math.abs(w / 2 * Math.sin(rotation)) + Math.abs(h / 2 * Math.cos(rotation));

  // scale the unit vector (vx, vy) to get at least dx or dy equal to
  // w or h respectively (else we would calculate the distance to the
  // ellipse inscribed in the bounding rect)
  var vs = 1 / Math.max(Math.abs(vx), Math.abs(vy));
  dx *= vx * vs;
  dy *= vy * vs;

  // finally, include the explicit offset
  dx += model.offset * vx;
  dy += model.offset * vy;

  return {
    x: point.x + dx,
    y: point.y + dy
  };
}

function collide(labels, collider) {
  var i, j, s0, s1;

  // IMPORTANT Iterate in the reverse order since items at the end of the
  // list have an higher weight/priority and thus should be less impacted
  // by the overlapping strategy.

  for (i = labels.length - 1; i >= 0; --i) {
    s0 = labels[i].$layout;

    for (j = i - 1; j >= 0 && s0._visible; --j) {
      s1 = labels[j].$layout;

      if (s1._visible && s0._box.intersects(s1._box)) {
        collider(s0, s1);
      }
    }
  }

  return labels;
}

function compute(labels) {
  var i, ilen, label, state, geometry, center, proxy;

  // Initialize labels for overlap detection
  for (i = 0, ilen = labels.length; i < ilen; ++i) {
    label = labels[i];
    state = label.$layout;

    if (state._visible) {
      // Chart.js 3 removed el._model in favor of getProps(), making harder to
      // abstract reading values in positioners. Also, using string arrays to
      // read values (i.e. var {a,b,c} = el.getProps(["a","b","c"])) would make
      // positioners inefficient in the normal case (i.e. not the final values)
      // and the code a bit ugly, so let's use a Proxy instead.
      proxy = new Proxy(label._el, {get: (el, p) => el.getProps([p], true)[p]});

      geometry = label.geometry();
      center = coordinates(proxy, label.model(), geometry);
      state._box.update(center, geometry, label.rotation());
    }
  }

  // Auto hide overlapping labels
  return collide(labels, function(s0, s1) {
    var h0 = s0._hidable;
    var h1 = s1._hidable;

    if ((h0 && h1) || h1) {
      s1._visible = false;
    } else if (h0) {
      s0._visible = false;
    }
  });
}

var layout = {
  prepare: function(datasets) {
    var labels = [];
    var i, j, ilen, jlen, label;

    for (i = 0, ilen = datasets.length; i < ilen; ++i) {
      for (j = 0, jlen = datasets[i].length; j < jlen; ++j) {
        label = datasets[i][j];
        labels.push(label);
        label.$layout = {
          _box: new HitBox(),
          _hidable: false,
          _visible: true,
          _set: i,
          _idx: label._index
        };
      }
    }

    // TODO New `z` option: labels with a higher z-index are drawn
    // of top of the ones with a lower index. Lowest z-index labels
    // are also discarded first when hiding overlapping labels.
    labels.sort(function(a, b) {
      var sa = a.$layout;
      var sb = b.$layout;

      return sa._idx === sb._idx
        ? sb._set - sa._set
        : sb._idx - sa._idx;
    });

    this.update(labels);

    return labels;
  },

  update: function(labels) {
    var dirty = false;
    var i, ilen, label, model, state;

    for (i = 0, ilen = labels.length; i < ilen; ++i) {
      label = labels[i];
      model = label.model();
      state = label.$layout;
      state._hidable = model && model.display === 'auto';
      state._visible = label.visible();
      dirty |= state._hidable;
    }

    if (dirty) {
      compute(labels);
    }
  },

  lookup: function(labels, point) {
    var i, state;

    // IMPORTANT Iterate in the reverse order since items at the end of
    // the list have an higher z-index, thus should be picked first.

    for (i = labels.length - 1; i >= 0; --i) {
      state = labels[i].$layout;

      if (state && state._visible && state._box.contains(point)) {
        return labels[i];
      }
    }

    return null;
  },

  draw: function(chart, labels) {
    var i, ilen, label, state, geometry, center;

    for (i = 0, ilen = labels.length; i < ilen; ++i) {
      label = labels[i];
      state = label.$layout;

      if (state._visible) {
        geometry = label.geometry();
        center = coordinates(label._el, label.model(), geometry);
        state._box.update(center, geometry, label.rotation());
        label.draw(chart, center);
      }
    }
  }
};

var formatter = function(value) {
  if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndef)(value)) {
    return null;
  }

  var label = value;
  var keys, klen, k;
  if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {
    if (!(0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndef)(value.label)) {
      label = value.label;
    } else if (!(0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndef)(value.r)) {
      label = value.r;
    } else {
      label = '';
      keys = Object.keys(value);
      for (k = 0, klen = keys.length; k < klen; ++k) {
        label += (k !== 0 ? ', ' : '') + keys[k] + ': ' + value[keys[k]];
      }
    }
  }

  return '' + label;
};

/**
 * IMPORTANT: make sure to also update tests and TypeScript definition
 * files (`/test/specs/defaults.spec.js` and `/types/options.d.ts`)
 */

var defaults = {
  align: 'center',
  anchor: 'center',
  backgroundColor: null,
  borderColor: null,
  borderRadius: 0,
  borderWidth: 0,
  clamp: false,
  clip: false,
  color: undefined,
  display: true,
  font: {
    family: undefined,
    lineHeight: 1.2,
    size: undefined,
    style: undefined,
    weight: null
  },
  formatter: formatter,
  labels: undefined,
  listeners: {},
  offset: 4,
  opacity: 1,
  padding: {
    top: 4,
    right: 4,
    bottom: 4,
    left: 4
  },
  rotation: 0,
  textAlign: 'start',
  textStrokeColor: undefined,
  textStrokeWidth: 0,
  textShadowBlur: 0,
  textShadowColor: undefined
};

/**
 * @see https://github.com/chartjs/Chart.js/issues/4176
 */

var EXPANDO_KEY = '$datalabels';
var DEFAULT_KEY = '$default';

function configure(dataset, options) {
  var override = dataset.datalabels;
  var listeners = {};
  var configs = [];
  var labels, keys;

  if (override === false) {
    return null;
  }
  if (override === true) {
    override = {};
  }

  options = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.merge)({}, [options, override]);
  labels = options.labels || {};
  keys = Object.keys(labels);
  delete options.labels;

  if (keys.length) {
    keys.forEach(function(key) {
      if (labels[key]) {
        configs.push((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.merge)({}, [
          options,
          labels[key],
          {_key: key}
        ]));
      }
    });
  } else {
    // Default label if no "named" label defined.
    configs.push(options);
  }

  // listeners: {<event-type>: {<label-key>: <fn>}}
  listeners = configs.reduce(function(target, config) {
    (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.each)(config.listeners || {}, function(fn, event) {
      target[event] = target[event] || {};
      target[event][config._key || DEFAULT_KEY] = fn;
    });

    delete config.listeners;
    return target;
  }, {});

  return {
    labels: configs,
    listeners: listeners
  };
}

function dispatchEvent(chart, listeners, label, event) {
  if (!listeners) {
    return;
  }

  var context = label.$context;
  var groups = label.$groups;
  var callback$1;

  if (!listeners[groups._set]) {
    return;
  }

  callback$1 = listeners[groups._set][groups._key];
  if (!callback$1) {
    return;
  }

  if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.callback)(callback$1, [context, event]) === true) {
    // Users are allowed to tweak the given context by injecting values that can be
    // used in scriptable options to display labels differently based on the current
    // event (e.g. highlight an hovered label). That's why we update the label with
    // the output context and schedule a new chart render by setting it dirty.
    chart[EXPANDO_KEY]._dirty = true;
    label.update(context);
  }
}

function dispatchMoveEvents(chart, listeners, previous, label, event) {
  var enter, leave;

  if (!previous && !label) {
    return;
  }

  if (!previous) {
    enter = true;
  } else if (!label) {
    leave = true;
  } else if (previous !== label) {
    leave = enter = true;
  }

  if (leave) {
    dispatchEvent(chart, listeners.leave, previous, event);
  }
  if (enter) {
    dispatchEvent(chart, listeners.enter, label, event);
  }
}

function handleMoveEvents(chart, event) {
  var expando = chart[EXPANDO_KEY];
  var listeners = expando._listeners;
  var previous, label;

  if (!listeners.enter && !listeners.leave) {
    return;
  }

  if (event.type === 'mousemove') {
    label = layout.lookup(expando._labels, event);
  } else if (event.type !== 'mouseout') {
    return;
  }

  previous = expando._hovered;
  expando._hovered = label;
  dispatchMoveEvents(chart, listeners, previous, label, event);
}

function handleClickEvents(chart, event) {
  var expando = chart[EXPANDO_KEY];
  var handlers = expando._listeners.click;
  var label = handlers && layout.lookup(expando._labels, event);
  if (label) {
    dispatchEvent(chart, handlers, label, event);
  }
}

var plugin = {
  id: 'datalabels',

  defaults: defaults,

  beforeInit: function(chart) {
    chart[EXPANDO_KEY] = {
      _actives: []
    };
  },

  beforeUpdate: function(chart) {
    var expando = chart[EXPANDO_KEY];
    expando._listened = false;
    expando._listeners = {};     // {<event-type>: {<dataset-index>: {<label-key>: <fn>}}}
    expando._datasets = [];      // per dataset labels: [Label[]]
    expando._labels = [];        // layouted labels: Label[]
  },

  afterDatasetUpdate: function(chart, args, options) {
    var datasetIndex = args.index;
    var expando = chart[EXPANDO_KEY];
    var labels = expando._datasets[datasetIndex] = [];
    var visible = chart.isDatasetVisible(datasetIndex);
    var dataset = chart.data.datasets[datasetIndex];
    var config = configure(dataset, options);
    var elements = args.meta.data || [];
    var ctx = chart.ctx;
    var i, j, ilen, jlen, cfg, key, el, label;

    ctx.save();

    for (i = 0, ilen = elements.length; i < ilen; ++i) {
      el = elements[i];
      el[EXPANDO_KEY] = [];

      if (visible && el && chart.getDataVisibility(i) && !el.skip) {
        for (j = 0, jlen = config.labels.length; j < jlen; ++j) {
          cfg = config.labels[j];
          key = cfg._key;

          label = new Label(cfg, ctx, el, i);
          label.$groups = {
            _set: datasetIndex,
            _key: key || DEFAULT_KEY
          };
          label.$context = {
            active: false,
            chart: chart,
            dataIndex: i,
            dataset: dataset,
            datasetIndex: datasetIndex
          };

          label.update(label.$context);
          el[EXPANDO_KEY].push(label);
          labels.push(label);
        }
      }
    }

    ctx.restore();

    // Store listeners at the chart level and per event type to optimize
    // cases where no listeners are registered for a specific event.
    (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.merge)(expando._listeners, config.listeners, {
      merger: function(event, target, source) {
        target[event] = target[event] || {};
        target[event][args.index] = source[event];
        expando._listened = true;
      }
    });
  },

  afterUpdate: function(chart) {
    chart[EXPANDO_KEY]._labels = layout.prepare(chart[EXPANDO_KEY]._datasets);
  },

  // Draw labels on top of all dataset elements
  // https://github.com/chartjs/chartjs-plugin-datalabels/issues/29
  // https://github.com/chartjs/chartjs-plugin-datalabels/issues/32
  afterDatasetsDraw: function(chart) {
    layout.draw(chart, chart[EXPANDO_KEY]._labels);
  },

  beforeEvent: function(chart, args) {
    // If there is no listener registered for this chart, `listened` will be false,
    // meaning we can immediately ignore the incoming event and avoid useless extra
    // computation for users who don't implement label interactions.
    if (chart[EXPANDO_KEY]._listened) {
      var event = args.event;
      switch (event.type) {
      case 'mousemove':
      case 'mouseout':
        handleMoveEvents(chart, event);
        break;
      case 'click':
        handleClickEvents(chart, event);
        break;
      }
    }
  },

  afterEvent: function(chart) {
    var expando = chart[EXPANDO_KEY];
    var previous = expando._actives;
    var actives = expando._actives = chart.getActiveElements();
    var updates = utils.arrayDiff(previous, actives);
    var i, ilen, j, jlen, update, label, labels;

    for (i = 0, ilen = updates.length; i < ilen; ++i) {
      update = updates[i];
      if (update[1]) {
        labels = update[0].element[EXPANDO_KEY] || [];
        for (j = 0, jlen = labels.length; j < jlen; ++j) {
          label = labels[j];
          label.$context.active = (update[1] === 1);
          label.update(label.$context);
        }
      }
    }

    if (expando._dirty || updates.length) {
      layout.update(expando._labels);
      chart.render();
    }

    delete expando._dirty;
  }
};




/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/bootstrap-icons/font/bootstrap-icons.css":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/bootstrap-icons/font/bootstrap-icons.css ***!
  \*****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/bootstrap-icons.woff2?dd67030699838ea613ee6dbda90effa6 */ "./node_modules/bootstrap-icons/font/fonts/bootstrap-icons.woff2?dd67030699838ea613ee6dbda90effa6"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/bootstrap-icons.woff?dd67030699838ea613ee6dbda90effa6 */ "./node_modules/bootstrap-icons/font/fonts/bootstrap-icons.woff?dd67030699838ea613ee6dbda90effa6"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/*!
 * Bootstrap Icons v1.11.3 (https://icons.getbootstrap.com/)
 * Copyright 2019-2024 The Bootstrap Authors
 * Licensed under MIT (https://github.com/twbs/icons/blob/main/LICENSE)
 */

@font-face {
  font-display: block;
  font-family: "bootstrap-icons";
  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format("woff2"),
url(${___CSS_LOADER_URL_REPLACEMENT_1___}) format("woff");
}

.bi::before,
[class^="bi-"]::before,
[class*=" bi-"]::before {
  display: inline-block;
  font-family: bootstrap-icons !important;
  font-style: normal;
  font-weight: normal !important;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  vertical-align: -.125em;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.bi-123::before { content: "\\f67f"; }
.bi-alarm-fill::before { content: "\\f101"; }
.bi-alarm::before { content: "\\f102"; }
.bi-align-bottom::before { content: "\\f103"; }
.bi-align-center::before { content: "\\f104"; }
.bi-align-end::before { content: "\\f105"; }
.bi-align-middle::before { content: "\\f106"; }
.bi-align-start::before { content: "\\f107"; }
.bi-align-top::before { content: "\\f108"; }
.bi-alt::before { content: "\\f109"; }
.bi-app-indicator::before { content: "\\f10a"; }
.bi-app::before { content: "\\f10b"; }
.bi-archive-fill::before { content: "\\f10c"; }
.bi-archive::before { content: "\\f10d"; }
.bi-arrow-90deg-down::before { content: "\\f10e"; }
.bi-arrow-90deg-left::before { content: "\\f10f"; }
.bi-arrow-90deg-right::before { content: "\\f110"; }
.bi-arrow-90deg-up::before { content: "\\f111"; }
.bi-arrow-bar-down::before { content: "\\f112"; }
.bi-arrow-bar-left::before { content: "\\f113"; }
.bi-arrow-bar-right::before { content: "\\f114"; }
.bi-arrow-bar-up::before { content: "\\f115"; }
.bi-arrow-clockwise::before { content: "\\f116"; }
.bi-arrow-counterclockwise::before { content: "\\f117"; }
.bi-arrow-down-circle-fill::before { content: "\\f118"; }
.bi-arrow-down-circle::before { content: "\\f119"; }
.bi-arrow-down-left-circle-fill::before { content: "\\f11a"; }
.bi-arrow-down-left-circle::before { content: "\\f11b"; }
.bi-arrow-down-left-square-fill::before { content: "\\f11c"; }
.bi-arrow-down-left-square::before { content: "\\f11d"; }
.bi-arrow-down-left::before { content: "\\f11e"; }
.bi-arrow-down-right-circle-fill::before { content: "\\f11f"; }
.bi-arrow-down-right-circle::before { content: "\\f120"; }
.bi-arrow-down-right-square-fill::before { content: "\\f121"; }
.bi-arrow-down-right-square::before { content: "\\f122"; }
.bi-arrow-down-right::before { content: "\\f123"; }
.bi-arrow-down-short::before { content: "\\f124"; }
.bi-arrow-down-square-fill::before { content: "\\f125"; }
.bi-arrow-down-square::before { content: "\\f126"; }
.bi-arrow-down-up::before { content: "\\f127"; }
.bi-arrow-down::before { content: "\\f128"; }
.bi-arrow-left-circle-fill::before { content: "\\f129"; }
.bi-arrow-left-circle::before { content: "\\f12a"; }
.bi-arrow-left-right::before { content: "\\f12b"; }
.bi-arrow-left-short::before { content: "\\f12c"; }
.bi-arrow-left-square-fill::before { content: "\\f12d"; }
.bi-arrow-left-square::before { content: "\\f12e"; }
.bi-arrow-left::before { content: "\\f12f"; }
.bi-arrow-repeat::before { content: "\\f130"; }
.bi-arrow-return-left::before { content: "\\f131"; }
.bi-arrow-return-right::before { content: "\\f132"; }
.bi-arrow-right-circle-fill::before { content: "\\f133"; }
.bi-arrow-right-circle::before { content: "\\f134"; }
.bi-arrow-right-short::before { content: "\\f135"; }
.bi-arrow-right-square-fill::before { content: "\\f136"; }
.bi-arrow-right-square::before { content: "\\f137"; }
.bi-arrow-right::before { content: "\\f138"; }
.bi-arrow-up-circle-fill::before { content: "\\f139"; }
.bi-arrow-up-circle::before { content: "\\f13a"; }
.bi-arrow-up-left-circle-fill::before { content: "\\f13b"; }
.bi-arrow-up-left-circle::before { content: "\\f13c"; }
.bi-arrow-up-left-square-fill::before { content: "\\f13d"; }
.bi-arrow-up-left-square::before { content: "\\f13e"; }
.bi-arrow-up-left::before { content: "\\f13f"; }
.bi-arrow-up-right-circle-fill::before { content: "\\f140"; }
.bi-arrow-up-right-circle::before { content: "\\f141"; }
.bi-arrow-up-right-square-fill::before { content: "\\f142"; }
.bi-arrow-up-right-square::before { content: "\\f143"; }
.bi-arrow-up-right::before { content: "\\f144"; }
.bi-arrow-up-short::before { content: "\\f145"; }
.bi-arrow-up-square-fill::before { content: "\\f146"; }
.bi-arrow-up-square::before { content: "\\f147"; }
.bi-arrow-up::before { content: "\\f148"; }
.bi-arrows-angle-contract::before { content: "\\f149"; }
.bi-arrows-angle-expand::before { content: "\\f14a"; }
.bi-arrows-collapse::before { content: "\\f14b"; }
.bi-arrows-expand::before { content: "\\f14c"; }
.bi-arrows-fullscreen::before { content: "\\f14d"; }
.bi-arrows-move::before { content: "\\f14e"; }
.bi-aspect-ratio-fill::before { content: "\\f14f"; }
.bi-aspect-ratio::before { content: "\\f150"; }
.bi-asterisk::before { content: "\\f151"; }
.bi-at::before { content: "\\f152"; }
.bi-award-fill::before { content: "\\f153"; }
.bi-award::before { content: "\\f154"; }
.bi-back::before { content: "\\f155"; }
.bi-backspace-fill::before { content: "\\f156"; }
.bi-backspace-reverse-fill::before { content: "\\f157"; }
.bi-backspace-reverse::before { content: "\\f158"; }
.bi-backspace::before { content: "\\f159"; }
.bi-badge-3d-fill::before { content: "\\f15a"; }
.bi-badge-3d::before { content: "\\f15b"; }
.bi-badge-4k-fill::before { content: "\\f15c"; }
.bi-badge-4k::before { content: "\\f15d"; }
.bi-badge-8k-fill::before { content: "\\f15e"; }
.bi-badge-8k::before { content: "\\f15f"; }
.bi-badge-ad-fill::before { content: "\\f160"; }
.bi-badge-ad::before { content: "\\f161"; }
.bi-badge-ar-fill::before { content: "\\f162"; }
.bi-badge-ar::before { content: "\\f163"; }
.bi-badge-cc-fill::before { content: "\\f164"; }
.bi-badge-cc::before { content: "\\f165"; }
.bi-badge-hd-fill::before { content: "\\f166"; }
.bi-badge-hd::before { content: "\\f167"; }
.bi-badge-tm-fill::before { content: "\\f168"; }
.bi-badge-tm::before { content: "\\f169"; }
.bi-badge-vo-fill::before { content: "\\f16a"; }
.bi-badge-vo::before { content: "\\f16b"; }
.bi-badge-vr-fill::before { content: "\\f16c"; }
.bi-badge-vr::before { content: "\\f16d"; }
.bi-badge-wc-fill::before { content: "\\f16e"; }
.bi-badge-wc::before { content: "\\f16f"; }
.bi-bag-check-fill::before { content: "\\f170"; }
.bi-bag-check::before { content: "\\f171"; }
.bi-bag-dash-fill::before { content: "\\f172"; }
.bi-bag-dash::before { content: "\\f173"; }
.bi-bag-fill::before { content: "\\f174"; }
.bi-bag-plus-fill::before { content: "\\f175"; }
.bi-bag-plus::before { content: "\\f176"; }
.bi-bag-x-fill::before { content: "\\f177"; }
.bi-bag-x::before { content: "\\f178"; }
.bi-bag::before { content: "\\f179"; }
.bi-bar-chart-fill::before { content: "\\f17a"; }
.bi-bar-chart-line-fill::before { content: "\\f17b"; }
.bi-bar-chart-line::before { content: "\\f17c"; }
.bi-bar-chart-steps::before { content: "\\f17d"; }
.bi-bar-chart::before { content: "\\f17e"; }
.bi-basket-fill::before { content: "\\f17f"; }
.bi-basket::before { content: "\\f180"; }
.bi-basket2-fill::before { content: "\\f181"; }
.bi-basket2::before { content: "\\f182"; }
.bi-basket3-fill::before { content: "\\f183"; }
.bi-basket3::before { content: "\\f184"; }
.bi-battery-charging::before { content: "\\f185"; }
.bi-battery-full::before { content: "\\f186"; }
.bi-battery-half::before { content: "\\f187"; }
.bi-battery::before { content: "\\f188"; }
.bi-bell-fill::before { content: "\\f189"; }
.bi-bell::before { content: "\\f18a"; }
.bi-bezier::before { content: "\\f18b"; }
.bi-bezier2::before { content: "\\f18c"; }
.bi-bicycle::before { content: "\\f18d"; }
.bi-binoculars-fill::before { content: "\\f18e"; }
.bi-binoculars::before { content: "\\f18f"; }
.bi-blockquote-left::before { content: "\\f190"; }
.bi-blockquote-right::before { content: "\\f191"; }
.bi-book-fill::before { content: "\\f192"; }
.bi-book-half::before { content: "\\f193"; }
.bi-book::before { content: "\\f194"; }
.bi-bookmark-check-fill::before { content: "\\f195"; }
.bi-bookmark-check::before { content: "\\f196"; }
.bi-bookmark-dash-fill::before { content: "\\f197"; }
.bi-bookmark-dash::before { content: "\\f198"; }
.bi-bookmark-fill::before { content: "\\f199"; }
.bi-bookmark-heart-fill::before { content: "\\f19a"; }
.bi-bookmark-heart::before { content: "\\f19b"; }
.bi-bookmark-plus-fill::before { content: "\\f19c"; }
.bi-bookmark-plus::before { content: "\\f19d"; }
.bi-bookmark-star-fill::before { content: "\\f19e"; }
.bi-bookmark-star::before { content: "\\f19f"; }
.bi-bookmark-x-fill::before { content: "\\f1a0"; }
.bi-bookmark-x::before { content: "\\f1a1"; }
.bi-bookmark::before { content: "\\f1a2"; }
.bi-bookmarks-fill::before { content: "\\f1a3"; }
.bi-bookmarks::before { content: "\\f1a4"; }
.bi-bookshelf::before { content: "\\f1a5"; }
.bi-bootstrap-fill::before { content: "\\f1a6"; }
.bi-bootstrap-reboot::before { content: "\\f1a7"; }
.bi-bootstrap::before { content: "\\f1a8"; }
.bi-border-all::before { content: "\\f1a9"; }
.bi-border-bottom::before { content: "\\f1aa"; }
.bi-border-center::before { content: "\\f1ab"; }
.bi-border-inner::before { content: "\\f1ac"; }
.bi-border-left::before { content: "\\f1ad"; }
.bi-border-middle::before { content: "\\f1ae"; }
.bi-border-outer::before { content: "\\f1af"; }
.bi-border-right::before { content: "\\f1b0"; }
.bi-border-style::before { content: "\\f1b1"; }
.bi-border-top::before { content: "\\f1b2"; }
.bi-border-width::before { content: "\\f1b3"; }
.bi-border::before { content: "\\f1b4"; }
.bi-bounding-box-circles::before { content: "\\f1b5"; }
.bi-bounding-box::before { content: "\\f1b6"; }
.bi-box-arrow-down-left::before { content: "\\f1b7"; }
.bi-box-arrow-down-right::before { content: "\\f1b8"; }
.bi-box-arrow-down::before { content: "\\f1b9"; }
.bi-box-arrow-in-down-left::before { content: "\\f1ba"; }
.bi-box-arrow-in-down-right::before { content: "\\f1bb"; }
.bi-box-arrow-in-down::before { content: "\\f1bc"; }
.bi-box-arrow-in-left::before { content: "\\f1bd"; }
.bi-box-arrow-in-right::before { content: "\\f1be"; }
.bi-box-arrow-in-up-left::before { content: "\\f1bf"; }
.bi-box-arrow-in-up-right::before { content: "\\f1c0"; }
.bi-box-arrow-in-up::before { content: "\\f1c1"; }
.bi-box-arrow-left::before { content: "\\f1c2"; }
.bi-box-arrow-right::before { content: "\\f1c3"; }
.bi-box-arrow-up-left::before { content: "\\f1c4"; }
.bi-box-arrow-up-right::before { content: "\\f1c5"; }
.bi-box-arrow-up::before { content: "\\f1c6"; }
.bi-box-seam::before { content: "\\f1c7"; }
.bi-box::before { content: "\\f1c8"; }
.bi-braces::before { content: "\\f1c9"; }
.bi-bricks::before { content: "\\f1ca"; }
.bi-briefcase-fill::before { content: "\\f1cb"; }
.bi-briefcase::before { content: "\\f1cc"; }
.bi-brightness-alt-high-fill::before { content: "\\f1cd"; }
.bi-brightness-alt-high::before { content: "\\f1ce"; }
.bi-brightness-alt-low-fill::before { content: "\\f1cf"; }
.bi-brightness-alt-low::before { content: "\\f1d0"; }
.bi-brightness-high-fill::before { content: "\\f1d1"; }
.bi-brightness-high::before { content: "\\f1d2"; }
.bi-brightness-low-fill::before { content: "\\f1d3"; }
.bi-brightness-low::before { content: "\\f1d4"; }
.bi-broadcast-pin::before { content: "\\f1d5"; }
.bi-broadcast::before { content: "\\f1d6"; }
.bi-brush-fill::before { content: "\\f1d7"; }
.bi-brush::before { content: "\\f1d8"; }
.bi-bucket-fill::before { content: "\\f1d9"; }
.bi-bucket::before { content: "\\f1da"; }
.bi-bug-fill::before { content: "\\f1db"; }
.bi-bug::before { content: "\\f1dc"; }
.bi-building::before { content: "\\f1dd"; }
.bi-bullseye::before { content: "\\f1de"; }
.bi-calculator-fill::before { content: "\\f1df"; }
.bi-calculator::before { content: "\\f1e0"; }
.bi-calendar-check-fill::before { content: "\\f1e1"; }
.bi-calendar-check::before { content: "\\f1e2"; }
.bi-calendar-date-fill::before { content: "\\f1e3"; }
.bi-calendar-date::before { content: "\\f1e4"; }
.bi-calendar-day-fill::before { content: "\\f1e5"; }
.bi-calendar-day::before { content: "\\f1e6"; }
.bi-calendar-event-fill::before { content: "\\f1e7"; }
.bi-calendar-event::before { content: "\\f1e8"; }
.bi-calendar-fill::before { content: "\\f1e9"; }
.bi-calendar-minus-fill::before { content: "\\f1ea"; }
.bi-calendar-minus::before { content: "\\f1eb"; }
.bi-calendar-month-fill::before { content: "\\f1ec"; }
.bi-calendar-month::before { content: "\\f1ed"; }
.bi-calendar-plus-fill::before { content: "\\f1ee"; }
.bi-calendar-plus::before { content: "\\f1ef"; }
.bi-calendar-range-fill::before { content: "\\f1f0"; }
.bi-calendar-range::before { content: "\\f1f1"; }
.bi-calendar-week-fill::before { content: "\\f1f2"; }
.bi-calendar-week::before { content: "\\f1f3"; }
.bi-calendar-x-fill::before { content: "\\f1f4"; }
.bi-calendar-x::before { content: "\\f1f5"; }
.bi-calendar::before { content: "\\f1f6"; }
.bi-calendar2-check-fill::before { content: "\\f1f7"; }
.bi-calendar2-check::before { content: "\\f1f8"; }
.bi-calendar2-date-fill::before { content: "\\f1f9"; }
.bi-calendar2-date::before { content: "\\f1fa"; }
.bi-calendar2-day-fill::before { content: "\\f1fb"; }
.bi-calendar2-day::before { content: "\\f1fc"; }
.bi-calendar2-event-fill::before { content: "\\f1fd"; }
.bi-calendar2-event::before { content: "\\f1fe"; }
.bi-calendar2-fill::before { content: "\\f1ff"; }
.bi-calendar2-minus-fill::before { content: "\\f200"; }
.bi-calendar2-minus::before { content: "\\f201"; }
.bi-calendar2-month-fill::before { content: "\\f202"; }
.bi-calendar2-month::before { content: "\\f203"; }
.bi-calendar2-plus-fill::before { content: "\\f204"; }
.bi-calendar2-plus::before { content: "\\f205"; }
.bi-calendar2-range-fill::before { content: "\\f206"; }
.bi-calendar2-range::before { content: "\\f207"; }
.bi-calendar2-week-fill::before { content: "\\f208"; }
.bi-calendar2-week::before { content: "\\f209"; }
.bi-calendar2-x-fill::before { content: "\\f20a"; }
.bi-calendar2-x::before { content: "\\f20b"; }
.bi-calendar2::before { content: "\\f20c"; }
.bi-calendar3-event-fill::before { content: "\\f20d"; }
.bi-calendar3-event::before { content: "\\f20e"; }
.bi-calendar3-fill::before { content: "\\f20f"; }
.bi-calendar3-range-fill::before { content: "\\f210"; }
.bi-calendar3-range::before { content: "\\f211"; }
.bi-calendar3-week-fill::before { content: "\\f212"; }
.bi-calendar3-week::before { content: "\\f213"; }
.bi-calendar3::before { content: "\\f214"; }
.bi-calendar4-event::before { content: "\\f215"; }
.bi-calendar4-range::before { content: "\\f216"; }
.bi-calendar4-week::before { content: "\\f217"; }
.bi-calendar4::before { content: "\\f218"; }
.bi-camera-fill::before { content: "\\f219"; }
.bi-camera-reels-fill::before { content: "\\f21a"; }
.bi-camera-reels::before { content: "\\f21b"; }
.bi-camera-video-fill::before { content: "\\f21c"; }
.bi-camera-video-off-fill::before { content: "\\f21d"; }
.bi-camera-video-off::before { content: "\\f21e"; }
.bi-camera-video::before { content: "\\f21f"; }
.bi-camera::before { content: "\\f220"; }
.bi-camera2::before { content: "\\f221"; }
.bi-capslock-fill::before { content: "\\f222"; }
.bi-capslock::before { content: "\\f223"; }
.bi-card-checklist::before { content: "\\f224"; }
.bi-card-heading::before { content: "\\f225"; }
.bi-card-image::before { content: "\\f226"; }
.bi-card-list::before { content: "\\f227"; }
.bi-card-text::before { content: "\\f228"; }
.bi-caret-down-fill::before { content: "\\f229"; }
.bi-caret-down-square-fill::before { content: "\\f22a"; }
.bi-caret-down-square::before { content: "\\f22b"; }
.bi-caret-down::before { content: "\\f22c"; }
.bi-caret-left-fill::before { content: "\\f22d"; }
.bi-caret-left-square-fill::before { content: "\\f22e"; }
.bi-caret-left-square::before { content: "\\f22f"; }
.bi-caret-left::before { content: "\\f230"; }
.bi-caret-right-fill::before { content: "\\f231"; }
.bi-caret-right-square-fill::before { content: "\\f232"; }
.bi-caret-right-square::before { content: "\\f233"; }
.bi-caret-right::before { content: "\\f234"; }
.bi-caret-up-fill::before { content: "\\f235"; }
.bi-caret-up-square-fill::before { content: "\\f236"; }
.bi-caret-up-square::before { content: "\\f237"; }
.bi-caret-up::before { content: "\\f238"; }
.bi-cart-check-fill::before { content: "\\f239"; }
.bi-cart-check::before { content: "\\f23a"; }
.bi-cart-dash-fill::before { content: "\\f23b"; }
.bi-cart-dash::before { content: "\\f23c"; }
.bi-cart-fill::before { content: "\\f23d"; }
.bi-cart-plus-fill::before { content: "\\f23e"; }
.bi-cart-plus::before { content: "\\f23f"; }
.bi-cart-x-fill::before { content: "\\f240"; }
.bi-cart-x::before { content: "\\f241"; }
.bi-cart::before { content: "\\f242"; }
.bi-cart2::before { content: "\\f243"; }
.bi-cart3::before { content: "\\f244"; }
.bi-cart4::before { content: "\\f245"; }
.bi-cash-stack::before { content: "\\f246"; }
.bi-cash::before { content: "\\f247"; }
.bi-cast::before { content: "\\f248"; }
.bi-chat-dots-fill::before { content: "\\f249"; }
.bi-chat-dots::before { content: "\\f24a"; }
.bi-chat-fill::before { content: "\\f24b"; }
.bi-chat-left-dots-fill::before { content: "\\f24c"; }
.bi-chat-left-dots::before { content: "\\f24d"; }
.bi-chat-left-fill::before { content: "\\f24e"; }
.bi-chat-left-quote-fill::before { content: "\\f24f"; }
.bi-chat-left-quote::before { content: "\\f250"; }
.bi-chat-left-text-fill::before { content: "\\f251"; }
.bi-chat-left-text::before { content: "\\f252"; }
.bi-chat-left::before { content: "\\f253"; }
.bi-chat-quote-fill::before { content: "\\f254"; }
.bi-chat-quote::before { content: "\\f255"; }
.bi-chat-right-dots-fill::before { content: "\\f256"; }
.bi-chat-right-dots::before { content: "\\f257"; }
.bi-chat-right-fill::before { content: "\\f258"; }
.bi-chat-right-quote-fill::before { content: "\\f259"; }
.bi-chat-right-quote::before { content: "\\f25a"; }
.bi-chat-right-text-fill::before { content: "\\f25b"; }
.bi-chat-right-text::before { content: "\\f25c"; }
.bi-chat-right::before { content: "\\f25d"; }
.bi-chat-square-dots-fill::before { content: "\\f25e"; }
.bi-chat-square-dots::before { content: "\\f25f"; }
.bi-chat-square-fill::before { content: "\\f260"; }
.bi-chat-square-quote-fill::before { content: "\\f261"; }
.bi-chat-square-quote::before { content: "\\f262"; }
.bi-chat-square-text-fill::before { content: "\\f263"; }
.bi-chat-square-text::before { content: "\\f264"; }
.bi-chat-square::before { content: "\\f265"; }
.bi-chat-text-fill::before { content: "\\f266"; }
.bi-chat-text::before { content: "\\f267"; }
.bi-chat::before { content: "\\f268"; }
.bi-check-all::before { content: "\\f269"; }
.bi-check-circle-fill::before { content: "\\f26a"; }
.bi-check-circle::before { content: "\\f26b"; }
.bi-check-square-fill::before { content: "\\f26c"; }
.bi-check-square::before { content: "\\f26d"; }
.bi-check::before { content: "\\f26e"; }
.bi-check2-all::before { content: "\\f26f"; }
.bi-check2-circle::before { content: "\\f270"; }
.bi-check2-square::before { content: "\\f271"; }
.bi-check2::before { content: "\\f272"; }
.bi-chevron-bar-contract::before { content: "\\f273"; }
.bi-chevron-bar-down::before { content: "\\f274"; }
.bi-chevron-bar-expand::before { content: "\\f275"; }
.bi-chevron-bar-left::before { content: "\\f276"; }
.bi-chevron-bar-right::before { content: "\\f277"; }
.bi-chevron-bar-up::before { content: "\\f278"; }
.bi-chevron-compact-down::before { content: "\\f279"; }
.bi-chevron-compact-left::before { content: "\\f27a"; }
.bi-chevron-compact-right::before { content: "\\f27b"; }
.bi-chevron-compact-up::before { content: "\\f27c"; }
.bi-chevron-contract::before { content: "\\f27d"; }
.bi-chevron-double-down::before { content: "\\f27e"; }
.bi-chevron-double-left::before { content: "\\f27f"; }
.bi-chevron-double-right::before { content: "\\f280"; }
.bi-chevron-double-up::before { content: "\\f281"; }
.bi-chevron-down::before { content: "\\f282"; }
.bi-chevron-expand::before { content: "\\f283"; }
.bi-chevron-left::before { content: "\\f284"; }
.bi-chevron-right::before { content: "\\f285"; }
.bi-chevron-up::before { content: "\\f286"; }
.bi-circle-fill::before { content: "\\f287"; }
.bi-circle-half::before { content: "\\f288"; }
.bi-circle-square::before { content: "\\f289"; }
.bi-circle::before { content: "\\f28a"; }
.bi-clipboard-check::before { content: "\\f28b"; }
.bi-clipboard-data::before { content: "\\f28c"; }
.bi-clipboard-minus::before { content: "\\f28d"; }
.bi-clipboard-plus::before { content: "\\f28e"; }
.bi-clipboard-x::before { content: "\\f28f"; }
.bi-clipboard::before { content: "\\f290"; }
.bi-clock-fill::before { content: "\\f291"; }
.bi-clock-history::before { content: "\\f292"; }
.bi-clock::before { content: "\\f293"; }
.bi-cloud-arrow-down-fill::before { content: "\\f294"; }
.bi-cloud-arrow-down::before { content: "\\f295"; }
.bi-cloud-arrow-up-fill::before { content: "\\f296"; }
.bi-cloud-arrow-up::before { content: "\\f297"; }
.bi-cloud-check-fill::before { content: "\\f298"; }
.bi-cloud-check::before { content: "\\f299"; }
.bi-cloud-download-fill::before { content: "\\f29a"; }
.bi-cloud-download::before { content: "\\f29b"; }
.bi-cloud-drizzle-fill::before { content: "\\f29c"; }
.bi-cloud-drizzle::before { content: "\\f29d"; }
.bi-cloud-fill::before { content: "\\f29e"; }
.bi-cloud-fog-fill::before { content: "\\f29f"; }
.bi-cloud-fog::before { content: "\\f2a0"; }
.bi-cloud-fog2-fill::before { content: "\\f2a1"; }
.bi-cloud-fog2::before { content: "\\f2a2"; }
.bi-cloud-hail-fill::before { content: "\\f2a3"; }
.bi-cloud-hail::before { content: "\\f2a4"; }
.bi-cloud-haze-fill::before { content: "\\f2a6"; }
.bi-cloud-haze::before { content: "\\f2a7"; }
.bi-cloud-haze2-fill::before { content: "\\f2a8"; }
.bi-cloud-lightning-fill::before { content: "\\f2a9"; }
.bi-cloud-lightning-rain-fill::before { content: "\\f2aa"; }
.bi-cloud-lightning-rain::before { content: "\\f2ab"; }
.bi-cloud-lightning::before { content: "\\f2ac"; }
.bi-cloud-minus-fill::before { content: "\\f2ad"; }
.bi-cloud-minus::before { content: "\\f2ae"; }
.bi-cloud-moon-fill::before { content: "\\f2af"; }
.bi-cloud-moon::before { content: "\\f2b0"; }
.bi-cloud-plus-fill::before { content: "\\f2b1"; }
.bi-cloud-plus::before { content: "\\f2b2"; }
.bi-cloud-rain-fill::before { content: "\\f2b3"; }
.bi-cloud-rain-heavy-fill::before { content: "\\f2b4"; }
.bi-cloud-rain-heavy::before { content: "\\f2b5"; }
.bi-cloud-rain::before { content: "\\f2b6"; }
.bi-cloud-slash-fill::before { content: "\\f2b7"; }
.bi-cloud-slash::before { content: "\\f2b8"; }
.bi-cloud-sleet-fill::before { content: "\\f2b9"; }
.bi-cloud-sleet::before { content: "\\f2ba"; }
.bi-cloud-snow-fill::before { content: "\\f2bb"; }
.bi-cloud-snow::before { content: "\\f2bc"; }
.bi-cloud-sun-fill::before { content: "\\f2bd"; }
.bi-cloud-sun::before { content: "\\f2be"; }
.bi-cloud-upload-fill::before { content: "\\f2bf"; }
.bi-cloud-upload::before { content: "\\f2c0"; }
.bi-cloud::before { content: "\\f2c1"; }
.bi-clouds-fill::before { content: "\\f2c2"; }
.bi-clouds::before { content: "\\f2c3"; }
.bi-cloudy-fill::before { content: "\\f2c4"; }
.bi-cloudy::before { content: "\\f2c5"; }
.bi-code-slash::before { content: "\\f2c6"; }
.bi-code-square::before { content: "\\f2c7"; }
.bi-code::before { content: "\\f2c8"; }
.bi-collection-fill::before { content: "\\f2c9"; }
.bi-collection-play-fill::before { content: "\\f2ca"; }
.bi-collection-play::before { content: "\\f2cb"; }
.bi-collection::before { content: "\\f2cc"; }
.bi-columns-gap::before { content: "\\f2cd"; }
.bi-columns::before { content: "\\f2ce"; }
.bi-command::before { content: "\\f2cf"; }
.bi-compass-fill::before { content: "\\f2d0"; }
.bi-compass::before { content: "\\f2d1"; }
.bi-cone-striped::before { content: "\\f2d2"; }
.bi-cone::before { content: "\\f2d3"; }
.bi-controller::before { content: "\\f2d4"; }
.bi-cpu-fill::before { content: "\\f2d5"; }
.bi-cpu::before { content: "\\f2d6"; }
.bi-credit-card-2-back-fill::before { content: "\\f2d7"; }
.bi-credit-card-2-back::before { content: "\\f2d8"; }
.bi-credit-card-2-front-fill::before { content: "\\f2d9"; }
.bi-credit-card-2-front::before { content: "\\f2da"; }
.bi-credit-card-fill::before { content: "\\f2db"; }
.bi-credit-card::before { content: "\\f2dc"; }
.bi-crop::before { content: "\\f2dd"; }
.bi-cup-fill::before { content: "\\f2de"; }
.bi-cup-straw::before { content: "\\f2df"; }
.bi-cup::before { content: "\\f2e0"; }
.bi-cursor-fill::before { content: "\\f2e1"; }
.bi-cursor-text::before { content: "\\f2e2"; }
.bi-cursor::before { content: "\\f2e3"; }
.bi-dash-circle-dotted::before { content: "\\f2e4"; }
.bi-dash-circle-fill::before { content: "\\f2e5"; }
.bi-dash-circle::before { content: "\\f2e6"; }
.bi-dash-square-dotted::before { content: "\\f2e7"; }
.bi-dash-square-fill::before { content: "\\f2e8"; }
.bi-dash-square::before { content: "\\f2e9"; }
.bi-dash::before { content: "\\f2ea"; }
.bi-diagram-2-fill::before { content: "\\f2eb"; }
.bi-diagram-2::before { content: "\\f2ec"; }
.bi-diagram-3-fill::before { content: "\\f2ed"; }
.bi-diagram-3::before { content: "\\f2ee"; }
.bi-diamond-fill::before { content: "\\f2ef"; }
.bi-diamond-half::before { content: "\\f2f0"; }
.bi-diamond::before { content: "\\f2f1"; }
.bi-dice-1-fill::before { content: "\\f2f2"; }
.bi-dice-1::before { content: "\\f2f3"; }
.bi-dice-2-fill::before { content: "\\f2f4"; }
.bi-dice-2::before { content: "\\f2f5"; }
.bi-dice-3-fill::before { content: "\\f2f6"; }
.bi-dice-3::before { content: "\\f2f7"; }
.bi-dice-4-fill::before { content: "\\f2f8"; }
.bi-dice-4::before { content: "\\f2f9"; }
.bi-dice-5-fill::before { content: "\\f2fa"; }
.bi-dice-5::before { content: "\\f2fb"; }
.bi-dice-6-fill::before { content: "\\f2fc"; }
.bi-dice-6::before { content: "\\f2fd"; }
.bi-disc-fill::before { content: "\\f2fe"; }
.bi-disc::before { content: "\\f2ff"; }
.bi-discord::before { content: "\\f300"; }
.bi-display-fill::before { content: "\\f301"; }
.bi-display::before { content: "\\f302"; }
.bi-distribute-horizontal::before { content: "\\f303"; }
.bi-distribute-vertical::before { content: "\\f304"; }
.bi-door-closed-fill::before { content: "\\f305"; }
.bi-door-closed::before { content: "\\f306"; }
.bi-door-open-fill::before { content: "\\f307"; }
.bi-door-open::before { content: "\\f308"; }
.bi-dot::before { content: "\\f309"; }
.bi-download::before { content: "\\f30a"; }
.bi-droplet-fill::before { content: "\\f30b"; }
.bi-droplet-half::before { content: "\\f30c"; }
.bi-droplet::before { content: "\\f30d"; }
.bi-earbuds::before { content: "\\f30e"; }
.bi-easel-fill::before { content: "\\f30f"; }
.bi-easel::before { content: "\\f310"; }
.bi-egg-fill::before { content: "\\f311"; }
.bi-egg-fried::before { content: "\\f312"; }
.bi-egg::before { content: "\\f313"; }
.bi-eject-fill::before { content: "\\f314"; }
.bi-eject::before { content: "\\f315"; }
.bi-emoji-angry-fill::before { content: "\\f316"; }
.bi-emoji-angry::before { content: "\\f317"; }
.bi-emoji-dizzy-fill::before { content: "\\f318"; }
.bi-emoji-dizzy::before { content: "\\f319"; }
.bi-emoji-expressionless-fill::before { content: "\\f31a"; }
.bi-emoji-expressionless::before { content: "\\f31b"; }
.bi-emoji-frown-fill::before { content: "\\f31c"; }
.bi-emoji-frown::before { content: "\\f31d"; }
.bi-emoji-heart-eyes-fill::before { content: "\\f31e"; }
.bi-emoji-heart-eyes::before { content: "\\f31f"; }
.bi-emoji-laughing-fill::before { content: "\\f320"; }
.bi-emoji-laughing::before { content: "\\f321"; }
.bi-emoji-neutral-fill::before { content: "\\f322"; }
.bi-emoji-neutral::before { content: "\\f323"; }
.bi-emoji-smile-fill::before { content: "\\f324"; }
.bi-emoji-smile-upside-down-fill::before { content: "\\f325"; }
.bi-emoji-smile-upside-down::before { content: "\\f326"; }
.bi-emoji-smile::before { content: "\\f327"; }
.bi-emoji-sunglasses-fill::before { content: "\\f328"; }
.bi-emoji-sunglasses::before { content: "\\f329"; }
.bi-emoji-wink-fill::before { content: "\\f32a"; }
.bi-emoji-wink::before { content: "\\f32b"; }
.bi-envelope-fill::before { content: "\\f32c"; }
.bi-envelope-open-fill::before { content: "\\f32d"; }
.bi-envelope-open::before { content: "\\f32e"; }
.bi-envelope::before { content: "\\f32f"; }
.bi-eraser-fill::before { content: "\\f330"; }
.bi-eraser::before { content: "\\f331"; }
.bi-exclamation-circle-fill::before { content: "\\f332"; }
.bi-exclamation-circle::before { content: "\\f333"; }
.bi-exclamation-diamond-fill::before { content: "\\f334"; }
.bi-exclamation-diamond::before { content: "\\f335"; }
.bi-exclamation-octagon-fill::before { content: "\\f336"; }
.bi-exclamation-octagon::before { content: "\\f337"; }
.bi-exclamation-square-fill::before { content: "\\f338"; }
.bi-exclamation-square::before { content: "\\f339"; }
.bi-exclamation-triangle-fill::before { content: "\\f33a"; }
.bi-exclamation-triangle::before { content: "\\f33b"; }
.bi-exclamation::before { content: "\\f33c"; }
.bi-exclude::before { content: "\\f33d"; }
.bi-eye-fill::before { content: "\\f33e"; }
.bi-eye-slash-fill::before { content: "\\f33f"; }
.bi-eye-slash::before { content: "\\f340"; }
.bi-eye::before { content: "\\f341"; }
.bi-eyedropper::before { content: "\\f342"; }
.bi-eyeglasses::before { content: "\\f343"; }
.bi-facebook::before { content: "\\f344"; }
.bi-file-arrow-down-fill::before { content: "\\f345"; }
.bi-file-arrow-down::before { content: "\\f346"; }
.bi-file-arrow-up-fill::before { content: "\\f347"; }
.bi-file-arrow-up::before { content: "\\f348"; }
.bi-file-bar-graph-fill::before { content: "\\f349"; }
.bi-file-bar-graph::before { content: "\\f34a"; }
.bi-file-binary-fill::before { content: "\\f34b"; }
.bi-file-binary::before { content: "\\f34c"; }
.bi-file-break-fill::before { content: "\\f34d"; }
.bi-file-break::before { content: "\\f34e"; }
.bi-file-check-fill::before { content: "\\f34f"; }
.bi-file-check::before { content: "\\f350"; }
.bi-file-code-fill::before { content: "\\f351"; }
.bi-file-code::before { content: "\\f352"; }
.bi-file-diff-fill::before { content: "\\f353"; }
.bi-file-diff::before { content: "\\f354"; }
.bi-file-earmark-arrow-down-fill::before { content: "\\f355"; }
.bi-file-earmark-arrow-down::before { content: "\\f356"; }
.bi-file-earmark-arrow-up-fill::before { content: "\\f357"; }
.bi-file-earmark-arrow-up::before { content: "\\f358"; }
.bi-file-earmark-bar-graph-fill::before { content: "\\f359"; }
.bi-file-earmark-bar-graph::before { content: "\\f35a"; }
.bi-file-earmark-binary-fill::before { content: "\\f35b"; }
.bi-file-earmark-binary::before { content: "\\f35c"; }
.bi-file-earmark-break-fill::before { content: "\\f35d"; }
.bi-file-earmark-break::before { content: "\\f35e"; }
.bi-file-earmark-check-fill::before { content: "\\f35f"; }
.bi-file-earmark-check::before { content: "\\f360"; }
.bi-file-earmark-code-fill::before { content: "\\f361"; }
.bi-file-earmark-code::before { content: "\\f362"; }
.bi-file-earmark-diff-fill::before { content: "\\f363"; }
.bi-file-earmark-diff::before { content: "\\f364"; }
.bi-file-earmark-easel-fill::before { content: "\\f365"; }
.bi-file-earmark-easel::before { content: "\\f366"; }
.bi-file-earmark-excel-fill::before { content: "\\f367"; }
.bi-file-earmark-excel::before { content: "\\f368"; }
.bi-file-earmark-fill::before { content: "\\f369"; }
.bi-file-earmark-font-fill::before { content: "\\f36a"; }
.bi-file-earmark-font::before { content: "\\f36b"; }
.bi-file-earmark-image-fill::before { content: "\\f36c"; }
.bi-file-earmark-image::before { content: "\\f36d"; }
.bi-file-earmark-lock-fill::before { content: "\\f36e"; }
.bi-file-earmark-lock::before { content: "\\f36f"; }
.bi-file-earmark-lock2-fill::before { content: "\\f370"; }
.bi-file-earmark-lock2::before { content: "\\f371"; }
.bi-file-earmark-medical-fill::before { content: "\\f372"; }
.bi-file-earmark-medical::before { content: "\\f373"; }
.bi-file-earmark-minus-fill::before { content: "\\f374"; }
.bi-file-earmark-minus::before { content: "\\f375"; }
.bi-file-earmark-music-fill::before { content: "\\f376"; }
.bi-file-earmark-music::before { content: "\\f377"; }
.bi-file-earmark-person-fill::before { content: "\\f378"; }
.bi-file-earmark-person::before { content: "\\f379"; }
.bi-file-earmark-play-fill::before { content: "\\f37a"; }
.bi-file-earmark-play::before { content: "\\f37b"; }
.bi-file-earmark-plus-fill::before { content: "\\f37c"; }
.bi-file-earmark-plus::before { content: "\\f37d"; }
.bi-file-earmark-post-fill::before { content: "\\f37e"; }
.bi-file-earmark-post::before { content: "\\f37f"; }
.bi-file-earmark-ppt-fill::before { content: "\\f380"; }
.bi-file-earmark-ppt::before { content: "\\f381"; }
.bi-file-earmark-richtext-fill::before { content: "\\f382"; }
.bi-file-earmark-richtext::before { content: "\\f383"; }
.bi-file-earmark-ruled-fill::before { content: "\\f384"; }
.bi-file-earmark-ruled::before { content: "\\f385"; }
.bi-file-earmark-slides-fill::before { content: "\\f386"; }
.bi-file-earmark-slides::before { content: "\\f387"; }
.bi-file-earmark-spreadsheet-fill::before { content: "\\f388"; }
.bi-file-earmark-spreadsheet::before { content: "\\f389"; }
.bi-file-earmark-text-fill::before { content: "\\f38a"; }
.bi-file-earmark-text::before { content: "\\f38b"; }
.bi-file-earmark-word-fill::before { content: "\\f38c"; }
.bi-file-earmark-word::before { content: "\\f38d"; }
.bi-file-earmark-x-fill::before { content: "\\f38e"; }
.bi-file-earmark-x::before { content: "\\f38f"; }
.bi-file-earmark-zip-fill::before { content: "\\f390"; }
.bi-file-earmark-zip::before { content: "\\f391"; }
.bi-file-earmark::before { content: "\\f392"; }
.bi-file-easel-fill::before { content: "\\f393"; }
.bi-file-easel::before { content: "\\f394"; }
.bi-file-excel-fill::before { content: "\\f395"; }
.bi-file-excel::before { content: "\\f396"; }
.bi-file-fill::before { content: "\\f397"; }
.bi-file-font-fill::before { content: "\\f398"; }
.bi-file-font::before { content: "\\f399"; }
.bi-file-image-fill::before { content: "\\f39a"; }
.bi-file-image::before { content: "\\f39b"; }
.bi-file-lock-fill::before { content: "\\f39c"; }
.bi-file-lock::before { content: "\\f39d"; }
.bi-file-lock2-fill::before { content: "\\f39e"; }
.bi-file-lock2::before { content: "\\f39f"; }
.bi-file-medical-fill::before { content: "\\f3a0"; }
.bi-file-medical::before { content: "\\f3a1"; }
.bi-file-minus-fill::before { content: "\\f3a2"; }
.bi-file-minus::before { content: "\\f3a3"; }
.bi-file-music-fill::before { content: "\\f3a4"; }
.bi-file-music::before { content: "\\f3a5"; }
.bi-file-person-fill::before { content: "\\f3a6"; }
.bi-file-person::before { content: "\\f3a7"; }
.bi-file-play-fill::before { content: "\\f3a8"; }
.bi-file-play::before { content: "\\f3a9"; }
.bi-file-plus-fill::before { content: "\\f3aa"; }
.bi-file-plus::before { content: "\\f3ab"; }
.bi-file-post-fill::before { content: "\\f3ac"; }
.bi-file-post::before { content: "\\f3ad"; }
.bi-file-ppt-fill::before { content: "\\f3ae"; }
.bi-file-ppt::before { content: "\\f3af"; }
.bi-file-richtext-fill::before { content: "\\f3b0"; }
.bi-file-richtext::before { content: "\\f3b1"; }
.bi-file-ruled-fill::before { content: "\\f3b2"; }
.bi-file-ruled::before { content: "\\f3b3"; }
.bi-file-slides-fill::before { content: "\\f3b4"; }
.bi-file-slides::before { content: "\\f3b5"; }
.bi-file-spreadsheet-fill::before { content: "\\f3b6"; }
.bi-file-spreadsheet::before { content: "\\f3b7"; }
.bi-file-text-fill::before { content: "\\f3b8"; }
.bi-file-text::before { content: "\\f3b9"; }
.bi-file-word-fill::before { content: "\\f3ba"; }
.bi-file-word::before { content: "\\f3bb"; }
.bi-file-x-fill::before { content: "\\f3bc"; }
.bi-file-x::before { content: "\\f3bd"; }
.bi-file-zip-fill::before { content: "\\f3be"; }
.bi-file-zip::before { content: "\\f3bf"; }
.bi-file::before { content: "\\f3c0"; }
.bi-files-alt::before { content: "\\f3c1"; }
.bi-files::before { content: "\\f3c2"; }
.bi-film::before { content: "\\f3c3"; }
.bi-filter-circle-fill::before { content: "\\f3c4"; }
.bi-filter-circle::before { content: "\\f3c5"; }
.bi-filter-left::before { content: "\\f3c6"; }
.bi-filter-right::before { content: "\\f3c7"; }
.bi-filter-square-fill::before { content: "\\f3c8"; }
.bi-filter-square::before { content: "\\f3c9"; }
.bi-filter::before { content: "\\f3ca"; }
.bi-flag-fill::before { content: "\\f3cb"; }
.bi-flag::before { content: "\\f3cc"; }
.bi-flower1::before { content: "\\f3cd"; }
.bi-flower2::before { content: "\\f3ce"; }
.bi-flower3::before { content: "\\f3cf"; }
.bi-folder-check::before { content: "\\f3d0"; }
.bi-folder-fill::before { content: "\\f3d1"; }
.bi-folder-minus::before { content: "\\f3d2"; }
.bi-folder-plus::before { content: "\\f3d3"; }
.bi-folder-symlink-fill::before { content: "\\f3d4"; }
.bi-folder-symlink::before { content: "\\f3d5"; }
.bi-folder-x::before { content: "\\f3d6"; }
.bi-folder::before { content: "\\f3d7"; }
.bi-folder2-open::before { content: "\\f3d8"; }
.bi-folder2::before { content: "\\f3d9"; }
.bi-fonts::before { content: "\\f3da"; }
.bi-forward-fill::before { content: "\\f3db"; }
.bi-forward::before { content: "\\f3dc"; }
.bi-front::before { content: "\\f3dd"; }
.bi-fullscreen-exit::before { content: "\\f3de"; }
.bi-fullscreen::before { content: "\\f3df"; }
.bi-funnel-fill::before { content: "\\f3e0"; }
.bi-funnel::before { content: "\\f3e1"; }
.bi-gear-fill::before { content: "\\f3e2"; }
.bi-gear-wide-connected::before { content: "\\f3e3"; }
.bi-gear-wide::before { content: "\\f3e4"; }
.bi-gear::before { content: "\\f3e5"; }
.bi-gem::before { content: "\\f3e6"; }
.bi-geo-alt-fill::before { content: "\\f3e7"; }
.bi-geo-alt::before { content: "\\f3e8"; }
.bi-geo-fill::before { content: "\\f3e9"; }
.bi-geo::before { content: "\\f3ea"; }
.bi-gift-fill::before { content: "\\f3eb"; }
.bi-gift::before { content: "\\f3ec"; }
.bi-github::before { content: "\\f3ed"; }
.bi-globe::before { content: "\\f3ee"; }
.bi-globe2::before { content: "\\f3ef"; }
.bi-google::before { content: "\\f3f0"; }
.bi-graph-down::before { content: "\\f3f1"; }
.bi-graph-up::before { content: "\\f3f2"; }
.bi-grid-1x2-fill::before { content: "\\f3f3"; }
.bi-grid-1x2::before { content: "\\f3f4"; }
.bi-grid-3x2-gap-fill::before { content: "\\f3f5"; }
.bi-grid-3x2-gap::before { content: "\\f3f6"; }
.bi-grid-3x2::before { content: "\\f3f7"; }
.bi-grid-3x3-gap-fill::before { content: "\\f3f8"; }
.bi-grid-3x3-gap::before { content: "\\f3f9"; }
.bi-grid-3x3::before { content: "\\f3fa"; }
.bi-grid-fill::before { content: "\\f3fb"; }
.bi-grid::before { content: "\\f3fc"; }
.bi-grip-horizontal::before { content: "\\f3fd"; }
.bi-grip-vertical::before { content: "\\f3fe"; }
.bi-hammer::before { content: "\\f3ff"; }
.bi-hand-index-fill::before { content: "\\f400"; }
.bi-hand-index-thumb-fill::before { content: "\\f401"; }
.bi-hand-index-thumb::before { content: "\\f402"; }
.bi-hand-index::before { content: "\\f403"; }
.bi-hand-thumbs-down-fill::before { content: "\\f404"; }
.bi-hand-thumbs-down::before { content: "\\f405"; }
.bi-hand-thumbs-up-fill::before { content: "\\f406"; }
.bi-hand-thumbs-up::before { content: "\\f407"; }
.bi-handbag-fill::before { content: "\\f408"; }
.bi-handbag::before { content: "\\f409"; }
.bi-hash::before { content: "\\f40a"; }
.bi-hdd-fill::before { content: "\\f40b"; }
.bi-hdd-network-fill::before { content: "\\f40c"; }
.bi-hdd-network::before { content: "\\f40d"; }
.bi-hdd-rack-fill::before { content: "\\f40e"; }
.bi-hdd-rack::before { content: "\\f40f"; }
.bi-hdd-stack-fill::before { content: "\\f410"; }
.bi-hdd-stack::before { content: "\\f411"; }
.bi-hdd::before { content: "\\f412"; }
.bi-headphones::before { content: "\\f413"; }
.bi-headset::before { content: "\\f414"; }
.bi-heart-fill::before { content: "\\f415"; }
.bi-heart-half::before { content: "\\f416"; }
.bi-heart::before { content: "\\f417"; }
.bi-heptagon-fill::before { content: "\\f418"; }
.bi-heptagon-half::before { content: "\\f419"; }
.bi-heptagon::before { content: "\\f41a"; }
.bi-hexagon-fill::before { content: "\\f41b"; }
.bi-hexagon-half::before { content: "\\f41c"; }
.bi-hexagon::before { content: "\\f41d"; }
.bi-hourglass-bottom::before { content: "\\f41e"; }
.bi-hourglass-split::before { content: "\\f41f"; }
.bi-hourglass-top::before { content: "\\f420"; }
.bi-hourglass::before { content: "\\f421"; }
.bi-house-door-fill::before { content: "\\f422"; }
.bi-house-door::before { content: "\\f423"; }
.bi-house-fill::before { content: "\\f424"; }
.bi-house::before { content: "\\f425"; }
.bi-hr::before { content: "\\f426"; }
.bi-hurricane::before { content: "\\f427"; }
.bi-image-alt::before { content: "\\f428"; }
.bi-image-fill::before { content: "\\f429"; }
.bi-image::before { content: "\\f42a"; }
.bi-images::before { content: "\\f42b"; }
.bi-inbox-fill::before { content: "\\f42c"; }
.bi-inbox::before { content: "\\f42d"; }
.bi-inboxes-fill::before { content: "\\f42e"; }
.bi-inboxes::before { content: "\\f42f"; }
.bi-info-circle-fill::before { content: "\\f430"; }
.bi-info-circle::before { content: "\\f431"; }
.bi-info-square-fill::before { content: "\\f432"; }
.bi-info-square::before { content: "\\f433"; }
.bi-info::before { content: "\\f434"; }
.bi-input-cursor-text::before { content: "\\f435"; }
.bi-input-cursor::before { content: "\\f436"; }
.bi-instagram::before { content: "\\f437"; }
.bi-intersect::before { content: "\\f438"; }
.bi-journal-album::before { content: "\\f439"; }
.bi-journal-arrow-down::before { content: "\\f43a"; }
.bi-journal-arrow-up::before { content: "\\f43b"; }
.bi-journal-bookmark-fill::before { content: "\\f43c"; }
.bi-journal-bookmark::before { content: "\\f43d"; }
.bi-journal-check::before { content: "\\f43e"; }
.bi-journal-code::before { content: "\\f43f"; }
.bi-journal-medical::before { content: "\\f440"; }
.bi-journal-minus::before { content: "\\f441"; }
.bi-journal-plus::before { content: "\\f442"; }
.bi-journal-richtext::before { content: "\\f443"; }
.bi-journal-text::before { content: "\\f444"; }
.bi-journal-x::before { content: "\\f445"; }
.bi-journal::before { content: "\\f446"; }
.bi-journals::before { content: "\\f447"; }
.bi-joystick::before { content: "\\f448"; }
.bi-justify-left::before { content: "\\f449"; }
.bi-justify-right::before { content: "\\f44a"; }
.bi-justify::before { content: "\\f44b"; }
.bi-kanban-fill::before { content: "\\f44c"; }
.bi-kanban::before { content: "\\f44d"; }
.bi-key-fill::before { content: "\\f44e"; }
.bi-key::before { content: "\\f44f"; }
.bi-keyboard-fill::before { content: "\\f450"; }
.bi-keyboard::before { content: "\\f451"; }
.bi-ladder::before { content: "\\f452"; }
.bi-lamp-fill::before { content: "\\f453"; }
.bi-lamp::before { content: "\\f454"; }
.bi-laptop-fill::before { content: "\\f455"; }
.bi-laptop::before { content: "\\f456"; }
.bi-layer-backward::before { content: "\\f457"; }
.bi-layer-forward::before { content: "\\f458"; }
.bi-layers-fill::before { content: "\\f459"; }
.bi-layers-half::before { content: "\\f45a"; }
.bi-layers::before { content: "\\f45b"; }
.bi-layout-sidebar-inset-reverse::before { content: "\\f45c"; }
.bi-layout-sidebar-inset::before { content: "\\f45d"; }
.bi-layout-sidebar-reverse::before { content: "\\f45e"; }
.bi-layout-sidebar::before { content: "\\f45f"; }
.bi-layout-split::before { content: "\\f460"; }
.bi-layout-text-sidebar-reverse::before { content: "\\f461"; }
.bi-layout-text-sidebar::before { content: "\\f462"; }
.bi-layout-text-window-reverse::before { content: "\\f463"; }
.bi-layout-text-window::before { content: "\\f464"; }
.bi-layout-three-columns::before { content: "\\f465"; }
.bi-layout-wtf::before { content: "\\f466"; }
.bi-life-preserver::before { content: "\\f467"; }
.bi-lightbulb-fill::before { content: "\\f468"; }
.bi-lightbulb-off-fill::before { content: "\\f469"; }
.bi-lightbulb-off::before { content: "\\f46a"; }
.bi-lightbulb::before { content: "\\f46b"; }
.bi-lightning-charge-fill::before { content: "\\f46c"; }
.bi-lightning-charge::before { content: "\\f46d"; }
.bi-lightning-fill::before { content: "\\f46e"; }
.bi-lightning::before { content: "\\f46f"; }
.bi-link-45deg::before { content: "\\f470"; }
.bi-link::before { content: "\\f471"; }
.bi-linkedin::before { content: "\\f472"; }
.bi-list-check::before { content: "\\f473"; }
.bi-list-nested::before { content: "\\f474"; }
.bi-list-ol::before { content: "\\f475"; }
.bi-list-stars::before { content: "\\f476"; }
.bi-list-task::before { content: "\\f477"; }
.bi-list-ul::before { content: "\\f478"; }
.bi-list::before { content: "\\f479"; }
.bi-lock-fill::before { content: "\\f47a"; }
.bi-lock::before { content: "\\f47b"; }
.bi-mailbox::before { content: "\\f47c"; }
.bi-mailbox2::before { content: "\\f47d"; }
.bi-map-fill::before { content: "\\f47e"; }
.bi-map::before { content: "\\f47f"; }
.bi-markdown-fill::before { content: "\\f480"; }
.bi-markdown::before { content: "\\f481"; }
.bi-mask::before { content: "\\f482"; }
.bi-megaphone-fill::before { content: "\\f483"; }
.bi-megaphone::before { content: "\\f484"; }
.bi-menu-app-fill::before { content: "\\f485"; }
.bi-menu-app::before { content: "\\f486"; }
.bi-menu-button-fill::before { content: "\\f487"; }
.bi-menu-button-wide-fill::before { content: "\\f488"; }
.bi-menu-button-wide::before { content: "\\f489"; }
.bi-menu-button::before { content: "\\f48a"; }
.bi-menu-down::before { content: "\\f48b"; }
.bi-menu-up::before { content: "\\f48c"; }
.bi-mic-fill::before { content: "\\f48d"; }
.bi-mic-mute-fill::before { content: "\\f48e"; }
.bi-mic-mute::before { content: "\\f48f"; }
.bi-mic::before { content: "\\f490"; }
.bi-minecart-loaded::before { content: "\\f491"; }
.bi-minecart::before { content: "\\f492"; }
.bi-moisture::before { content: "\\f493"; }
.bi-moon-fill::before { content: "\\f494"; }
.bi-moon-stars-fill::before { content: "\\f495"; }
.bi-moon-stars::before { content: "\\f496"; }
.bi-moon::before { content: "\\f497"; }
.bi-mouse-fill::before { content: "\\f498"; }
.bi-mouse::before { content: "\\f499"; }
.bi-mouse2-fill::before { content: "\\f49a"; }
.bi-mouse2::before { content: "\\f49b"; }
.bi-mouse3-fill::before { content: "\\f49c"; }
.bi-mouse3::before { content: "\\f49d"; }
.bi-music-note-beamed::before { content: "\\f49e"; }
.bi-music-note-list::before { content: "\\f49f"; }
.bi-music-note::before { content: "\\f4a0"; }
.bi-music-player-fill::before { content: "\\f4a1"; }
.bi-music-player::before { content: "\\f4a2"; }
.bi-newspaper::before { content: "\\f4a3"; }
.bi-node-minus-fill::before { content: "\\f4a4"; }
.bi-node-minus::before { content: "\\f4a5"; }
.bi-node-plus-fill::before { content: "\\f4a6"; }
.bi-node-plus::before { content: "\\f4a7"; }
.bi-nut-fill::before { content: "\\f4a8"; }
.bi-nut::before { content: "\\f4a9"; }
.bi-octagon-fill::before { content: "\\f4aa"; }
.bi-octagon-half::before { content: "\\f4ab"; }
.bi-octagon::before { content: "\\f4ac"; }
.bi-option::before { content: "\\f4ad"; }
.bi-outlet::before { content: "\\f4ae"; }
.bi-paint-bucket::before { content: "\\f4af"; }
.bi-palette-fill::before { content: "\\f4b0"; }
.bi-palette::before { content: "\\f4b1"; }
.bi-palette2::before { content: "\\f4b2"; }
.bi-paperclip::before { content: "\\f4b3"; }
.bi-paragraph::before { content: "\\f4b4"; }
.bi-patch-check-fill::before { content: "\\f4b5"; }
.bi-patch-check::before { content: "\\f4b6"; }
.bi-patch-exclamation-fill::before { content: "\\f4b7"; }
.bi-patch-exclamation::before { content: "\\f4b8"; }
.bi-patch-minus-fill::before { content: "\\f4b9"; }
.bi-patch-minus::before { content: "\\f4ba"; }
.bi-patch-plus-fill::before { content: "\\f4bb"; }
.bi-patch-plus::before { content: "\\f4bc"; }
.bi-patch-question-fill::before { content: "\\f4bd"; }
.bi-patch-question::before { content: "\\f4be"; }
.bi-pause-btn-fill::before { content: "\\f4bf"; }
.bi-pause-btn::before { content: "\\f4c0"; }
.bi-pause-circle-fill::before { content: "\\f4c1"; }
.bi-pause-circle::before { content: "\\f4c2"; }
.bi-pause-fill::before { content: "\\f4c3"; }
.bi-pause::before { content: "\\f4c4"; }
.bi-peace-fill::before { content: "\\f4c5"; }
.bi-peace::before { content: "\\f4c6"; }
.bi-pen-fill::before { content: "\\f4c7"; }
.bi-pen::before { content: "\\f4c8"; }
.bi-pencil-fill::before { content: "\\f4c9"; }
.bi-pencil-square::before { content: "\\f4ca"; }
.bi-pencil::before { content: "\\f4cb"; }
.bi-pentagon-fill::before { content: "\\f4cc"; }
.bi-pentagon-half::before { content: "\\f4cd"; }
.bi-pentagon::before { content: "\\f4ce"; }
.bi-people-fill::before { content: "\\f4cf"; }
.bi-people::before { content: "\\f4d0"; }
.bi-percent::before { content: "\\f4d1"; }
.bi-person-badge-fill::before { content: "\\f4d2"; }
.bi-person-badge::before { content: "\\f4d3"; }
.bi-person-bounding-box::before { content: "\\f4d4"; }
.bi-person-check-fill::before { content: "\\f4d5"; }
.bi-person-check::before { content: "\\f4d6"; }
.bi-person-circle::before { content: "\\f4d7"; }
.bi-person-dash-fill::before { content: "\\f4d8"; }
.bi-person-dash::before { content: "\\f4d9"; }
.bi-person-fill::before { content: "\\f4da"; }
.bi-person-lines-fill::before { content: "\\f4db"; }
.bi-person-plus-fill::before { content: "\\f4dc"; }
.bi-person-plus::before { content: "\\f4dd"; }
.bi-person-square::before { content: "\\f4de"; }
.bi-person-x-fill::before { content: "\\f4df"; }
.bi-person-x::before { content: "\\f4e0"; }
.bi-person::before { content: "\\f4e1"; }
.bi-phone-fill::before { content: "\\f4e2"; }
.bi-phone-landscape-fill::before { content: "\\f4e3"; }
.bi-phone-landscape::before { content: "\\f4e4"; }
.bi-phone-vibrate-fill::before { content: "\\f4e5"; }
.bi-phone-vibrate::before { content: "\\f4e6"; }
.bi-phone::before { content: "\\f4e7"; }
.bi-pie-chart-fill::before { content: "\\f4e8"; }
.bi-pie-chart::before { content: "\\f4e9"; }
.bi-pin-angle-fill::before { content: "\\f4ea"; }
.bi-pin-angle::before { content: "\\f4eb"; }
.bi-pin-fill::before { content: "\\f4ec"; }
.bi-pin::before { content: "\\f4ed"; }
.bi-pip-fill::before { content: "\\f4ee"; }
.bi-pip::before { content: "\\f4ef"; }
.bi-play-btn-fill::before { content: "\\f4f0"; }
.bi-play-btn::before { content: "\\f4f1"; }
.bi-play-circle-fill::before { content: "\\f4f2"; }
.bi-play-circle::before { content: "\\f4f3"; }
.bi-play-fill::before { content: "\\f4f4"; }
.bi-play::before { content: "\\f4f5"; }
.bi-plug-fill::before { content: "\\f4f6"; }
.bi-plug::before { content: "\\f4f7"; }
.bi-plus-circle-dotted::before { content: "\\f4f8"; }
.bi-plus-circle-fill::before { content: "\\f4f9"; }
.bi-plus-circle::before { content: "\\f4fa"; }
.bi-plus-square-dotted::before { content: "\\f4fb"; }
.bi-plus-square-fill::before { content: "\\f4fc"; }
.bi-plus-square::before { content: "\\f4fd"; }
.bi-plus::before { content: "\\f4fe"; }
.bi-power::before { content: "\\f4ff"; }
.bi-printer-fill::before { content: "\\f500"; }
.bi-printer::before { content: "\\f501"; }
.bi-puzzle-fill::before { content: "\\f502"; }
.bi-puzzle::before { content: "\\f503"; }
.bi-question-circle-fill::before { content: "\\f504"; }
.bi-question-circle::before { content: "\\f505"; }
.bi-question-diamond-fill::before { content: "\\f506"; }
.bi-question-diamond::before { content: "\\f507"; }
.bi-question-octagon-fill::before { content: "\\f508"; }
.bi-question-octagon::before { content: "\\f509"; }
.bi-question-square-fill::before { content: "\\f50a"; }
.bi-question-square::before { content: "\\f50b"; }
.bi-question::before { content: "\\f50c"; }
.bi-rainbow::before { content: "\\f50d"; }
.bi-receipt-cutoff::before { content: "\\f50e"; }
.bi-receipt::before { content: "\\f50f"; }
.bi-reception-0::before { content: "\\f510"; }
.bi-reception-1::before { content: "\\f511"; }
.bi-reception-2::before { content: "\\f512"; }
.bi-reception-3::before { content: "\\f513"; }
.bi-reception-4::before { content: "\\f514"; }
.bi-record-btn-fill::before { content: "\\f515"; }
.bi-record-btn::before { content: "\\f516"; }
.bi-record-circle-fill::before { content: "\\f517"; }
.bi-record-circle::before { content: "\\f518"; }
.bi-record-fill::before { content: "\\f519"; }
.bi-record::before { content: "\\f51a"; }
.bi-record2-fill::before { content: "\\f51b"; }
.bi-record2::before { content: "\\f51c"; }
.bi-reply-all-fill::before { content: "\\f51d"; }
.bi-reply-all::before { content: "\\f51e"; }
.bi-reply-fill::before { content: "\\f51f"; }
.bi-reply::before { content: "\\f520"; }
.bi-rss-fill::before { content: "\\f521"; }
.bi-rss::before { content: "\\f522"; }
.bi-rulers::before { content: "\\f523"; }
.bi-save-fill::before { content: "\\f524"; }
.bi-save::before { content: "\\f525"; }
.bi-save2-fill::before { content: "\\f526"; }
.bi-save2::before { content: "\\f527"; }
.bi-scissors::before { content: "\\f528"; }
.bi-screwdriver::before { content: "\\f529"; }
.bi-search::before { content: "\\f52a"; }
.bi-segmented-nav::before { content: "\\f52b"; }
.bi-server::before { content: "\\f52c"; }
.bi-share-fill::before { content: "\\f52d"; }
.bi-share::before { content: "\\f52e"; }
.bi-shield-check::before { content: "\\f52f"; }
.bi-shield-exclamation::before { content: "\\f530"; }
.bi-shield-fill-check::before { content: "\\f531"; }
.bi-shield-fill-exclamation::before { content: "\\f532"; }
.bi-shield-fill-minus::before { content: "\\f533"; }
.bi-shield-fill-plus::before { content: "\\f534"; }
.bi-shield-fill-x::before { content: "\\f535"; }
.bi-shield-fill::before { content: "\\f536"; }
.bi-shield-lock-fill::before { content: "\\f537"; }
.bi-shield-lock::before { content: "\\f538"; }
.bi-shield-minus::before { content: "\\f539"; }
.bi-shield-plus::before { content: "\\f53a"; }
.bi-shield-shaded::before { content: "\\f53b"; }
.bi-shield-slash-fill::before { content: "\\f53c"; }
.bi-shield-slash::before { content: "\\f53d"; }
.bi-shield-x::before { content: "\\f53e"; }
.bi-shield::before { content: "\\f53f"; }
.bi-shift-fill::before { content: "\\f540"; }
.bi-shift::before { content: "\\f541"; }
.bi-shop-window::before { content: "\\f542"; }
.bi-shop::before { content: "\\f543"; }
.bi-shuffle::before { content: "\\f544"; }
.bi-signpost-2-fill::before { content: "\\f545"; }
.bi-signpost-2::before { content: "\\f546"; }
.bi-signpost-fill::before { content: "\\f547"; }
.bi-signpost-split-fill::before { content: "\\f548"; }
.bi-signpost-split::before { content: "\\f549"; }
.bi-signpost::before { content: "\\f54a"; }
.bi-sim-fill::before { content: "\\f54b"; }
.bi-sim::before { content: "\\f54c"; }
.bi-skip-backward-btn-fill::before { content: "\\f54d"; }
.bi-skip-backward-btn::before { content: "\\f54e"; }
.bi-skip-backward-circle-fill::before { content: "\\f54f"; }
.bi-skip-backward-circle::before { content: "\\f550"; }
.bi-skip-backward-fill::before { content: "\\f551"; }
.bi-skip-backward::before { content: "\\f552"; }
.bi-skip-end-btn-fill::before { content: "\\f553"; }
.bi-skip-end-btn::before { content: "\\f554"; }
.bi-skip-end-circle-fill::before { content: "\\f555"; }
.bi-skip-end-circle::before { content: "\\f556"; }
.bi-skip-end-fill::before { content: "\\f557"; }
.bi-skip-end::before { content: "\\f558"; }
.bi-skip-forward-btn-fill::before { content: "\\f559"; }
.bi-skip-forward-btn::before { content: "\\f55a"; }
.bi-skip-forward-circle-fill::before { content: "\\f55b"; }
.bi-skip-forward-circle::before { content: "\\f55c"; }
.bi-skip-forward-fill::before { content: "\\f55d"; }
.bi-skip-forward::before { content: "\\f55e"; }
.bi-skip-start-btn-fill::before { content: "\\f55f"; }
.bi-skip-start-btn::before { content: "\\f560"; }
.bi-skip-start-circle-fill::before { content: "\\f561"; }
.bi-skip-start-circle::before { content: "\\f562"; }
.bi-skip-start-fill::before { content: "\\f563"; }
.bi-skip-start::before { content: "\\f564"; }
.bi-slack::before { content: "\\f565"; }
.bi-slash-circle-fill::before { content: "\\f566"; }
.bi-slash-circle::before { content: "\\f567"; }
.bi-slash-square-fill::before { content: "\\f568"; }
.bi-slash-square::before { content: "\\f569"; }
.bi-slash::before { content: "\\f56a"; }
.bi-sliders::before { content: "\\f56b"; }
.bi-smartwatch::before { content: "\\f56c"; }
.bi-snow::before { content: "\\f56d"; }
.bi-snow2::before { content: "\\f56e"; }
.bi-snow3::before { content: "\\f56f"; }
.bi-sort-alpha-down-alt::before { content: "\\f570"; }
.bi-sort-alpha-down::before { content: "\\f571"; }
.bi-sort-alpha-up-alt::before { content: "\\f572"; }
.bi-sort-alpha-up::before { content: "\\f573"; }
.bi-sort-down-alt::before { content: "\\f574"; }
.bi-sort-down::before { content: "\\f575"; }
.bi-sort-numeric-down-alt::before { content: "\\f576"; }
.bi-sort-numeric-down::before { content: "\\f577"; }
.bi-sort-numeric-up-alt::before { content: "\\f578"; }
.bi-sort-numeric-up::before { content: "\\f579"; }
.bi-sort-up-alt::before { content: "\\f57a"; }
.bi-sort-up::before { content: "\\f57b"; }
.bi-soundwave::before { content: "\\f57c"; }
.bi-speaker-fill::before { content: "\\f57d"; }
.bi-speaker::before { content: "\\f57e"; }
.bi-speedometer::before { content: "\\f57f"; }
.bi-speedometer2::before { content: "\\f580"; }
.bi-spellcheck::before { content: "\\f581"; }
.bi-square-fill::before { content: "\\f582"; }
.bi-square-half::before { content: "\\f583"; }
.bi-square::before { content: "\\f584"; }
.bi-stack::before { content: "\\f585"; }
.bi-star-fill::before { content: "\\f586"; }
.bi-star-half::before { content: "\\f587"; }
.bi-star::before { content: "\\f588"; }
.bi-stars::before { content: "\\f589"; }
.bi-stickies-fill::before { content: "\\f58a"; }
.bi-stickies::before { content: "\\f58b"; }
.bi-sticky-fill::before { content: "\\f58c"; }
.bi-sticky::before { content: "\\f58d"; }
.bi-stop-btn-fill::before { content: "\\f58e"; }
.bi-stop-btn::before { content: "\\f58f"; }
.bi-stop-circle-fill::before { content: "\\f590"; }
.bi-stop-circle::before { content: "\\f591"; }
.bi-stop-fill::before { content: "\\f592"; }
.bi-stop::before { content: "\\f593"; }
.bi-stoplights-fill::before { content: "\\f594"; }
.bi-stoplights::before { content: "\\f595"; }
.bi-stopwatch-fill::before { content: "\\f596"; }
.bi-stopwatch::before { content: "\\f597"; }
.bi-subtract::before { content: "\\f598"; }
.bi-suit-club-fill::before { content: "\\f599"; }
.bi-suit-club::before { content: "\\f59a"; }
.bi-suit-diamond-fill::before { content: "\\f59b"; }
.bi-suit-diamond::before { content: "\\f59c"; }
.bi-suit-heart-fill::before { content: "\\f59d"; }
.bi-suit-heart::before { content: "\\f59e"; }
.bi-suit-spade-fill::before { content: "\\f59f"; }
.bi-suit-spade::before { content: "\\f5a0"; }
.bi-sun-fill::before { content: "\\f5a1"; }
.bi-sun::before { content: "\\f5a2"; }
.bi-sunglasses::before { content: "\\f5a3"; }
.bi-sunrise-fill::before { content: "\\f5a4"; }
.bi-sunrise::before { content: "\\f5a5"; }
.bi-sunset-fill::before { content: "\\f5a6"; }
.bi-sunset::before { content: "\\f5a7"; }
.bi-symmetry-horizontal::before { content: "\\f5a8"; }
.bi-symmetry-vertical::before { content: "\\f5a9"; }
.bi-table::before { content: "\\f5aa"; }
.bi-tablet-fill::before { content: "\\f5ab"; }
.bi-tablet-landscape-fill::before { content: "\\f5ac"; }
.bi-tablet-landscape::before { content: "\\f5ad"; }
.bi-tablet::before { content: "\\f5ae"; }
.bi-tag-fill::before { content: "\\f5af"; }
.bi-tag::before { content: "\\f5b0"; }
.bi-tags-fill::before { content: "\\f5b1"; }
.bi-tags::before { content: "\\f5b2"; }
.bi-telegram::before { content: "\\f5b3"; }
.bi-telephone-fill::before { content: "\\f5b4"; }
.bi-telephone-forward-fill::before { content: "\\f5b5"; }
.bi-telephone-forward::before { content: "\\f5b6"; }
.bi-telephone-inbound-fill::before { content: "\\f5b7"; }
.bi-telephone-inbound::before { content: "\\f5b8"; }
.bi-telephone-minus-fill::before { content: "\\f5b9"; }
.bi-telephone-minus::before { content: "\\f5ba"; }
.bi-telephone-outbound-fill::before { content: "\\f5bb"; }
.bi-telephone-outbound::before { content: "\\f5bc"; }
.bi-telephone-plus-fill::before { content: "\\f5bd"; }
.bi-telephone-plus::before { content: "\\f5be"; }
.bi-telephone-x-fill::before { content: "\\f5bf"; }
.bi-telephone-x::before { content: "\\f5c0"; }
.bi-telephone::before { content: "\\f5c1"; }
.bi-terminal-fill::before { content: "\\f5c2"; }
.bi-terminal::before { content: "\\f5c3"; }
.bi-text-center::before { content: "\\f5c4"; }
.bi-text-indent-left::before { content: "\\f5c5"; }
.bi-text-indent-right::before { content: "\\f5c6"; }
.bi-text-left::before { content: "\\f5c7"; }
.bi-text-paragraph::before { content: "\\f5c8"; }
.bi-text-right::before { content: "\\f5c9"; }
.bi-textarea-resize::before { content: "\\f5ca"; }
.bi-textarea-t::before { content: "\\f5cb"; }
.bi-textarea::before { content: "\\f5cc"; }
.bi-thermometer-half::before { content: "\\f5cd"; }
.bi-thermometer-high::before { content: "\\f5ce"; }
.bi-thermometer-low::before { content: "\\f5cf"; }
.bi-thermometer-snow::before { content: "\\f5d0"; }
.bi-thermometer-sun::before { content: "\\f5d1"; }
.bi-thermometer::before { content: "\\f5d2"; }
.bi-three-dots-vertical::before { content: "\\f5d3"; }
.bi-three-dots::before { content: "\\f5d4"; }
.bi-toggle-off::before { content: "\\f5d5"; }
.bi-toggle-on::before { content: "\\f5d6"; }
.bi-toggle2-off::before { content: "\\f5d7"; }
.bi-toggle2-on::before { content: "\\f5d8"; }
.bi-toggles::before { content: "\\f5d9"; }
.bi-toggles2::before { content: "\\f5da"; }
.bi-tools::before { content: "\\f5db"; }
.bi-tornado::before { content: "\\f5dc"; }
.bi-trash-fill::before { content: "\\f5dd"; }
.bi-trash::before { content: "\\f5de"; }
.bi-trash2-fill::before { content: "\\f5df"; }
.bi-trash2::before { content: "\\f5e0"; }
.bi-tree-fill::before { content: "\\f5e1"; }
.bi-tree::before { content: "\\f5e2"; }
.bi-triangle-fill::before { content: "\\f5e3"; }
.bi-triangle-half::before { content: "\\f5e4"; }
.bi-triangle::before { content: "\\f5e5"; }
.bi-trophy-fill::before { content: "\\f5e6"; }
.bi-trophy::before { content: "\\f5e7"; }
.bi-tropical-storm::before { content: "\\f5e8"; }
.bi-truck-flatbed::before { content: "\\f5e9"; }
.bi-truck::before { content: "\\f5ea"; }
.bi-tsunami::before { content: "\\f5eb"; }
.bi-tv-fill::before { content: "\\f5ec"; }
.bi-tv::before { content: "\\f5ed"; }
.bi-twitch::before { content: "\\f5ee"; }
.bi-twitter::before { content: "\\f5ef"; }
.bi-type-bold::before { content: "\\f5f0"; }
.bi-type-h1::before { content: "\\f5f1"; }
.bi-type-h2::before { content: "\\f5f2"; }
.bi-type-h3::before { content: "\\f5f3"; }
.bi-type-italic::before { content: "\\f5f4"; }
.bi-type-strikethrough::before { content: "\\f5f5"; }
.bi-type-underline::before { content: "\\f5f6"; }
.bi-type::before { content: "\\f5f7"; }
.bi-ui-checks-grid::before { content: "\\f5f8"; }
.bi-ui-checks::before { content: "\\f5f9"; }
.bi-ui-radios-grid::before { content: "\\f5fa"; }
.bi-ui-radios::before { content: "\\f5fb"; }
.bi-umbrella-fill::before { content: "\\f5fc"; }
.bi-umbrella::before { content: "\\f5fd"; }
.bi-union::before { content: "\\f5fe"; }
.bi-unlock-fill::before { content: "\\f5ff"; }
.bi-unlock::before { content: "\\f600"; }
.bi-upc-scan::before { content: "\\f601"; }
.bi-upc::before { content: "\\f602"; }
.bi-upload::before { content: "\\f603"; }
.bi-vector-pen::before { content: "\\f604"; }
.bi-view-list::before { content: "\\f605"; }
.bi-view-stacked::before { content: "\\f606"; }
.bi-vinyl-fill::before { content: "\\f607"; }
.bi-vinyl::before { content: "\\f608"; }
.bi-voicemail::before { content: "\\f609"; }
.bi-volume-down-fill::before { content: "\\f60a"; }
.bi-volume-down::before { content: "\\f60b"; }
.bi-volume-mute-fill::before { content: "\\f60c"; }
.bi-volume-mute::before { content: "\\f60d"; }
.bi-volume-off-fill::before { content: "\\f60e"; }
.bi-volume-off::before { content: "\\f60f"; }
.bi-volume-up-fill::before { content: "\\f610"; }
.bi-volume-up::before { content: "\\f611"; }
.bi-vr::before { content: "\\f612"; }
.bi-wallet-fill::before { content: "\\f613"; }
.bi-wallet::before { content: "\\f614"; }
.bi-wallet2::before { content: "\\f615"; }
.bi-watch::before { content: "\\f616"; }
.bi-water::before { content: "\\f617"; }
.bi-whatsapp::before { content: "\\f618"; }
.bi-wifi-1::before { content: "\\f619"; }
.bi-wifi-2::before { content: "\\f61a"; }
.bi-wifi-off::before { content: "\\f61b"; }
.bi-wifi::before { content: "\\f61c"; }
.bi-wind::before { content: "\\f61d"; }
.bi-window-dock::before { content: "\\f61e"; }
.bi-window-sidebar::before { content: "\\f61f"; }
.bi-window::before { content: "\\f620"; }
.bi-wrench::before { content: "\\f621"; }
.bi-x-circle-fill::before { content: "\\f622"; }
.bi-x-circle::before { content: "\\f623"; }
.bi-x-diamond-fill::before { content: "\\f624"; }
.bi-x-diamond::before { content: "\\f625"; }
.bi-x-octagon-fill::before { content: "\\f626"; }
.bi-x-octagon::before { content: "\\f627"; }
.bi-x-square-fill::before { content: "\\f628"; }
.bi-x-square::before { content: "\\f629"; }
.bi-x::before { content: "\\f62a"; }
.bi-youtube::before { content: "\\f62b"; }
.bi-zoom-in::before { content: "\\f62c"; }
.bi-zoom-out::before { content: "\\f62d"; }
.bi-bank::before { content: "\\f62e"; }
.bi-bank2::before { content: "\\f62f"; }
.bi-bell-slash-fill::before { content: "\\f630"; }
.bi-bell-slash::before { content: "\\f631"; }
.bi-cash-coin::before { content: "\\f632"; }
.bi-check-lg::before { content: "\\f633"; }
.bi-coin::before { content: "\\f634"; }
.bi-currency-bitcoin::before { content: "\\f635"; }
.bi-currency-dollar::before { content: "\\f636"; }
.bi-currency-euro::before { content: "\\f637"; }
.bi-currency-exchange::before { content: "\\f638"; }
.bi-currency-pound::before { content: "\\f639"; }
.bi-currency-yen::before { content: "\\f63a"; }
.bi-dash-lg::before { content: "\\f63b"; }
.bi-exclamation-lg::before { content: "\\f63c"; }
.bi-file-earmark-pdf-fill::before { content: "\\f63d"; }
.bi-file-earmark-pdf::before { content: "\\f63e"; }
.bi-file-pdf-fill::before { content: "\\f63f"; }
.bi-file-pdf::before { content: "\\f640"; }
.bi-gender-ambiguous::before { content: "\\f641"; }
.bi-gender-female::before { content: "\\f642"; }
.bi-gender-male::before { content: "\\f643"; }
.bi-gender-trans::before { content: "\\f644"; }
.bi-headset-vr::before { content: "\\f645"; }
.bi-info-lg::before { content: "\\f646"; }
.bi-mastodon::before { content: "\\f647"; }
.bi-messenger::before { content: "\\f648"; }
.bi-piggy-bank-fill::before { content: "\\f649"; }
.bi-piggy-bank::before { content: "\\f64a"; }
.bi-pin-map-fill::before { content: "\\f64b"; }
.bi-pin-map::before { content: "\\f64c"; }
.bi-plus-lg::before { content: "\\f64d"; }
.bi-question-lg::before { content: "\\f64e"; }
.bi-recycle::before { content: "\\f64f"; }
.bi-reddit::before { content: "\\f650"; }
.bi-safe-fill::before { content: "\\f651"; }
.bi-safe2-fill::before { content: "\\f652"; }
.bi-safe2::before { content: "\\f653"; }
.bi-sd-card-fill::before { content: "\\f654"; }
.bi-sd-card::before { content: "\\f655"; }
.bi-skype::before { content: "\\f656"; }
.bi-slash-lg::before { content: "\\f657"; }
.bi-translate::before { content: "\\f658"; }
.bi-x-lg::before { content: "\\f659"; }
.bi-safe::before { content: "\\f65a"; }
.bi-apple::before { content: "\\f65b"; }
.bi-microsoft::before { content: "\\f65d"; }
.bi-windows::before { content: "\\f65e"; }
.bi-behance::before { content: "\\f65c"; }
.bi-dribbble::before { content: "\\f65f"; }
.bi-line::before { content: "\\f660"; }
.bi-medium::before { content: "\\f661"; }
.bi-paypal::before { content: "\\f662"; }
.bi-pinterest::before { content: "\\f663"; }
.bi-signal::before { content: "\\f664"; }
.bi-snapchat::before { content: "\\f665"; }
.bi-spotify::before { content: "\\f666"; }
.bi-stack-overflow::before { content: "\\f667"; }
.bi-strava::before { content: "\\f668"; }
.bi-wordpress::before { content: "\\f669"; }
.bi-vimeo::before { content: "\\f66a"; }
.bi-activity::before { content: "\\f66b"; }
.bi-easel2-fill::before { content: "\\f66c"; }
.bi-easel2::before { content: "\\f66d"; }
.bi-easel3-fill::before { content: "\\f66e"; }
.bi-easel3::before { content: "\\f66f"; }
.bi-fan::before { content: "\\f670"; }
.bi-fingerprint::before { content: "\\f671"; }
.bi-graph-down-arrow::before { content: "\\f672"; }
.bi-graph-up-arrow::before { content: "\\f673"; }
.bi-hypnotize::before { content: "\\f674"; }
.bi-magic::before { content: "\\f675"; }
.bi-person-rolodex::before { content: "\\f676"; }
.bi-person-video::before { content: "\\f677"; }
.bi-person-video2::before { content: "\\f678"; }
.bi-person-video3::before { content: "\\f679"; }
.bi-person-workspace::before { content: "\\f67a"; }
.bi-radioactive::before { content: "\\f67b"; }
.bi-webcam-fill::before { content: "\\f67c"; }
.bi-webcam::before { content: "\\f67d"; }
.bi-yin-yang::before { content: "\\f67e"; }
.bi-bandaid-fill::before { content: "\\f680"; }
.bi-bandaid::before { content: "\\f681"; }
.bi-bluetooth::before { content: "\\f682"; }
.bi-body-text::before { content: "\\f683"; }
.bi-boombox::before { content: "\\f684"; }
.bi-boxes::before { content: "\\f685"; }
.bi-dpad-fill::before { content: "\\f686"; }
.bi-dpad::before { content: "\\f687"; }
.bi-ear-fill::before { content: "\\f688"; }
.bi-ear::before { content: "\\f689"; }
.bi-envelope-check-fill::before { content: "\\f68b"; }
.bi-envelope-check::before { content: "\\f68c"; }
.bi-envelope-dash-fill::before { content: "\\f68e"; }
.bi-envelope-dash::before { content: "\\f68f"; }
.bi-envelope-exclamation-fill::before { content: "\\f691"; }
.bi-envelope-exclamation::before { content: "\\f692"; }
.bi-envelope-plus-fill::before { content: "\\f693"; }
.bi-envelope-plus::before { content: "\\f694"; }
.bi-envelope-slash-fill::before { content: "\\f696"; }
.bi-envelope-slash::before { content: "\\f697"; }
.bi-envelope-x-fill::before { content: "\\f699"; }
.bi-envelope-x::before { content: "\\f69a"; }
.bi-explicit-fill::before { content: "\\f69b"; }
.bi-explicit::before { content: "\\f69c"; }
.bi-git::before { content: "\\f69d"; }
.bi-infinity::before { content: "\\f69e"; }
.bi-list-columns-reverse::before { content: "\\f69f"; }
.bi-list-columns::before { content: "\\f6a0"; }
.bi-meta::before { content: "\\f6a1"; }
.bi-nintendo-switch::before { content: "\\f6a4"; }
.bi-pc-display-horizontal::before { content: "\\f6a5"; }
.bi-pc-display::before { content: "\\f6a6"; }
.bi-pc-horizontal::before { content: "\\f6a7"; }
.bi-pc::before { content: "\\f6a8"; }
.bi-playstation::before { content: "\\f6a9"; }
.bi-plus-slash-minus::before { content: "\\f6aa"; }
.bi-projector-fill::before { content: "\\f6ab"; }
.bi-projector::before { content: "\\f6ac"; }
.bi-qr-code-scan::before { content: "\\f6ad"; }
.bi-qr-code::before { content: "\\f6ae"; }
.bi-quora::before { content: "\\f6af"; }
.bi-quote::before { content: "\\f6b0"; }
.bi-robot::before { content: "\\f6b1"; }
.bi-send-check-fill::before { content: "\\f6b2"; }
.bi-send-check::before { content: "\\f6b3"; }
.bi-send-dash-fill::before { content: "\\f6b4"; }
.bi-send-dash::before { content: "\\f6b5"; }
.bi-send-exclamation-fill::before { content: "\\f6b7"; }
.bi-send-exclamation::before { content: "\\f6b8"; }
.bi-send-fill::before { content: "\\f6b9"; }
.bi-send-plus-fill::before { content: "\\f6ba"; }
.bi-send-plus::before { content: "\\f6bb"; }
.bi-send-slash-fill::before { content: "\\f6bc"; }
.bi-send-slash::before { content: "\\f6bd"; }
.bi-send-x-fill::before { content: "\\f6be"; }
.bi-send-x::before { content: "\\f6bf"; }
.bi-send::before { content: "\\f6c0"; }
.bi-steam::before { content: "\\f6c1"; }
.bi-terminal-dash::before { content: "\\f6c3"; }
.bi-terminal-plus::before { content: "\\f6c4"; }
.bi-terminal-split::before { content: "\\f6c5"; }
.bi-ticket-detailed-fill::before { content: "\\f6c6"; }
.bi-ticket-detailed::before { content: "\\f6c7"; }
.bi-ticket-fill::before { content: "\\f6c8"; }
.bi-ticket-perforated-fill::before { content: "\\f6c9"; }
.bi-ticket-perforated::before { content: "\\f6ca"; }
.bi-ticket::before { content: "\\f6cb"; }
.bi-tiktok::before { content: "\\f6cc"; }
.bi-window-dash::before { content: "\\f6cd"; }
.bi-window-desktop::before { content: "\\f6ce"; }
.bi-window-fullscreen::before { content: "\\f6cf"; }
.bi-window-plus::before { content: "\\f6d0"; }
.bi-window-split::before { content: "\\f6d1"; }
.bi-window-stack::before { content: "\\f6d2"; }
.bi-window-x::before { content: "\\f6d3"; }
.bi-xbox::before { content: "\\f6d4"; }
.bi-ethernet::before { content: "\\f6d5"; }
.bi-hdmi-fill::before { content: "\\f6d6"; }
.bi-hdmi::before { content: "\\f6d7"; }
.bi-usb-c-fill::before { content: "\\f6d8"; }
.bi-usb-c::before { content: "\\f6d9"; }
.bi-usb-fill::before { content: "\\f6da"; }
.bi-usb-plug-fill::before { content: "\\f6db"; }
.bi-usb-plug::before { content: "\\f6dc"; }
.bi-usb-symbol::before { content: "\\f6dd"; }
.bi-usb::before { content: "\\f6de"; }
.bi-boombox-fill::before { content: "\\f6df"; }
.bi-displayport::before { content: "\\f6e1"; }
.bi-gpu-card::before { content: "\\f6e2"; }
.bi-memory::before { content: "\\f6e3"; }
.bi-modem-fill::before { content: "\\f6e4"; }
.bi-modem::before { content: "\\f6e5"; }
.bi-motherboard-fill::before { content: "\\f6e6"; }
.bi-motherboard::before { content: "\\f6e7"; }
.bi-optical-audio-fill::before { content: "\\f6e8"; }
.bi-optical-audio::before { content: "\\f6e9"; }
.bi-pci-card::before { content: "\\f6ea"; }
.bi-router-fill::before { content: "\\f6eb"; }
.bi-router::before { content: "\\f6ec"; }
.bi-thunderbolt-fill::before { content: "\\f6ef"; }
.bi-thunderbolt::before { content: "\\f6f0"; }
.bi-usb-drive-fill::before { content: "\\f6f1"; }
.bi-usb-drive::before { content: "\\f6f2"; }
.bi-usb-micro-fill::before { content: "\\f6f3"; }
.bi-usb-micro::before { content: "\\f6f4"; }
.bi-usb-mini-fill::before { content: "\\f6f5"; }
.bi-usb-mini::before { content: "\\f6f6"; }
.bi-cloud-haze2::before { content: "\\f6f7"; }
.bi-device-hdd-fill::before { content: "\\f6f8"; }
.bi-device-hdd::before { content: "\\f6f9"; }
.bi-device-ssd-fill::before { content: "\\f6fa"; }
.bi-device-ssd::before { content: "\\f6fb"; }
.bi-displayport-fill::before { content: "\\f6fc"; }
.bi-mortarboard-fill::before { content: "\\f6fd"; }
.bi-mortarboard::before { content: "\\f6fe"; }
.bi-terminal-x::before { content: "\\f6ff"; }
.bi-arrow-through-heart-fill::before { content: "\\f700"; }
.bi-arrow-through-heart::before { content: "\\f701"; }
.bi-badge-sd-fill::before { content: "\\f702"; }
.bi-badge-sd::before { content: "\\f703"; }
.bi-bag-heart-fill::before { content: "\\f704"; }
.bi-bag-heart::before { content: "\\f705"; }
.bi-balloon-fill::before { content: "\\f706"; }
.bi-balloon-heart-fill::before { content: "\\f707"; }
.bi-balloon-heart::before { content: "\\f708"; }
.bi-balloon::before { content: "\\f709"; }
.bi-box2-fill::before { content: "\\f70a"; }
.bi-box2-heart-fill::before { content: "\\f70b"; }
.bi-box2-heart::before { content: "\\f70c"; }
.bi-box2::before { content: "\\f70d"; }
.bi-braces-asterisk::before { content: "\\f70e"; }
.bi-calendar-heart-fill::before { content: "\\f70f"; }
.bi-calendar-heart::before { content: "\\f710"; }
.bi-calendar2-heart-fill::before { content: "\\f711"; }
.bi-calendar2-heart::before { content: "\\f712"; }
.bi-chat-heart-fill::before { content: "\\f713"; }
.bi-chat-heart::before { content: "\\f714"; }
.bi-chat-left-heart-fill::before { content: "\\f715"; }
.bi-chat-left-heart::before { content: "\\f716"; }
.bi-chat-right-heart-fill::before { content: "\\f717"; }
.bi-chat-right-heart::before { content: "\\f718"; }
.bi-chat-square-heart-fill::before { content: "\\f719"; }
.bi-chat-square-heart::before { content: "\\f71a"; }
.bi-clipboard-check-fill::before { content: "\\f71b"; }
.bi-clipboard-data-fill::before { content: "\\f71c"; }
.bi-clipboard-fill::before { content: "\\f71d"; }
.bi-clipboard-heart-fill::before { content: "\\f71e"; }
.bi-clipboard-heart::before { content: "\\f71f"; }
.bi-clipboard-minus-fill::before { content: "\\f720"; }
.bi-clipboard-plus-fill::before { content: "\\f721"; }
.bi-clipboard-pulse::before { content: "\\f722"; }
.bi-clipboard-x-fill::before { content: "\\f723"; }
.bi-clipboard2-check-fill::before { content: "\\f724"; }
.bi-clipboard2-check::before { content: "\\f725"; }
.bi-clipboard2-data-fill::before { content: "\\f726"; }
.bi-clipboard2-data::before { content: "\\f727"; }
.bi-clipboard2-fill::before { content: "\\f728"; }
.bi-clipboard2-heart-fill::before { content: "\\f729"; }
.bi-clipboard2-heart::before { content: "\\f72a"; }
.bi-clipboard2-minus-fill::before { content: "\\f72b"; }
.bi-clipboard2-minus::before { content: "\\f72c"; }
.bi-clipboard2-plus-fill::before { content: "\\f72d"; }
.bi-clipboard2-plus::before { content: "\\f72e"; }
.bi-clipboard2-pulse-fill::before { content: "\\f72f"; }
.bi-clipboard2-pulse::before { content: "\\f730"; }
.bi-clipboard2-x-fill::before { content: "\\f731"; }
.bi-clipboard2-x::before { content: "\\f732"; }
.bi-clipboard2::before { content: "\\f733"; }
.bi-emoji-kiss-fill::before { content: "\\f734"; }
.bi-emoji-kiss::before { content: "\\f735"; }
.bi-envelope-heart-fill::before { content: "\\f736"; }
.bi-envelope-heart::before { content: "\\f737"; }
.bi-envelope-open-heart-fill::before { content: "\\f738"; }
.bi-envelope-open-heart::before { content: "\\f739"; }
.bi-envelope-paper-fill::before { content: "\\f73a"; }
.bi-envelope-paper-heart-fill::before { content: "\\f73b"; }
.bi-envelope-paper-heart::before { content: "\\f73c"; }
.bi-envelope-paper::before { content: "\\f73d"; }
.bi-filetype-aac::before { content: "\\f73e"; }
.bi-filetype-ai::before { content: "\\f73f"; }
.bi-filetype-bmp::before { content: "\\f740"; }
.bi-filetype-cs::before { content: "\\f741"; }
.bi-filetype-css::before { content: "\\f742"; }
.bi-filetype-csv::before { content: "\\f743"; }
.bi-filetype-doc::before { content: "\\f744"; }
.bi-filetype-docx::before { content: "\\f745"; }
.bi-filetype-exe::before { content: "\\f746"; }
.bi-filetype-gif::before { content: "\\f747"; }
.bi-filetype-heic::before { content: "\\f748"; }
.bi-filetype-html::before { content: "\\f749"; }
.bi-filetype-java::before { content: "\\f74a"; }
.bi-filetype-jpg::before { content: "\\f74b"; }
.bi-filetype-js::before { content: "\\f74c"; }
.bi-filetype-jsx::before { content: "\\f74d"; }
.bi-filetype-key::before { content: "\\f74e"; }
.bi-filetype-m4p::before { content: "\\f74f"; }
.bi-filetype-md::before { content: "\\f750"; }
.bi-filetype-mdx::before { content: "\\f751"; }
.bi-filetype-mov::before { content: "\\f752"; }
.bi-filetype-mp3::before { content: "\\f753"; }
.bi-filetype-mp4::before { content: "\\f754"; }
.bi-filetype-otf::before { content: "\\f755"; }
.bi-filetype-pdf::before { content: "\\f756"; }
.bi-filetype-php::before { content: "\\f757"; }
.bi-filetype-png::before { content: "\\f758"; }
.bi-filetype-ppt::before { content: "\\f75a"; }
.bi-filetype-psd::before { content: "\\f75b"; }
.bi-filetype-py::before { content: "\\f75c"; }
.bi-filetype-raw::before { content: "\\f75d"; }
.bi-filetype-rb::before { content: "\\f75e"; }
.bi-filetype-sass::before { content: "\\f75f"; }
.bi-filetype-scss::before { content: "\\f760"; }
.bi-filetype-sh::before { content: "\\f761"; }
.bi-filetype-svg::before { content: "\\f762"; }
.bi-filetype-tiff::before { content: "\\f763"; }
.bi-filetype-tsx::before { content: "\\f764"; }
.bi-filetype-ttf::before { content: "\\f765"; }
.bi-filetype-txt::before { content: "\\f766"; }
.bi-filetype-wav::before { content: "\\f767"; }
.bi-filetype-woff::before { content: "\\f768"; }
.bi-filetype-xls::before { content: "\\f76a"; }
.bi-filetype-xml::before { content: "\\f76b"; }
.bi-filetype-yml::before { content: "\\f76c"; }
.bi-heart-arrow::before { content: "\\f76d"; }
.bi-heart-pulse-fill::before { content: "\\f76e"; }
.bi-heart-pulse::before { content: "\\f76f"; }
.bi-heartbreak-fill::before { content: "\\f770"; }
.bi-heartbreak::before { content: "\\f771"; }
.bi-hearts::before { content: "\\f772"; }
.bi-hospital-fill::before { content: "\\f773"; }
.bi-hospital::before { content: "\\f774"; }
.bi-house-heart-fill::before { content: "\\f775"; }
.bi-house-heart::before { content: "\\f776"; }
.bi-incognito::before { content: "\\f777"; }
.bi-magnet-fill::before { content: "\\f778"; }
.bi-magnet::before { content: "\\f779"; }
.bi-person-heart::before { content: "\\f77a"; }
.bi-person-hearts::before { content: "\\f77b"; }
.bi-phone-flip::before { content: "\\f77c"; }
.bi-plugin::before { content: "\\f77d"; }
.bi-postage-fill::before { content: "\\f77e"; }
.bi-postage-heart-fill::before { content: "\\f77f"; }
.bi-postage-heart::before { content: "\\f780"; }
.bi-postage::before { content: "\\f781"; }
.bi-postcard-fill::before { content: "\\f782"; }
.bi-postcard-heart-fill::before { content: "\\f783"; }
.bi-postcard-heart::before { content: "\\f784"; }
.bi-postcard::before { content: "\\f785"; }
.bi-search-heart-fill::before { content: "\\f786"; }
.bi-search-heart::before { content: "\\f787"; }
.bi-sliders2-vertical::before { content: "\\f788"; }
.bi-sliders2::before { content: "\\f789"; }
.bi-trash3-fill::before { content: "\\f78a"; }
.bi-trash3::before { content: "\\f78b"; }
.bi-valentine::before { content: "\\f78c"; }
.bi-valentine2::before { content: "\\f78d"; }
.bi-wrench-adjustable-circle-fill::before { content: "\\f78e"; }
.bi-wrench-adjustable-circle::before { content: "\\f78f"; }
.bi-wrench-adjustable::before { content: "\\f790"; }
.bi-filetype-json::before { content: "\\f791"; }
.bi-filetype-pptx::before { content: "\\f792"; }
.bi-filetype-xlsx::before { content: "\\f793"; }
.bi-1-circle-fill::before { content: "\\f796"; }
.bi-1-circle::before { content: "\\f797"; }
.bi-1-square-fill::before { content: "\\f798"; }
.bi-1-square::before { content: "\\f799"; }
.bi-2-circle-fill::before { content: "\\f79c"; }
.bi-2-circle::before { content: "\\f79d"; }
.bi-2-square-fill::before { content: "\\f79e"; }
.bi-2-square::before { content: "\\f79f"; }
.bi-3-circle-fill::before { content: "\\f7a2"; }
.bi-3-circle::before { content: "\\f7a3"; }
.bi-3-square-fill::before { content: "\\f7a4"; }
.bi-3-square::before { content: "\\f7a5"; }
.bi-4-circle-fill::before { content: "\\f7a8"; }
.bi-4-circle::before { content: "\\f7a9"; }
.bi-4-square-fill::before { content: "\\f7aa"; }
.bi-4-square::before { content: "\\f7ab"; }
.bi-5-circle-fill::before { content: "\\f7ae"; }
.bi-5-circle::before { content: "\\f7af"; }
.bi-5-square-fill::before { content: "\\f7b0"; }
.bi-5-square::before { content: "\\f7b1"; }
.bi-6-circle-fill::before { content: "\\f7b4"; }
.bi-6-circle::before { content: "\\f7b5"; }
.bi-6-square-fill::before { content: "\\f7b6"; }
.bi-6-square::before { content: "\\f7b7"; }
.bi-7-circle-fill::before { content: "\\f7ba"; }
.bi-7-circle::before { content: "\\f7bb"; }
.bi-7-square-fill::before { content: "\\f7bc"; }
.bi-7-square::before { content: "\\f7bd"; }
.bi-8-circle-fill::before { content: "\\f7c0"; }
.bi-8-circle::before { content: "\\f7c1"; }
.bi-8-square-fill::before { content: "\\f7c2"; }
.bi-8-square::before { content: "\\f7c3"; }
.bi-9-circle-fill::before { content: "\\f7c6"; }
.bi-9-circle::before { content: "\\f7c7"; }
.bi-9-square-fill::before { content: "\\f7c8"; }
.bi-9-square::before { content: "\\f7c9"; }
.bi-airplane-engines-fill::before { content: "\\f7ca"; }
.bi-airplane-engines::before { content: "\\f7cb"; }
.bi-airplane-fill::before { content: "\\f7cc"; }
.bi-airplane::before { content: "\\f7cd"; }
.bi-alexa::before { content: "\\f7ce"; }
.bi-alipay::before { content: "\\f7cf"; }
.bi-android::before { content: "\\f7d0"; }
.bi-android2::before { content: "\\f7d1"; }
.bi-box-fill::before { content: "\\f7d2"; }
.bi-box-seam-fill::before { content: "\\f7d3"; }
.bi-browser-chrome::before { content: "\\f7d4"; }
.bi-browser-edge::before { content: "\\f7d5"; }
.bi-browser-firefox::before { content: "\\f7d6"; }
.bi-browser-safari::before { content: "\\f7d7"; }
.bi-c-circle-fill::before { content: "\\f7da"; }
.bi-c-circle::before { content: "\\f7db"; }
.bi-c-square-fill::before { content: "\\f7dc"; }
.bi-c-square::before { content: "\\f7dd"; }
.bi-capsule-pill::before { content: "\\f7de"; }
.bi-capsule::before { content: "\\f7df"; }
.bi-car-front-fill::before { content: "\\f7e0"; }
.bi-car-front::before { content: "\\f7e1"; }
.bi-cassette-fill::before { content: "\\f7e2"; }
.bi-cassette::before { content: "\\f7e3"; }
.bi-cc-circle-fill::before { content: "\\f7e6"; }
.bi-cc-circle::before { content: "\\f7e7"; }
.bi-cc-square-fill::before { content: "\\f7e8"; }
.bi-cc-square::before { content: "\\f7e9"; }
.bi-cup-hot-fill::before { content: "\\f7ea"; }
.bi-cup-hot::before { content: "\\f7eb"; }
.bi-currency-rupee::before { content: "\\f7ec"; }
.bi-dropbox::before { content: "\\f7ed"; }
.bi-escape::before { content: "\\f7ee"; }
.bi-fast-forward-btn-fill::before { content: "\\f7ef"; }
.bi-fast-forward-btn::before { content: "\\f7f0"; }
.bi-fast-forward-circle-fill::before { content: "\\f7f1"; }
.bi-fast-forward-circle::before { content: "\\f7f2"; }
.bi-fast-forward-fill::before { content: "\\f7f3"; }
.bi-fast-forward::before { content: "\\f7f4"; }
.bi-filetype-sql::before { content: "\\f7f5"; }
.bi-fire::before { content: "\\f7f6"; }
.bi-google-play::before { content: "\\f7f7"; }
.bi-h-circle-fill::before { content: "\\f7fa"; }
.bi-h-circle::before { content: "\\f7fb"; }
.bi-h-square-fill::before { content: "\\f7fc"; }
.bi-h-square::before { content: "\\f7fd"; }
.bi-indent::before { content: "\\f7fe"; }
.bi-lungs-fill::before { content: "\\f7ff"; }
.bi-lungs::before { content: "\\f800"; }
.bi-microsoft-teams::before { content: "\\f801"; }
.bi-p-circle-fill::before { content: "\\f804"; }
.bi-p-circle::before { content: "\\f805"; }
.bi-p-square-fill::before { content: "\\f806"; }
.bi-p-square::before { content: "\\f807"; }
.bi-pass-fill::before { content: "\\f808"; }
.bi-pass::before { content: "\\f809"; }
.bi-prescription::before { content: "\\f80a"; }
.bi-prescription2::before { content: "\\f80b"; }
.bi-r-circle-fill::before { content: "\\f80e"; }
.bi-r-circle::before { content: "\\f80f"; }
.bi-r-square-fill::before { content: "\\f810"; }
.bi-r-square::before { content: "\\f811"; }
.bi-repeat-1::before { content: "\\f812"; }
.bi-repeat::before { content: "\\f813"; }
.bi-rewind-btn-fill::before { content: "\\f814"; }
.bi-rewind-btn::before { content: "\\f815"; }
.bi-rewind-circle-fill::before { content: "\\f816"; }
.bi-rewind-circle::before { content: "\\f817"; }
.bi-rewind-fill::before { content: "\\f818"; }
.bi-rewind::before { content: "\\f819"; }
.bi-train-freight-front-fill::before { content: "\\f81a"; }
.bi-train-freight-front::before { content: "\\f81b"; }
.bi-train-front-fill::before { content: "\\f81c"; }
.bi-train-front::before { content: "\\f81d"; }
.bi-train-lightrail-front-fill::before { content: "\\f81e"; }
.bi-train-lightrail-front::before { content: "\\f81f"; }
.bi-truck-front-fill::before { content: "\\f820"; }
.bi-truck-front::before { content: "\\f821"; }
.bi-ubuntu::before { content: "\\f822"; }
.bi-unindent::before { content: "\\f823"; }
.bi-unity::before { content: "\\f824"; }
.bi-universal-access-circle::before { content: "\\f825"; }
.bi-universal-access::before { content: "\\f826"; }
.bi-virus::before { content: "\\f827"; }
.bi-virus2::before { content: "\\f828"; }
.bi-wechat::before { content: "\\f829"; }
.bi-yelp::before { content: "\\f82a"; }
.bi-sign-stop-fill::before { content: "\\f82b"; }
.bi-sign-stop-lights-fill::before { content: "\\f82c"; }
.bi-sign-stop-lights::before { content: "\\f82d"; }
.bi-sign-stop::before { content: "\\f82e"; }
.bi-sign-turn-left-fill::before { content: "\\f82f"; }
.bi-sign-turn-left::before { content: "\\f830"; }
.bi-sign-turn-right-fill::before { content: "\\f831"; }
.bi-sign-turn-right::before { content: "\\f832"; }
.bi-sign-turn-slight-left-fill::before { content: "\\f833"; }
.bi-sign-turn-slight-left::before { content: "\\f834"; }
.bi-sign-turn-slight-right-fill::before { content: "\\f835"; }
.bi-sign-turn-slight-right::before { content: "\\f836"; }
.bi-sign-yield-fill::before { content: "\\f837"; }
.bi-sign-yield::before { content: "\\f838"; }
.bi-ev-station-fill::before { content: "\\f839"; }
.bi-ev-station::before { content: "\\f83a"; }
.bi-fuel-pump-diesel-fill::before { content: "\\f83b"; }
.bi-fuel-pump-diesel::before { content: "\\f83c"; }
.bi-fuel-pump-fill::before { content: "\\f83d"; }
.bi-fuel-pump::before { content: "\\f83e"; }
.bi-0-circle-fill::before { content: "\\f83f"; }
.bi-0-circle::before { content: "\\f840"; }
.bi-0-square-fill::before { content: "\\f841"; }
.bi-0-square::before { content: "\\f842"; }
.bi-rocket-fill::before { content: "\\f843"; }
.bi-rocket-takeoff-fill::before { content: "\\f844"; }
.bi-rocket-takeoff::before { content: "\\f845"; }
.bi-rocket::before { content: "\\f846"; }
.bi-stripe::before { content: "\\f847"; }
.bi-subscript::before { content: "\\f848"; }
.bi-superscript::before { content: "\\f849"; }
.bi-trello::before { content: "\\f84a"; }
.bi-envelope-at-fill::before { content: "\\f84b"; }
.bi-envelope-at::before { content: "\\f84c"; }
.bi-regex::before { content: "\\f84d"; }
.bi-text-wrap::before { content: "\\f84e"; }
.bi-sign-dead-end-fill::before { content: "\\f84f"; }
.bi-sign-dead-end::before { content: "\\f850"; }
.bi-sign-do-not-enter-fill::before { content: "\\f851"; }
.bi-sign-do-not-enter::before { content: "\\f852"; }
.bi-sign-intersection-fill::before { content: "\\f853"; }
.bi-sign-intersection-side-fill::before { content: "\\f854"; }
.bi-sign-intersection-side::before { content: "\\f855"; }
.bi-sign-intersection-t-fill::before { content: "\\f856"; }
.bi-sign-intersection-t::before { content: "\\f857"; }
.bi-sign-intersection-y-fill::before { content: "\\f858"; }
.bi-sign-intersection-y::before { content: "\\f859"; }
.bi-sign-intersection::before { content: "\\f85a"; }
.bi-sign-merge-left-fill::before { content: "\\f85b"; }
.bi-sign-merge-left::before { content: "\\f85c"; }
.bi-sign-merge-right-fill::before { content: "\\f85d"; }
.bi-sign-merge-right::before { content: "\\f85e"; }
.bi-sign-no-left-turn-fill::before { content: "\\f85f"; }
.bi-sign-no-left-turn::before { content: "\\f860"; }
.bi-sign-no-parking-fill::before { content: "\\f861"; }
.bi-sign-no-parking::before { content: "\\f862"; }
.bi-sign-no-right-turn-fill::before { content: "\\f863"; }
.bi-sign-no-right-turn::before { content: "\\f864"; }
.bi-sign-railroad-fill::before { content: "\\f865"; }
.bi-sign-railroad::before { content: "\\f866"; }
.bi-building-add::before { content: "\\f867"; }
.bi-building-check::before { content: "\\f868"; }
.bi-building-dash::before { content: "\\f869"; }
.bi-building-down::before { content: "\\f86a"; }
.bi-building-exclamation::before { content: "\\f86b"; }
.bi-building-fill-add::before { content: "\\f86c"; }
.bi-building-fill-check::before { content: "\\f86d"; }
.bi-building-fill-dash::before { content: "\\f86e"; }
.bi-building-fill-down::before { content: "\\f86f"; }
.bi-building-fill-exclamation::before { content: "\\f870"; }
.bi-building-fill-gear::before { content: "\\f871"; }
.bi-building-fill-lock::before { content: "\\f872"; }
.bi-building-fill-slash::before { content: "\\f873"; }
.bi-building-fill-up::before { content: "\\f874"; }
.bi-building-fill-x::before { content: "\\f875"; }
.bi-building-fill::before { content: "\\f876"; }
.bi-building-gear::before { content: "\\f877"; }
.bi-building-lock::before { content: "\\f878"; }
.bi-building-slash::before { content: "\\f879"; }
.bi-building-up::before { content: "\\f87a"; }
.bi-building-x::before { content: "\\f87b"; }
.bi-buildings-fill::before { content: "\\f87c"; }
.bi-buildings::before { content: "\\f87d"; }
.bi-bus-front-fill::before { content: "\\f87e"; }
.bi-bus-front::before { content: "\\f87f"; }
.bi-ev-front-fill::before { content: "\\f880"; }
.bi-ev-front::before { content: "\\f881"; }
.bi-globe-americas::before { content: "\\f882"; }
.bi-globe-asia-australia::before { content: "\\f883"; }
.bi-globe-central-south-asia::before { content: "\\f884"; }
.bi-globe-europe-africa::before { content: "\\f885"; }
.bi-house-add-fill::before { content: "\\f886"; }
.bi-house-add::before { content: "\\f887"; }
.bi-house-check-fill::before { content: "\\f888"; }
.bi-house-check::before { content: "\\f889"; }
.bi-house-dash-fill::before { content: "\\f88a"; }
.bi-house-dash::before { content: "\\f88b"; }
.bi-house-down-fill::before { content: "\\f88c"; }
.bi-house-down::before { content: "\\f88d"; }
.bi-house-exclamation-fill::before { content: "\\f88e"; }
.bi-house-exclamation::before { content: "\\f88f"; }
.bi-house-gear-fill::before { content: "\\f890"; }
.bi-house-gear::before { content: "\\f891"; }
.bi-house-lock-fill::before { content: "\\f892"; }
.bi-house-lock::before { content: "\\f893"; }
.bi-house-slash-fill::before { content: "\\f894"; }
.bi-house-slash::before { content: "\\f895"; }
.bi-house-up-fill::before { content: "\\f896"; }
.bi-house-up::before { content: "\\f897"; }
.bi-house-x-fill::before { content: "\\f898"; }
.bi-house-x::before { content: "\\f899"; }
.bi-person-add::before { content: "\\f89a"; }
.bi-person-down::before { content: "\\f89b"; }
.bi-person-exclamation::before { content: "\\f89c"; }
.bi-person-fill-add::before { content: "\\f89d"; }
.bi-person-fill-check::before { content: "\\f89e"; }
.bi-person-fill-dash::before { content: "\\f89f"; }
.bi-person-fill-down::before { content: "\\f8a0"; }
.bi-person-fill-exclamation::before { content: "\\f8a1"; }
.bi-person-fill-gear::before { content: "\\f8a2"; }
.bi-person-fill-lock::before { content: "\\f8a3"; }
.bi-person-fill-slash::before { content: "\\f8a4"; }
.bi-person-fill-up::before { content: "\\f8a5"; }
.bi-person-fill-x::before { content: "\\f8a6"; }
.bi-person-gear::before { content: "\\f8a7"; }
.bi-person-lock::before { content: "\\f8a8"; }
.bi-person-slash::before { content: "\\f8a9"; }
.bi-person-up::before { content: "\\f8aa"; }
.bi-scooter::before { content: "\\f8ab"; }
.bi-taxi-front-fill::before { content: "\\f8ac"; }
.bi-taxi-front::before { content: "\\f8ad"; }
.bi-amd::before { content: "\\f8ae"; }
.bi-database-add::before { content: "\\f8af"; }
.bi-database-check::before { content: "\\f8b0"; }
.bi-database-dash::before { content: "\\f8b1"; }
.bi-database-down::before { content: "\\f8b2"; }
.bi-database-exclamation::before { content: "\\f8b3"; }
.bi-database-fill-add::before { content: "\\f8b4"; }
.bi-database-fill-check::before { content: "\\f8b5"; }
.bi-database-fill-dash::before { content: "\\f8b6"; }
.bi-database-fill-down::before { content: "\\f8b7"; }
.bi-database-fill-exclamation::before { content: "\\f8b8"; }
.bi-database-fill-gear::before { content: "\\f8b9"; }
.bi-database-fill-lock::before { content: "\\f8ba"; }
.bi-database-fill-slash::before { content: "\\f8bb"; }
.bi-database-fill-up::before { content: "\\f8bc"; }
.bi-database-fill-x::before { content: "\\f8bd"; }
.bi-database-fill::before { content: "\\f8be"; }
.bi-database-gear::before { content: "\\f8bf"; }
.bi-database-lock::before { content: "\\f8c0"; }
.bi-database-slash::before { content: "\\f8c1"; }
.bi-database-up::before { content: "\\f8c2"; }
.bi-database-x::before { content: "\\f8c3"; }
.bi-database::before { content: "\\f8c4"; }
.bi-houses-fill::before { content: "\\f8c5"; }
.bi-houses::before { content: "\\f8c6"; }
.bi-nvidia::before { content: "\\f8c7"; }
.bi-person-vcard-fill::before { content: "\\f8c8"; }
.bi-person-vcard::before { content: "\\f8c9"; }
.bi-sina-weibo::before { content: "\\f8ca"; }
.bi-tencent-qq::before { content: "\\f8cb"; }
.bi-wikipedia::before { content: "\\f8cc"; }
.bi-alphabet-uppercase::before { content: "\\f2a5"; }
.bi-alphabet::before { content: "\\f68a"; }
.bi-amazon::before { content: "\\f68d"; }
.bi-arrows-collapse-vertical::before { content: "\\f690"; }
.bi-arrows-expand-vertical::before { content: "\\f695"; }
.bi-arrows-vertical::before { content: "\\f698"; }
.bi-arrows::before { content: "\\f6a2"; }
.bi-ban-fill::before { content: "\\f6a3"; }
.bi-ban::before { content: "\\f6b6"; }
.bi-bing::before { content: "\\f6c2"; }
.bi-cake::before { content: "\\f6e0"; }
.bi-cake2::before { content: "\\f6ed"; }
.bi-cookie::before { content: "\\f6ee"; }
.bi-copy::before { content: "\\f759"; }
.bi-crosshair::before { content: "\\f769"; }
.bi-crosshair2::before { content: "\\f794"; }
.bi-emoji-astonished-fill::before { content: "\\f795"; }
.bi-emoji-astonished::before { content: "\\f79a"; }
.bi-emoji-grimace-fill::before { content: "\\f79b"; }
.bi-emoji-grimace::before { content: "\\f7a0"; }
.bi-emoji-grin-fill::before { content: "\\f7a1"; }
.bi-emoji-grin::before { content: "\\f7a6"; }
.bi-emoji-surprise-fill::before { content: "\\f7a7"; }
.bi-emoji-surprise::before { content: "\\f7ac"; }
.bi-emoji-tear-fill::before { content: "\\f7ad"; }
.bi-emoji-tear::before { content: "\\f7b2"; }
.bi-envelope-arrow-down-fill::before { content: "\\f7b3"; }
.bi-envelope-arrow-down::before { content: "\\f7b8"; }
.bi-envelope-arrow-up-fill::before { content: "\\f7b9"; }
.bi-envelope-arrow-up::before { content: "\\f7be"; }
.bi-feather::before { content: "\\f7bf"; }
.bi-feather2::before { content: "\\f7c4"; }
.bi-floppy-fill::before { content: "\\f7c5"; }
.bi-floppy::before { content: "\\f7d8"; }
.bi-floppy2-fill::before { content: "\\f7d9"; }
.bi-floppy2::before { content: "\\f7e4"; }
.bi-gitlab::before { content: "\\f7e5"; }
.bi-highlighter::before { content: "\\f7f8"; }
.bi-marker-tip::before { content: "\\f802"; }
.bi-nvme-fill::before { content: "\\f803"; }
.bi-nvme::before { content: "\\f80c"; }
.bi-opencollective::before { content: "\\f80d"; }
.bi-pci-card-network::before { content: "\\f8cd"; }
.bi-pci-card-sound::before { content: "\\f8ce"; }
.bi-radar::before { content: "\\f8cf"; }
.bi-send-arrow-down-fill::before { content: "\\f8d0"; }
.bi-send-arrow-down::before { content: "\\f8d1"; }
.bi-send-arrow-up-fill::before { content: "\\f8d2"; }
.bi-send-arrow-up::before { content: "\\f8d3"; }
.bi-sim-slash-fill::before { content: "\\f8d4"; }
.bi-sim-slash::before { content: "\\f8d5"; }
.bi-sourceforge::before { content: "\\f8d6"; }
.bi-substack::before { content: "\\f8d7"; }
.bi-threads-fill::before { content: "\\f8d8"; }
.bi-threads::before { content: "\\f8d9"; }
.bi-transparency::before { content: "\\f8da"; }
.bi-twitter-x::before { content: "\\f8db"; }
.bi-type-h4::before { content: "\\f8dc"; }
.bi-type-h5::before { content: "\\f8dd"; }
.bi-type-h6::before { content: "\\f8de"; }
.bi-backpack-fill::before { content: "\\f8df"; }
.bi-backpack::before { content: "\\f8e0"; }
.bi-backpack2-fill::before { content: "\\f8e1"; }
.bi-backpack2::before { content: "\\f8e2"; }
.bi-backpack3-fill::before { content: "\\f8e3"; }
.bi-backpack3::before { content: "\\f8e4"; }
.bi-backpack4-fill::before { content: "\\f8e5"; }
.bi-backpack4::before { content: "\\f8e6"; }
.bi-brilliance::before { content: "\\f8e7"; }
.bi-cake-fill::before { content: "\\f8e8"; }
.bi-cake2-fill::before { content: "\\f8e9"; }
.bi-duffle-fill::before { content: "\\f8ea"; }
.bi-duffle::before { content: "\\f8eb"; }
.bi-exposure::before { content: "\\f8ec"; }
.bi-gender-neuter::before { content: "\\f8ed"; }
.bi-highlights::before { content: "\\f8ee"; }
.bi-luggage-fill::before { content: "\\f8ef"; }
.bi-luggage::before { content: "\\f8f0"; }
.bi-mailbox-flag::before { content: "\\f8f1"; }
.bi-mailbox2-flag::before { content: "\\f8f2"; }
.bi-noise-reduction::before { content: "\\f8f3"; }
.bi-passport-fill::before { content: "\\f8f4"; }
.bi-passport::before { content: "\\f8f5"; }
.bi-person-arms-up::before { content: "\\f8f6"; }
.bi-person-raised-hand::before { content: "\\f8f7"; }
.bi-person-standing-dress::before { content: "\\f8f8"; }
.bi-person-standing::before { content: "\\f8f9"; }
.bi-person-walking::before { content: "\\f8fa"; }
.bi-person-wheelchair::before { content: "\\f8fb"; }
.bi-shadows::before { content: "\\f8fc"; }
.bi-suitcase-fill::before { content: "\\f8fd"; }
.bi-suitcase-lg-fill::before { content: "\\f8fe"; }
.bi-suitcase-lg::before { content: "\\f8ff"; }
.bi-suitcase::before { content: "\\f900"; }
.bi-suitcase2-fill::before { content: "\\f901"; }
.bi-suitcase2::before { content: "\\f902"; }
.bi-vignette::before { content: "\\f903"; }
`, "",{"version":3,"sources":["webpack://./node_modules/bootstrap-icons/font/bootstrap-icons.css"],"names":[],"mappings":"AAAA;;;;EAIE;;AAEF;EACE,mBAAmB;EACnB,8BAA8B;EAC9B;sDACiF;AACnF;;AAEA;;;EAGE,qBAAqB;EACrB,uCAAuC;EACvC,kBAAkB;EAClB,8BAA8B;EAC9B,oBAAoB;EACpB,oBAAoB;EACpB,cAAc;EACd,uBAAuB;EACvB,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA,kBAAkB,gBAAgB,EAAE;AACpC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,wBAAwB,gBAAgB,EAAE;AAC1C,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,wBAAwB,gBAAgB,EAAE;AAC1C,kBAAkB,gBAAgB,EAAE;AACpC,4BAA4B,gBAAgB,EAAE;AAC9C,kBAAkB,gBAAgB,EAAE;AACpC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,+BAA+B,gBAAgB,EAAE;AACjD,+BAA+B,gBAAgB,EAAE;AACjD,gCAAgC,gBAAgB,EAAE;AAClD,6BAA6B,gBAAgB,EAAE;AAC/C,6BAA6B,gBAAgB,EAAE;AAC/C,6BAA6B,gBAAgB,EAAE;AAC/C,8BAA8B,gBAAgB,EAAE;AAChD,2BAA2B,gBAAgB,EAAE;AAC7C,8BAA8B,gBAAgB,EAAE;AAChD,qCAAqC,gBAAgB,EAAE;AACvD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,0CAA0C,gBAAgB,EAAE;AAC5D,qCAAqC,gBAAgB,EAAE;AACvD,0CAA0C,gBAAgB,EAAE;AAC5D,qCAAqC,gBAAgB,EAAE;AACvD,8BAA8B,gBAAgB,EAAE;AAChD,2CAA2C,gBAAgB,EAAE;AAC7D,sCAAsC,gBAAgB,EAAE;AACxD,2CAA2C,gBAAgB,EAAE;AAC7D,sCAAsC,gBAAgB,EAAE;AACxD,+BAA+B,gBAAgB,EAAE;AACjD,+BAA+B,gBAAgB,EAAE;AACjD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,4BAA4B,gBAAgB,EAAE;AAC9C,yBAAyB,gBAAgB,EAAE;AAC3C,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,+BAA+B,gBAAgB,EAAE;AACjD,+BAA+B,gBAAgB,EAAE;AACjD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,yBAAyB,gBAAgB,EAAE;AAC3C,2BAA2B,gBAAgB,EAAE;AAC7C,gCAAgC,gBAAgB,EAAE;AAClD,iCAAiC,gBAAgB,EAAE;AACnD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,gCAAgC,gBAAgB,EAAE;AAClD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,0BAA0B,gBAAgB,EAAE;AAC5C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,wCAAwC,gBAAgB,EAAE;AAC1D,mCAAmC,gBAAgB,EAAE;AACrD,wCAAwC,gBAAgB,EAAE;AAC1D,mCAAmC,gBAAgB,EAAE;AACrD,4BAA4B,gBAAgB,EAAE;AAC9C,yCAAyC,gBAAgB,EAAE;AAC3D,oCAAoC,gBAAgB,EAAE;AACtD,yCAAyC,gBAAgB,EAAE;AAC3D,oCAAoC,gBAAgB,EAAE;AACtD,6BAA6B,gBAAgB,EAAE;AAC/C,6BAA6B,gBAAgB,EAAE;AAC/C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,uBAAuB,gBAAgB,EAAE;AACzC,oCAAoC,gBAAgB,EAAE;AACtD,kCAAkC,gBAAgB,EAAE;AACpD,8BAA8B,gBAAgB,EAAE;AAChD,4BAA4B,gBAAgB,EAAE;AAC9C,gCAAgC,gBAAgB,EAAE;AAClD,0BAA0B,gBAAgB,EAAE;AAC5C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,uBAAuB,gBAAgB,EAAE;AACzC,iBAAiB,gBAAgB,EAAE;AACnC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,mBAAmB,gBAAgB,EAAE;AACrC,6BAA6B,gBAAgB,EAAE;AAC/C,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,kBAAkB,gBAAgB,EAAE;AACpC,6BAA6B,gBAAgB,EAAE;AAC/C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,8BAA8B,gBAAgB,EAAE;AAChD,wBAAwB,gBAAgB,EAAE;AAC1C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,+BAA+B,gBAAgB,EAAE;AACjD,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,qBAAqB,gBAAgB,EAAE;AACvC,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,+BAA+B,gBAAgB,EAAE;AACjD,wBAAwB,gBAAgB,EAAE;AAC1C,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,+BAA+B,gBAAgB,EAAE;AACjD,wBAAwB,gBAAgB,EAAE;AAC1C,yBAAyB,gBAAgB,EAAE;AAC3C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,4BAA4B,gBAAgB,EAAE;AAC9C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,yBAAyB,gBAAgB,EAAE;AAC3C,2BAA2B,gBAAgB,EAAE;AAC7C,qBAAqB,gBAAgB,EAAE;AACvC,mCAAmC,gBAAgB,EAAE;AACrD,2BAA2B,gBAAgB,EAAE;AAC7C,kCAAkC,gBAAgB,EAAE;AACpD,mCAAmC,gBAAgB,EAAE;AACrD,6BAA6B,gBAAgB,EAAE;AAC/C,qCAAqC,gBAAgB,EAAE;AACvD,sCAAsC,gBAAgB,EAAE;AACxD,gCAAgC,gBAAgB,EAAE;AAClD,gCAAgC,gBAAgB,EAAE;AAClD,iCAAiC,gBAAgB,EAAE;AACnD,mCAAmC,gBAAgB,EAAE;AACrD,oCAAoC,gBAAgB,EAAE;AACtD,8BAA8B,gBAAgB,EAAE;AAChD,6BAA6B,gBAAgB,EAAE;AAC/C,8BAA8B,gBAAgB,EAAE;AAChD,gCAAgC,gBAAgB,EAAE;AAClD,iCAAiC,gBAAgB,EAAE;AACnD,2BAA2B,gBAAgB,EAAE;AAC7C,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,qBAAqB,gBAAgB,EAAE;AACvC,qBAAqB,gBAAgB,EAAE;AACvC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,4BAA4B,gBAAgB,EAAE;AAC9C,wBAAwB,gBAAgB,EAAE;AAC1C,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,uBAAuB,gBAAgB,EAAE;AACzC,uBAAuB,gBAAgB,EAAE;AACzC,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,4BAA4B,gBAAgB,EAAE;AAC9C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,uBAAuB,gBAAgB,EAAE;AACzC,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,6BAA6B,gBAAgB,EAAE;AAC/C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,wBAAwB,gBAAgB,EAAE;AAC1C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,6BAA6B,gBAAgB,EAAE;AAC/C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,8BAA8B,gBAAgB,EAAE;AAChD,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,0BAA0B,gBAAgB,EAAE;AAC5C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,gCAAgC,gBAAgB,EAAE;AAClD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,2BAA2B,gBAAgB,EAAE;AAC7C,qBAAqB,gBAAgB,EAAE;AACvC,sBAAsB,gBAAgB,EAAE;AACxC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,2BAA2B,gBAAgB,EAAE;AAC7C,yBAAyB,gBAAgB,EAAE;AAC3C,wBAAwB,gBAAgB,EAAE;AAC1C,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,yBAAyB,gBAAgB,EAAE;AAC3C,+BAA+B,gBAAgB,EAAE;AACjD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,0BAA0B,gBAAgB,EAAE;AAC5C,4BAA4B,gBAAgB,EAAE;AAC9C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,uBAAuB,gBAAgB,EAAE;AACzC,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,mBAAmB,gBAAgB,EAAE;AACrC,oBAAoB,gBAAgB,EAAE;AACtC,oBAAoB,gBAAgB,EAAE;AACtC,oBAAoB,gBAAgB,EAAE;AACtC,yBAAyB,gBAAgB,EAAE;AAC3C,mBAAmB,gBAAgB,EAAE;AACrC,mBAAmB,gBAAgB,EAAE;AACrC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,wBAAwB,gBAAgB,EAAE;AAC1C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,6BAA6B,gBAAgB,EAAE;AAC/C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,8BAA8B,gBAAgB,EAAE;AAChD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,+BAA+B,gBAAgB,EAAE;AACjD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,wBAAwB,gBAAgB,EAAE;AAC1C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,oBAAoB,gBAAgB,EAAE;AACtC,yBAAyB,gBAAgB,EAAE;AAC3C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,qBAAqB,gBAAgB,EAAE;AACvC,mCAAmC,gBAAgB,EAAE;AACrD,+BAA+B,gBAAgB,EAAE;AACjD,iCAAiC,gBAAgB,EAAE;AACnD,+BAA+B,gBAAgB,EAAE;AACjD,gCAAgC,gBAAgB,EAAE;AAClD,6BAA6B,gBAAgB,EAAE;AAC/C,mCAAmC,gBAAgB,EAAE;AACrD,mCAAmC,gBAAgB,EAAE;AACrD,oCAAoC,gBAAgB,EAAE;AACtD,iCAAiC,gBAAgB,EAAE;AACnD,+BAA+B,gBAAgB,EAAE;AACjD,kCAAkC,gBAAgB,EAAE;AACpD,kCAAkC,gBAAgB,EAAE;AACpD,mCAAmC,gBAAgB,EAAE;AACrD,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,6BAA6B,gBAAgB,EAAE;AAC/C,2BAA2B,gBAAgB,EAAE;AAC7C,4BAA4B,gBAAgB,EAAE;AAC9C,yBAAyB,gBAAgB,EAAE;AAC3C,0BAA0B,gBAAgB,EAAE;AAC5C,0BAA0B,gBAAgB,EAAE;AAC5C,4BAA4B,gBAAgB,EAAE;AAC9C,qBAAqB,gBAAgB,EAAE;AACvC,8BAA8B,gBAAgB,EAAE;AAChD,6BAA6B,gBAAgB,EAAE;AAC/C,8BAA8B,gBAAgB,EAAE;AAChD,6BAA6B,gBAAgB,EAAE;AAC/C,0BAA0B,gBAAgB,EAAE;AAC5C,wBAAwB,gBAAgB,EAAE;AAC1C,yBAAyB,gBAAgB,EAAE;AAC3C,4BAA4B,gBAAgB,EAAE;AAC9C,oBAAoB,gBAAgB,EAAE;AACtC,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,yBAAyB,gBAAgB,EAAE;AAC3C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,+BAA+B,gBAAgB,EAAE;AACjD,mCAAmC,gBAAgB,EAAE;AACrD,wCAAwC,gBAAgB,EAAE;AAC1D,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,yBAAyB,gBAAgB,EAAE;AAC3C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,oBAAoB,gBAAgB,EAAE;AACtC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,yBAAyB,gBAAgB,EAAE;AAC3C,0BAA0B,gBAAgB,EAAE;AAC5C,mBAAmB,gBAAgB,EAAE;AACrC,8BAA8B,gBAAgB,EAAE;AAChD,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,0BAA0B,gBAAgB,EAAE;AAC5C,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,2BAA2B,gBAAgB,EAAE;AAC7C,mBAAmB,gBAAgB,EAAE;AACrC,yBAAyB,gBAAgB,EAAE;AAC3C,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,mBAAmB,gBAAgB,EAAE;AACrC,uBAAuB,gBAAgB,EAAE;AACzC,wBAAwB,gBAAgB,EAAE;AAC1C,kBAAkB,gBAAgB,EAAE;AACpC,0BAA0B,gBAAgB,EAAE;AAC5C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,iCAAiC,gBAAgB,EAAE;AACnD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,iCAAiC,gBAAgB,EAAE;AACnD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,mBAAmB,gBAAgB,EAAE;AACrC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,sBAAsB,gBAAgB,EAAE;AACxC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,oCAAoC,gBAAgB,EAAE;AACtD,kCAAkC,gBAAgB,EAAE;AACpD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,kBAAkB,gBAAgB,EAAE;AACpC,uBAAuB,gBAAgB,EAAE;AACzC,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,uBAAuB,gBAAgB,EAAE;AACzC,wBAAwB,gBAAgB,EAAE;AAC1C,kBAAkB,gBAAgB,EAAE;AACpC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,wCAAwC,gBAAgB,EAAE;AAC1D,mCAAmC,gBAAgB,EAAE;AACrD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,+BAA+B,gBAAgB,EAAE;AACjD,2CAA2C,gBAAgB,EAAE;AAC7D,sCAAsC,gBAAgB,EAAE;AACxD,0BAA0B,gBAAgB,EAAE;AAC5C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,4BAA4B,gBAAgB,EAAE;AAC9C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,wCAAwC,gBAAgB,EAAE;AAC1D,mCAAmC,gBAAgB,EAAE;AACrD,0BAA0B,gBAAgB,EAAE;AAC5C,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,kBAAkB,gBAAgB,EAAE;AACpC,yBAAyB,gBAAgB,EAAE;AAC3C,yBAAyB,gBAAgB,EAAE;AAC3C,uBAAuB,gBAAgB,EAAE;AACzC,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,2CAA2C,gBAAgB,EAAE;AAC7D,sCAAsC,gBAAgB,EAAE;AACxD,yCAAyC,gBAAgB,EAAE;AAC3D,oCAAoC,gBAAgB,EAAE;AACtD,0CAA0C,gBAAgB,EAAE;AAC5D,qCAAqC,gBAAgB,EAAE;AACvD,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,gCAAgC,gBAAgB,EAAE;AAClD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,wCAAwC,gBAAgB,EAAE;AAC1D,mCAAmC,gBAAgB,EAAE;AACrD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,yCAAyC,gBAAgB,EAAE;AAC3D,oCAAoC,gBAAgB,EAAE;AACtD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,4CAA4C,gBAAgB,EAAE;AAC9D,uCAAuC,gBAAgB,EAAE;AACzD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,2BAA2B,gBAAgB,EAAE;AAC7C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,mBAAmB,gBAAgB,EAAE;AACrC,wBAAwB,gBAAgB,EAAE;AAC1C,oBAAoB,gBAAgB,EAAE;AACtC,mBAAmB,gBAAgB,EAAE;AACrC,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,qBAAqB,gBAAgB,EAAE;AACvC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,uBAAuB,gBAAgB,EAAE;AACzC,qBAAqB,gBAAgB,EAAE;AACvC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,oBAAoB,gBAAgB,EAAE;AACtC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,oBAAoB,gBAAgB,EAAE;AACtC,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,wBAAwB,gBAAgB,EAAE;AAC1C,kCAAkC,gBAAgB,EAAE;AACpD,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,kBAAkB,gBAAgB,EAAE;AACpC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,qBAAqB,gBAAgB,EAAE;AACvC,oBAAoB,gBAAgB,EAAE;AACtC,qBAAqB,gBAAgB,EAAE;AACvC,qBAAqB,gBAAgB,EAAE;AACvC,yBAAyB,gBAAgB,EAAE;AAC3C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,uBAAuB,gBAAgB,EAAE;AACzC,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,uBAAuB,gBAAgB,EAAE;AACzC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,8BAA8B,gBAAgB,EAAE;AAChD,4BAA4B,gBAAgB,EAAE;AAC9C,qBAAqB,gBAAgB,EAAE;AACvC,8BAA8B,gBAAgB,EAAE;AAChD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,yBAAyB,gBAAgB,EAAE;AAC3C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,mBAAmB,gBAAgB,EAAE;AACrC,uBAAuB,gBAAgB,EAAE;AACzC,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,kBAAkB,gBAAgB,EAAE;AACpC,yBAAyB,gBAAgB,EAAE;AAC3C,sBAAsB,gBAAgB,EAAE;AACxC,yBAAyB,gBAAgB,EAAE;AAC3C,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,+BAA+B,gBAAgB,EAAE;AACjD,8BAA8B,gBAAgB,EAAE;AAChD,4BAA4B,gBAAgB,EAAE;AAC9C,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,iBAAiB,gBAAgB,EAAE;AACnC,wBAAwB,gBAAgB,EAAE;AAC1C,wBAAwB,gBAAgB,EAAE;AAC1C,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,qBAAqB,gBAAgB,EAAE;AACvC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,mBAAmB,gBAAgB,EAAE;AACrC,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,wBAAwB,gBAAgB,EAAE;AAC1C,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,iCAAiC,gBAAgB,EAAE;AACnD,+BAA+B,gBAAgB,EAAE;AACjD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,4BAA4B,gBAAgB,EAAE;AAC9C,2BAA2B,gBAAgB,EAAE;AAC7C,8BAA8B,gBAAgB,EAAE;AAChD,4BAA4B,gBAAgB,EAAE;AAC9C,2BAA2B,gBAAgB,EAAE;AAC7C,+BAA+B,gBAAgB,EAAE;AACjD,2BAA2B,gBAAgB,EAAE;AAC7C,wBAAwB,gBAAgB,EAAE;AAC1C,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,uBAAuB,gBAAgB,EAAE;AACzC,2BAA2B,gBAAgB,EAAE;AAC7C,4BAA4B,gBAAgB,EAAE;AAC9C,sBAAsB,gBAAgB,EAAE;AACxC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,qBAAqB,gBAAgB,EAAE;AACvC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,6BAA6B,gBAAgB,EAAE;AAC/C,4BAA4B,gBAAgB,EAAE;AAC9C,0BAA0B,gBAAgB,EAAE;AAC5C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,2CAA2C,gBAAgB,EAAE;AAC7D,mCAAmC,gBAAgB,EAAE;AACrD,qCAAqC,gBAAgB,EAAE;AACvD,6BAA6B,gBAAgB,EAAE;AAC/C,2BAA2B,gBAAgB,EAAE;AAC7C,0CAA0C,gBAAgB,EAAE;AAC5D,kCAAkC,gBAAgB,EAAE;AACpD,yCAAyC,gBAAgB,EAAE;AAC3D,iCAAiC,gBAAgB,EAAE;AACnD,mCAAmC,gBAAgB,EAAE;AACrD,yBAAyB,gBAAgB,EAAE;AAC3C,6BAA6B,gBAAgB,EAAE;AAC/C,6BAA6B,gBAAgB,EAAE;AAC/C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,wBAAwB,gBAAgB,EAAE;AAC1C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,yBAAyB,gBAAgB,EAAE;AAC3C,mBAAmB,gBAAgB,EAAE;AACrC,uBAAuB,gBAAgB,EAAE;AACzC,yBAAyB,gBAAgB,EAAE;AAC3C,0BAA0B,gBAAgB,EAAE;AAC5C,sBAAsB,gBAAgB,EAAE;AACxC,yBAAyB,gBAAgB,EAAE;AAC3C,wBAAwB,gBAAgB,EAAE;AAC1C,sBAAsB,gBAAgB,EAAE;AACxC,mBAAmB,gBAAgB,EAAE;AACrC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,mBAAmB,gBAAgB,EAAE;AACrC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,+BAA+B,gBAAgB,EAAE;AACjD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,wBAAwB,gBAAgB,EAAE;AAC1C,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,8BAA8B,gBAAgB,EAAE;AAChD,uBAAuB,gBAAgB,EAAE;AACzC,uBAAuB,gBAAgB,EAAE;AACzC,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,mBAAmB,gBAAgB,EAAE;AACrC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,gCAAgC,gBAAgB,EAAE;AAClD,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,qBAAqB,gBAAgB,EAAE;AACvC,qBAAqB,gBAAgB,EAAE;AACvC,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,wBAAwB,gBAAgB,EAAE;AAC1C,wBAAwB,gBAAgB,EAAE;AAC1C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,0BAA0B,gBAAgB,EAAE;AAC5C,4BAA4B,gBAAgB,EAAE;AAC9C,qBAAqB,gBAAgB,EAAE;AACvC,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,sBAAsB,gBAAgB,EAAE;AACxC,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,kCAAkC,gBAAgB,EAAE;AACpD,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,4BAA4B,gBAAgB,EAAE;AAC9C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,0BAA0B,gBAAgB,EAAE;AAC5C,gCAAgC,gBAAgB,EAAE;AAClD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,qBAAqB,gBAAgB,EAAE;AACvC,yBAAyB,gBAAgB,EAAE;AAC3C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,oBAAoB,gBAAgB,EAAE;AACtC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,iCAAiC,gBAAgB,EAAE;AACnD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,iCAAiC,gBAAgB,EAAE;AACnD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,mBAAmB,gBAAgB,EAAE;AACrC,oBAAoB,gBAAgB,EAAE;AACtC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,uBAAuB,gBAAgB,EAAE;AACzC,sBAAsB,gBAAgB,EAAE;AACxC,6BAA6B,gBAAgB,EAAE;AAC/C,sBAAsB,gBAAgB,EAAE;AACxC,0BAA0B,gBAAgB,EAAE;AAC5C,0BAA0B,gBAAgB,EAAE;AAC5C,0BAA0B,gBAAgB,EAAE;AAC5C,0BAA0B,gBAAgB,EAAE;AAC5C,0BAA0B,gBAAgB,EAAE;AAC5C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,qBAAqB,gBAAgB,EAAE;AACvC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,4BAA4B,gBAAgB,EAAE;AAC9C,qBAAqB,gBAAgB,EAAE;AACvC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,2BAA2B,gBAAgB,EAAE;AAC7C,iCAAiC,gBAAgB,EAAE;AACnD,gCAAgC,gBAAgB,EAAE;AAClD,sCAAsC,gBAAgB,EAAE;AACxD,gCAAgC,gBAAgB,EAAE;AAClD,+BAA+B,gBAAgB,EAAE;AACjD,4BAA4B,gBAAgB,EAAE;AAC9C,0BAA0B,gBAAgB,EAAE;AAC5C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,4BAA4B,gBAAgB,EAAE;AAC9C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,uBAAuB,gBAAgB,EAAE;AACzC,qBAAqB,gBAAgB,EAAE;AACvC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,0BAA0B,gBAAgB,EAAE;AAC5C,mBAAmB,gBAAgB,EAAE;AACrC,sBAAsB,gBAAgB,EAAE;AACxC,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,4BAA4B,gBAAgB,EAAE;AAC9C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,uBAAuB,gBAAgB,EAAE;AACzC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,wCAAwC,gBAAgB,EAAE;AAC1D,mCAAmC,gBAAgB,EAAE;AACrD,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,oBAAoB,gBAAgB,EAAE;AACtC,sBAAsB,gBAAgB,EAAE;AACxC,yBAAyB,gBAAgB,EAAE;AAC3C,mBAAmB,gBAAgB,EAAE;AACrC,oBAAoB,gBAAgB,EAAE;AACtC,oBAAoB,gBAAgB,EAAE;AACtC,kCAAkC,gBAAgB,EAAE;AACpD,8BAA8B,gBAAgB,EAAE;AAChD,gCAAgC,gBAAgB,EAAE;AAClD,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,wBAAwB,gBAAgB,EAAE;AAC1C,oCAAoC,gBAAgB,EAAE;AACtD,gCAAgC,gBAAgB,EAAE;AAClD,kCAAkC,gBAAgB,EAAE;AACpD,8BAA8B,gBAAgB,EAAE;AAChD,0BAA0B,gBAAgB,EAAE;AAC5C,sBAAsB,gBAAgB,EAAE;AACxC,wBAAwB,gBAAgB,EAAE;AAC1C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,yBAAyB,gBAAgB,EAAE;AAC3C,0BAA0B,gBAAgB,EAAE;AAC5C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,oBAAoB,gBAAgB,EAAE;AACtC,wBAAwB,gBAAgB,EAAE;AAC1C,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,oBAAoB,gBAAgB,EAAE;AACtC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,yBAAyB,gBAAgB,EAAE;AAC3C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,kCAAkC,gBAAgB,EAAE;AACpD,gCAAgC,gBAAgB,EAAE;AAClD,oBAAoB,gBAAgB,EAAE;AACtC,0BAA0B,gBAAgB,EAAE;AAC5C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,qBAAqB,gBAAgB,EAAE;AACvC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,+BAA+B,gBAAgB,EAAE;AACjD,gCAAgC,gBAAgB,EAAE;AAClD,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,uBAAuB,gBAAgB,EAAE;AACzC,+BAA+B,gBAAgB,EAAE;AACjD,+BAA+B,gBAAgB,EAAE;AACjD,8BAA8B,gBAAgB,EAAE;AAChD,+BAA+B,gBAAgB,EAAE;AACjD,8BAA8B,gBAAgB,EAAE;AAChD,0BAA0B,gBAAgB,EAAE;AAC5C,kCAAkC,gBAAgB,EAAE;AACpD,yBAAyB,gBAAgB,EAAE;AAC3C,yBAAyB,gBAAgB,EAAE;AAC3C,wBAAwB,gBAAgB,EAAE;AAC1C,0BAA0B,gBAAgB,EAAE;AAC5C,yBAAyB,gBAAgB,EAAE;AAC3C,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,oBAAoB,gBAAgB,EAAE;AACtC,sBAAsB,gBAAgB,EAAE;AACxC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,6BAA6B,gBAAgB,EAAE;AAC/C,4BAA4B,gBAAgB,EAAE;AAC9C,oBAAoB,gBAAgB,EAAE;AACtC,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,iBAAiB,gBAAgB,EAAE;AACnC,qBAAqB,gBAAgB,EAAE;AACvC,sBAAsB,gBAAgB,EAAE;AACxC,wBAAwB,gBAAgB,EAAE;AAC1C,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,0BAA0B,gBAAgB,EAAE;AAC5C,iCAAiC,gBAAgB,EAAE;AACnD,6BAA6B,gBAAgB,EAAE;AAC/C,mBAAmB,gBAAgB,EAAE;AACrC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,oBAAoB,gBAAgB,EAAE;AACtC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,qBAAqB,gBAAgB,EAAE;AACvC,yBAAyB,gBAAgB,EAAE;AAC3C,wBAAwB,gBAAgB,EAAE;AAC1C,2BAA2B,gBAAgB,EAAE;AAC7C,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,wBAAwB,gBAAgB,EAAE;AAC1C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,iBAAiB,gBAAgB,EAAE;AACnC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,sBAAsB,gBAAgB,EAAE;AACxC,oBAAoB,gBAAgB,EAAE;AACtC,oBAAoB,gBAAgB,EAAE;AACtC,uBAAuB,gBAAgB,EAAE;AACzC,qBAAqB,gBAAgB,EAAE;AACvC,qBAAqB,gBAAgB,EAAE;AACvC,uBAAuB,gBAAgB,EAAE;AACzC,mBAAmB,gBAAgB,EAAE;AACrC,mBAAmB,gBAAgB,EAAE;AACrC,0BAA0B,gBAAgB,EAAE;AAC5C,6BAA6B,gBAAgB,EAAE;AAC/C,qBAAqB,gBAAgB,EAAE;AACvC,qBAAqB,gBAAgB,EAAE;AACvC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,gBAAgB,gBAAgB,EAAE;AAClC,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,mBAAmB,gBAAgB,EAAE;AACrC,oBAAoB,gBAAgB,EAAE;AACtC,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,wBAAwB,gBAAgB,EAAE;AAC1C,uBAAuB,gBAAgB,EAAE;AACzC,mBAAmB,gBAAgB,EAAE;AACrC,+BAA+B,gBAAgB,EAAE;AACjD,8BAA8B,gBAAgB,EAAE;AAChD,4BAA4B,gBAAgB,EAAE;AAC9C,gCAAgC,gBAAgB,EAAE;AAClD,6BAA6B,gBAAgB,EAAE;AAC/C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,6BAA6B,gBAAgB,EAAE;AAC/C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,+BAA+B,gBAAgB,EAAE;AACjD,4BAA4B,gBAAgB,EAAE;AAC9C,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,yBAAyB,gBAAgB,EAAE;AAC3C,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,0BAA0B,gBAAgB,EAAE;AAC5C,sBAAsB,gBAAgB,EAAE;AACxC,qBAAqB,gBAAgB,EAAE;AACvC,wBAAwB,gBAAgB,EAAE;AAC1C,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,oBAAoB,gBAAgB,EAAE;AACtC,uBAAuB,gBAAgB,EAAE;AACzC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,mBAAmB,gBAAgB,EAAE;AACrC,oBAAoB,gBAAgB,EAAE;AACtC,wBAAwB,gBAAgB,EAAE;AAC1C,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,mBAAmB,gBAAgB,EAAE;AACrC,qBAAqB,gBAAgB,EAAE;AACvC,qBAAqB,gBAAgB,EAAE;AACvC,wBAAwB,gBAAgB,EAAE;AAC1C,qBAAqB,gBAAgB,EAAE;AACvC,uBAAuB,gBAAgB,EAAE;AACzC,sBAAsB,gBAAgB,EAAE;AACxC,6BAA6B,gBAAgB,EAAE;AAC/C,qBAAqB,gBAAgB,EAAE;AACvC,wBAAwB,gBAAgB,EAAE;AAC1C,oBAAoB,gBAAgB,EAAE;AACtC,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,kBAAkB,gBAAgB,EAAE;AACpC,0BAA0B,gBAAgB,EAAE;AAC5C,+BAA+B,gBAAgB,EAAE;AACjD,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,oBAAoB,gBAAgB,EAAE;AACtC,6BAA6B,gBAAgB,EAAE;AAC/C,2BAA2B,gBAAgB,EAAE;AAC7C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,uBAAuB,gBAAgB,EAAE;AACzC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,wBAAwB,gBAAgB,EAAE;AAC1C,wBAAwB,gBAAgB,EAAE;AAC1C,sBAAsB,gBAAgB,EAAE;AACxC,oBAAoB,gBAAgB,EAAE;AACtC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,wCAAwC,gBAAgB,EAAE;AAC1D,mCAAmC,gBAAgB,EAAE;AACrD,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,uBAAuB,gBAAgB,EAAE;AACzC,mCAAmC,gBAAgB,EAAE;AACrD,2BAA2B,gBAAgB,EAAE;AAC7C,mBAAmB,gBAAgB,EAAE;AACrC,8BAA8B,gBAAgB,EAAE;AAChD,oCAAoC,gBAAgB,EAAE;AACtD,yBAAyB,gBAAgB,EAAE;AAC3C,4BAA4B,gBAAgB,EAAE;AAC9C,iBAAiB,gBAAgB,EAAE;AACnC,0BAA0B,gBAAgB,EAAE;AAC5C,+BAA+B,gBAAgB,EAAE;AACjD,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,oBAAoB,gBAAgB,EAAE;AACtC,oBAAoB,gBAAgB,EAAE;AACtC,oBAAoB,gBAAgB,EAAE;AACtC,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,mBAAmB,gBAAgB,EAAE;AACrC,oBAAoB,gBAAgB,EAAE;AACtC,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,6BAA6B,gBAAgB,EAAE;AAC/C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,0BAA0B,gBAAgB,EAAE;AAC5C,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,qBAAqB,gBAAgB,EAAE;AACvC,qBAAqB,gBAAgB,EAAE;AACvC,0BAA0B,gBAAgB,EAAE;AAC5C,6BAA6B,gBAAgB,EAAE;AAC/C,gCAAgC,gBAAgB,EAAE;AAClD,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,uBAAuB,gBAAgB,EAAE;AACzC,mBAAmB,gBAAgB,EAAE;AACrC,uBAAuB,gBAAgB,EAAE;AACzC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,yBAAyB,gBAAgB,EAAE;AAC3C,kBAAkB,gBAAgB,EAAE;AACpC,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,uBAAuB,gBAAgB,EAAE;AACzC,qBAAqB,gBAAgB,EAAE;AACvC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,+BAA+B,gBAAgB,EAAE;AACjD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,yBAAyB,gBAAgB,EAAE;AAC3C,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,2BAA2B,gBAAgB,EAAE;AAC7C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,sBAAsB,gBAAgB,EAAE;AACxC,wBAAwB,gBAAgB,EAAE;AAC1C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,mBAAmB,gBAAgB,EAAE;AACrC,8BAA8B,gBAAgB,EAAE;AAChD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,mCAAmC,gBAAgB,EAAE;AACrD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,mCAAmC,gBAAgB,EAAE;AACrD,kCAAkC,gBAAgB,EAAE;AACpD,8BAA8B,gBAAgB,EAAE;AAChD,+BAA+B,gBAAgB,EAAE;AACjD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,8BAA8B,gBAAgB,EAAE;AAChD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,kCAAkC,gBAAgB,EAAE;AACpD,wCAAwC,gBAAgB,EAAE;AAC1D,mCAAmC,gBAAgB,EAAE;AACrD,6BAA6B,gBAAgB,EAAE;AAC/C,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,4BAA4B,gBAAgB,EAAE;AAC9C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,4BAA4B,gBAAgB,EAAE;AAC9C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,4BAA4B,gBAAgB,EAAE;AAC9C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,0BAA0B,gBAAgB,EAAE;AAC5C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,qBAAqB,gBAAgB,EAAE;AACvC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,wBAAwB,gBAAgB,EAAE;AAC1C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,2BAA2B,gBAAgB,EAAE;AAC7C,4BAA4B,gBAAgB,EAAE;AAC9C,yBAAyB,gBAAgB,EAAE;AAC3C,qBAAqB,gBAAgB,EAAE;AACvC,2BAA2B,gBAAgB,EAAE;AAC7C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,sBAAsB,gBAAgB,EAAE;AACxC,4BAA4B,gBAAgB,EAAE;AAC9C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,uBAAuB,gBAAgB,EAAE;AACzC,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,gCAAgC,gBAAgB,EAAE;AAClD,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,wBAAwB,gBAAgB,EAAE;AAC1C,yBAAyB,gBAAgB,EAAE;AAC3C,4CAA4C,gBAAgB,EAAE;AAC9D,uCAAuC,gBAAgB,EAAE;AACzD,gCAAgC,gBAAgB,EAAE;AAClD,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,oBAAoB,gBAAgB,EAAE;AACtC,qBAAqB,gBAAgB,EAAE;AACvC,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,6BAA6B,gBAAgB,EAAE;AAC/C,2BAA2B,gBAAgB,EAAE;AAC7C,8BAA8B,gBAAgB,EAAE;AAChD,6BAA6B,gBAAgB,EAAE;AAC/C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,6BAA6B,gBAAgB,EAAE;AAC/C,sBAAsB,gBAAgB,EAAE;AACxC,qBAAqB,gBAAgB,EAAE;AACvC,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,2BAA2B,gBAAgB,EAAE;AAC7C,mBAAmB,gBAAgB,EAAE;AACrC,0BAA0B,gBAAgB,EAAE;AAC5C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,qBAAqB,gBAAgB,EAAE;AACvC,yBAAyB,gBAAgB,EAAE;AAC3C,oBAAoB,gBAAgB,EAAE;AACtC,8BAA8B,gBAAgB,EAAE;AAChD,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,2BAA2B,gBAAgB,EAAE;AAC7C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,uBAAuB,gBAAgB,EAAE;AACzC,qBAAqB,gBAAgB,EAAE;AACvC,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,yCAAyC,gBAAgB,EAAE;AAC3D,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,uBAAuB,gBAAgB,EAAE;AACzC,oBAAoB,gBAAgB,EAAE;AACtC,sCAAsC,gBAAgB,EAAE;AACxD,+BAA+B,gBAAgB,EAAE;AACjD,oBAAoB,gBAAgB,EAAE;AACtC,qBAAqB,gBAAgB,EAAE;AACvC,qBAAqB,gBAAgB,EAAE;AACvC,mBAAmB,gBAAgB,EAAE;AACrC,6BAA6B,gBAAgB,EAAE;AAC/C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,wBAAwB,gBAAgB,EAAE;AAC1C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,yCAAyC,gBAAgB,EAAE;AAC3D,oCAAoC,gBAAgB,EAAE;AACtD,0CAA0C,gBAAgB,EAAE;AAC5D,qCAAqC,gBAAgB,EAAE;AACvD,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,qBAAqB,gBAAgB,EAAE;AACvC,qBAAqB,gBAAgB,EAAE;AACvC,wBAAwB,gBAAgB,EAAE;AAC1C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,oBAAoB,gBAAgB,EAAE;AACtC,wBAAwB,gBAAgB,EAAE;AAC1C,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,qCAAqC,gBAAgB,EAAE;AACvD,0CAA0C,gBAAgB,EAAE;AAC5D,qCAAqC,gBAAgB,EAAE;AACvD,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,gCAAgC,gBAAgB,EAAE;AAClD,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,sCAAsC,gBAAgB,EAAE;AACxD,iCAAiC,gBAAgB,EAAE;AACnD,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,2BAA2B,gBAAgB,EAAE;AAC7C,6BAA6B,gBAAgB,EAAE;AAC/C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,mCAAmC,gBAAgB,EAAE;AACrD,gCAAgC,gBAAgB,EAAE;AAClD,kCAAkC,gBAAgB,EAAE;AACpD,iCAAiC,gBAAgB,EAAE;AACnD,iCAAiC,gBAAgB,EAAE;AACnD,wCAAwC,gBAAgB,EAAE;AAC1D,iCAAiC,gBAAgB,EAAE;AACnD,iCAAiC,gBAAgB,EAAE;AACnD,kCAAkC,gBAAgB,EAAE;AACpD,+BAA+B,gBAAgB,EAAE;AACjD,8BAA8B,gBAAgB,EAAE;AAChD,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,6BAA6B,gBAAgB,EAAE;AAC/C,0BAA0B,gBAAgB,EAAE;AAC5C,yBAAyB,gBAAgB,EAAE;AAC3C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,mCAAmC,gBAAgB,EAAE;AACrD,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,yBAAyB,gBAAgB,EAAE;AAC3C,0BAA0B,gBAAgB,EAAE;AAC5C,iCAAiC,gBAAgB,EAAE;AACnD,8BAA8B,gBAAgB,EAAE;AAChD,gCAAgC,gBAAgB,EAAE;AAClD,+BAA+B,gBAAgB,EAAE;AACjD,+BAA+B,gBAAgB,EAAE;AACjD,sCAAsC,gBAAgB,EAAE;AACxD,+BAA+B,gBAAgB,EAAE;AACjD,+BAA+B,gBAAgB,EAAE;AACjD,gCAAgC,gBAAgB,EAAE;AAClD,6BAA6B,gBAAgB,EAAE;AAC/C,4BAA4B,gBAAgB,EAAE;AAC9C,0BAA0B,gBAAgB,EAAE;AAC5C,0BAA0B,gBAAgB,EAAE;AAC5C,2BAA2B,gBAAgB,EAAE;AAC7C,wBAAwB,gBAAgB,EAAE;AAC1C,sBAAsB,gBAAgB,EAAE;AACxC,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,kBAAkB,gBAAgB,EAAE;AACpC,2BAA2B,gBAAgB,EAAE;AAC7C,6BAA6B,gBAAgB,EAAE;AAC/C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,mCAAmC,gBAAgB,EAAE;AACrD,gCAAgC,gBAAgB,EAAE;AAClD,kCAAkC,gBAAgB,EAAE;AACpD,iCAAiC,gBAAgB,EAAE;AACnD,iCAAiC,gBAAgB,EAAE;AACnD,wCAAwC,gBAAgB,EAAE;AAC1D,iCAAiC,gBAAgB,EAAE;AACnD,iCAAiC,gBAAgB,EAAE;AACnD,kCAAkC,gBAAgB,EAAE;AACpD,+BAA+B,gBAAgB,EAAE;AACjD,8BAA8B,gBAAgB,EAAE;AAChD,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,4BAA4B,gBAAgB,EAAE;AAC9C,6BAA6B,gBAAgB,EAAE;AAC/C,0BAA0B,gBAAgB,EAAE;AAC5C,yBAAyB,gBAAgB,EAAE;AAC3C,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,qBAAqB,gBAAgB,EAAE;AACvC,gCAAgC,gBAAgB,EAAE;AAClD,2BAA2B,gBAAgB,EAAE;AAC7C,yBAAyB,gBAAgB,EAAE;AAC3C,yBAAyB,gBAAgB,EAAE;AAC3C,wBAAwB,gBAAgB,EAAE;AAC1C,iCAAiC,gBAAgB,EAAE;AACnD,uBAAuB,gBAAgB,EAAE;AACzC,qBAAqB,gBAAgB,EAAE;AACvC,uCAAuC,gBAAgB,EAAE;AACzD,qCAAqC,gBAAgB,EAAE;AACvD,8BAA8B,gBAAgB,EAAE;AAChD,qBAAqB,gBAAgB,EAAE;AACvC,uBAAuB,gBAAgB,EAAE;AACzC,kBAAkB,gBAAgB,EAAE;AACpC,mBAAmB,gBAAgB,EAAE;AACrC,mBAAmB,gBAAgB,EAAE;AACrC,oBAAoB,gBAAgB,EAAE;AACtC,qBAAqB,gBAAgB,EAAE;AACvC,mBAAmB,gBAAgB,EAAE;AACrC,wBAAwB,gBAAgB,EAAE;AAC1C,yBAAyB,gBAAgB,EAAE;AAC3C,oCAAoC,gBAAgB,EAAE;AACtD,+BAA+B,gBAAgB,EAAE;AACjD,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,kCAAkC,gBAAgB,EAAE;AACpD,6BAA6B,gBAAgB,EAAE;AAC/C,8BAA8B,gBAAgB,EAAE;AAChD,yBAAyB,gBAAgB,EAAE;AAC3C,uCAAuC,gBAAgB,EAAE;AACzD,kCAAkC,gBAAgB,EAAE;AACpD,qCAAqC,gBAAgB,EAAE;AACvD,gCAAgC,gBAAgB,EAAE;AAClD,sBAAsB,gBAAgB,EAAE;AACxC,uBAAuB,gBAAgB,EAAE;AACzC,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,qBAAqB,gBAAgB,EAAE;AACvC,0BAA0B,gBAAgB,EAAE;AAC5C,yBAAyB,gBAAgB,EAAE;AAC3C,wBAAwB,gBAAgB,EAAE;AAC1C,mBAAmB,gBAAgB,EAAE;AACrC,6BAA6B,gBAAgB,EAAE;AAC/C,+BAA+B,gBAAgB,EAAE;AACjD,6BAA6B,gBAAgB,EAAE;AAC/C,oBAAoB,gBAAgB,EAAE;AACtC,mCAAmC,gBAAgB,EAAE;AACrD,8BAA8B,gBAAgB,EAAE;AAChD,iCAAiC,gBAAgB,EAAE;AACnD,4BAA4B,gBAAgB,EAAE;AAC9C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,0BAA0B,gBAAgB,EAAE;AAC5C,uBAAuB,gBAAgB,EAAE;AACzC,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,2BAA2B,gBAAgB,EAAE;AAC7C,wBAAwB,gBAAgB,EAAE;AAC1C,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,sBAAsB,gBAAgB,EAAE;AACxC,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,yBAAyB,gBAAgB,EAAE;AAC3C,wBAAwB,gBAAgB,EAAE;AAC1C,yBAAyB,gBAAgB,EAAE;AAC3C,0BAA0B,gBAAgB,EAAE;AAC5C,qBAAqB,gBAAgB,EAAE;AACvC,uBAAuB,gBAAgB,EAAE;AACzC,4BAA4B,gBAAgB,EAAE;AAC9C,yBAAyB,gBAAgB,EAAE;AAC3C,2BAA2B,gBAAgB,EAAE;AAC7C,sBAAsB,gBAAgB,EAAE;AACxC,2BAA2B,gBAAgB,EAAE;AAC7C,4BAA4B,gBAAgB,EAAE;AAC9C,8BAA8B,gBAAgB,EAAE;AAChD,4BAA4B,gBAAgB,EAAE;AAC9C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,iCAAiC,gBAAgB,EAAE;AACnD,oCAAoC,gBAAgB,EAAE;AACtD,8BAA8B,gBAAgB,EAAE;AAChD,6BAA6B,gBAAgB,EAAE;AAC/C,gCAAgC,gBAAgB,EAAE;AAClD,sBAAsB,gBAAgB,EAAE;AACxC,4BAA4B,gBAAgB,EAAE;AAC9C,+BAA+B,gBAAgB,EAAE;AACjD,0BAA0B,gBAAgB,EAAE;AAC5C,uBAAuB,gBAAgB,EAAE;AACzC,6BAA6B,gBAAgB,EAAE;AAC/C,wBAAwB,gBAAgB,EAAE;AAC1C,uBAAuB,gBAAgB,EAAE","sourcesContent":["/*!\n * Bootstrap Icons v1.11.3 (https://icons.getbootstrap.com/)\n * Copyright 2019-2024 The Bootstrap Authors\n * Licensed under MIT (https://github.com/twbs/icons/blob/main/LICENSE)\n */\n\n@font-face {\n  font-display: block;\n  font-family: \"bootstrap-icons\";\n  src: url(\"./fonts/bootstrap-icons.woff2?dd67030699838ea613ee6dbda90effa6\") format(\"woff2\"),\nurl(\"./fonts/bootstrap-icons.woff?dd67030699838ea613ee6dbda90effa6\") format(\"woff\");\n}\n\n.bi::before,\n[class^=\"bi-\"]::before,\n[class*=\" bi-\"]::before {\n  display: inline-block;\n  font-family: bootstrap-icons !important;\n  font-style: normal;\n  font-weight: normal !important;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n  vertical-align: -.125em;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.bi-123::before { content: \"\\f67f\"; }\n.bi-alarm-fill::before { content: \"\\f101\"; }\n.bi-alarm::before { content: \"\\f102\"; }\n.bi-align-bottom::before { content: \"\\f103\"; }\n.bi-align-center::before { content: \"\\f104\"; }\n.bi-align-end::before { content: \"\\f105\"; }\n.bi-align-middle::before { content: \"\\f106\"; }\n.bi-align-start::before { content: \"\\f107\"; }\n.bi-align-top::before { content: \"\\f108\"; }\n.bi-alt::before { content: \"\\f109\"; }\n.bi-app-indicator::before { content: \"\\f10a\"; }\n.bi-app::before { content: \"\\f10b\"; }\n.bi-archive-fill::before { content: \"\\f10c\"; }\n.bi-archive::before { content: \"\\f10d\"; }\n.bi-arrow-90deg-down::before { content: \"\\f10e\"; }\n.bi-arrow-90deg-left::before { content: \"\\f10f\"; }\n.bi-arrow-90deg-right::before { content: \"\\f110\"; }\n.bi-arrow-90deg-up::before { content: \"\\f111\"; }\n.bi-arrow-bar-down::before { content: \"\\f112\"; }\n.bi-arrow-bar-left::before { content: \"\\f113\"; }\n.bi-arrow-bar-right::before { content: \"\\f114\"; }\n.bi-arrow-bar-up::before { content: \"\\f115\"; }\n.bi-arrow-clockwise::before { content: \"\\f116\"; }\n.bi-arrow-counterclockwise::before { content: \"\\f117\"; }\n.bi-arrow-down-circle-fill::before { content: \"\\f118\"; }\n.bi-arrow-down-circle::before { content: \"\\f119\"; }\n.bi-arrow-down-left-circle-fill::before { content: \"\\f11a\"; }\n.bi-arrow-down-left-circle::before { content: \"\\f11b\"; }\n.bi-arrow-down-left-square-fill::before { content: \"\\f11c\"; }\n.bi-arrow-down-left-square::before { content: \"\\f11d\"; }\n.bi-arrow-down-left::before { content: \"\\f11e\"; }\n.bi-arrow-down-right-circle-fill::before { content: \"\\f11f\"; }\n.bi-arrow-down-right-circle::before { content: \"\\f120\"; }\n.bi-arrow-down-right-square-fill::before { content: \"\\f121\"; }\n.bi-arrow-down-right-square::before { content: \"\\f122\"; }\n.bi-arrow-down-right::before { content: \"\\f123\"; }\n.bi-arrow-down-short::before { content: \"\\f124\"; }\n.bi-arrow-down-square-fill::before { content: \"\\f125\"; }\n.bi-arrow-down-square::before { content: \"\\f126\"; }\n.bi-arrow-down-up::before { content: \"\\f127\"; }\n.bi-arrow-down::before { content: \"\\f128\"; }\n.bi-arrow-left-circle-fill::before { content: \"\\f129\"; }\n.bi-arrow-left-circle::before { content: \"\\f12a\"; }\n.bi-arrow-left-right::before { content: \"\\f12b\"; }\n.bi-arrow-left-short::before { content: \"\\f12c\"; }\n.bi-arrow-left-square-fill::before { content: \"\\f12d\"; }\n.bi-arrow-left-square::before { content: \"\\f12e\"; }\n.bi-arrow-left::before { content: \"\\f12f\"; }\n.bi-arrow-repeat::before { content: \"\\f130\"; }\n.bi-arrow-return-left::before { content: \"\\f131\"; }\n.bi-arrow-return-right::before { content: \"\\f132\"; }\n.bi-arrow-right-circle-fill::before { content: \"\\f133\"; }\n.bi-arrow-right-circle::before { content: \"\\f134\"; }\n.bi-arrow-right-short::before { content: \"\\f135\"; }\n.bi-arrow-right-square-fill::before { content: \"\\f136\"; }\n.bi-arrow-right-square::before { content: \"\\f137\"; }\n.bi-arrow-right::before { content: \"\\f138\"; }\n.bi-arrow-up-circle-fill::before { content: \"\\f139\"; }\n.bi-arrow-up-circle::before { content: \"\\f13a\"; }\n.bi-arrow-up-left-circle-fill::before { content: \"\\f13b\"; }\n.bi-arrow-up-left-circle::before { content: \"\\f13c\"; }\n.bi-arrow-up-left-square-fill::before { content: \"\\f13d\"; }\n.bi-arrow-up-left-square::before { content: \"\\f13e\"; }\n.bi-arrow-up-left::before { content: \"\\f13f\"; }\n.bi-arrow-up-right-circle-fill::before { content: \"\\f140\"; }\n.bi-arrow-up-right-circle::before { content: \"\\f141\"; }\n.bi-arrow-up-right-square-fill::before { content: \"\\f142\"; }\n.bi-arrow-up-right-square::before { content: \"\\f143\"; }\n.bi-arrow-up-right::before { content: \"\\f144\"; }\n.bi-arrow-up-short::before { content: \"\\f145\"; }\n.bi-arrow-up-square-fill::before { content: \"\\f146\"; }\n.bi-arrow-up-square::before { content: \"\\f147\"; }\n.bi-arrow-up::before { content: \"\\f148\"; }\n.bi-arrows-angle-contract::before { content: \"\\f149\"; }\n.bi-arrows-angle-expand::before { content: \"\\f14a\"; }\n.bi-arrows-collapse::before { content: \"\\f14b\"; }\n.bi-arrows-expand::before { content: \"\\f14c\"; }\n.bi-arrows-fullscreen::before { content: \"\\f14d\"; }\n.bi-arrows-move::before { content: \"\\f14e\"; }\n.bi-aspect-ratio-fill::before { content: \"\\f14f\"; }\n.bi-aspect-ratio::before { content: \"\\f150\"; }\n.bi-asterisk::before { content: \"\\f151\"; }\n.bi-at::before { content: \"\\f152\"; }\n.bi-award-fill::before { content: \"\\f153\"; }\n.bi-award::before { content: \"\\f154\"; }\n.bi-back::before { content: \"\\f155\"; }\n.bi-backspace-fill::before { content: \"\\f156\"; }\n.bi-backspace-reverse-fill::before { content: \"\\f157\"; }\n.bi-backspace-reverse::before { content: \"\\f158\"; }\n.bi-backspace::before { content: \"\\f159\"; }\n.bi-badge-3d-fill::before { content: \"\\f15a\"; }\n.bi-badge-3d::before { content: \"\\f15b\"; }\n.bi-badge-4k-fill::before { content: \"\\f15c\"; }\n.bi-badge-4k::before { content: \"\\f15d\"; }\n.bi-badge-8k-fill::before { content: \"\\f15e\"; }\n.bi-badge-8k::before { content: \"\\f15f\"; }\n.bi-badge-ad-fill::before { content: \"\\f160\"; }\n.bi-badge-ad::before { content: \"\\f161\"; }\n.bi-badge-ar-fill::before { content: \"\\f162\"; }\n.bi-badge-ar::before { content: \"\\f163\"; }\n.bi-badge-cc-fill::before { content: \"\\f164\"; }\n.bi-badge-cc::before { content: \"\\f165\"; }\n.bi-badge-hd-fill::before { content: \"\\f166\"; }\n.bi-badge-hd::before { content: \"\\f167\"; }\n.bi-badge-tm-fill::before { content: \"\\f168\"; }\n.bi-badge-tm::before { content: \"\\f169\"; }\n.bi-badge-vo-fill::before { content: \"\\f16a\"; }\n.bi-badge-vo::before { content: \"\\f16b\"; }\n.bi-badge-vr-fill::before { content: \"\\f16c\"; }\n.bi-badge-vr::before { content: \"\\f16d\"; }\n.bi-badge-wc-fill::before { content: \"\\f16e\"; }\n.bi-badge-wc::before { content: \"\\f16f\"; }\n.bi-bag-check-fill::before { content: \"\\f170\"; }\n.bi-bag-check::before { content: \"\\f171\"; }\n.bi-bag-dash-fill::before { content: \"\\f172\"; }\n.bi-bag-dash::before { content: \"\\f173\"; }\n.bi-bag-fill::before { content: \"\\f174\"; }\n.bi-bag-plus-fill::before { content: \"\\f175\"; }\n.bi-bag-plus::before { content: \"\\f176\"; }\n.bi-bag-x-fill::before { content: \"\\f177\"; }\n.bi-bag-x::before { content: \"\\f178\"; }\n.bi-bag::before { content: \"\\f179\"; }\n.bi-bar-chart-fill::before { content: \"\\f17a\"; }\n.bi-bar-chart-line-fill::before { content: \"\\f17b\"; }\n.bi-bar-chart-line::before { content: \"\\f17c\"; }\n.bi-bar-chart-steps::before { content: \"\\f17d\"; }\n.bi-bar-chart::before { content: \"\\f17e\"; }\n.bi-basket-fill::before { content: \"\\f17f\"; }\n.bi-basket::before { content: \"\\f180\"; }\n.bi-basket2-fill::before { content: \"\\f181\"; }\n.bi-basket2::before { content: \"\\f182\"; }\n.bi-basket3-fill::before { content: \"\\f183\"; }\n.bi-basket3::before { content: \"\\f184\"; }\n.bi-battery-charging::before { content: \"\\f185\"; }\n.bi-battery-full::before { content: \"\\f186\"; }\n.bi-battery-half::before { content: \"\\f187\"; }\n.bi-battery::before { content: \"\\f188\"; }\n.bi-bell-fill::before { content: \"\\f189\"; }\n.bi-bell::before { content: \"\\f18a\"; }\n.bi-bezier::before { content: \"\\f18b\"; }\n.bi-bezier2::before { content: \"\\f18c\"; }\n.bi-bicycle::before { content: \"\\f18d\"; }\n.bi-binoculars-fill::before { content: \"\\f18e\"; }\n.bi-binoculars::before { content: \"\\f18f\"; }\n.bi-blockquote-left::before { content: \"\\f190\"; }\n.bi-blockquote-right::before { content: \"\\f191\"; }\n.bi-book-fill::before { content: \"\\f192\"; }\n.bi-book-half::before { content: \"\\f193\"; }\n.bi-book::before { content: \"\\f194\"; }\n.bi-bookmark-check-fill::before { content: \"\\f195\"; }\n.bi-bookmark-check::before { content: \"\\f196\"; }\n.bi-bookmark-dash-fill::before { content: \"\\f197\"; }\n.bi-bookmark-dash::before { content: \"\\f198\"; }\n.bi-bookmark-fill::before { content: \"\\f199\"; }\n.bi-bookmark-heart-fill::before { content: \"\\f19a\"; }\n.bi-bookmark-heart::before { content: \"\\f19b\"; }\n.bi-bookmark-plus-fill::before { content: \"\\f19c\"; }\n.bi-bookmark-plus::before { content: \"\\f19d\"; }\n.bi-bookmark-star-fill::before { content: \"\\f19e\"; }\n.bi-bookmark-star::before { content: \"\\f19f\"; }\n.bi-bookmark-x-fill::before { content: \"\\f1a0\"; }\n.bi-bookmark-x::before { content: \"\\f1a1\"; }\n.bi-bookmark::before { content: \"\\f1a2\"; }\n.bi-bookmarks-fill::before { content: \"\\f1a3\"; }\n.bi-bookmarks::before { content: \"\\f1a4\"; }\n.bi-bookshelf::before { content: \"\\f1a5\"; }\n.bi-bootstrap-fill::before { content: \"\\f1a6\"; }\n.bi-bootstrap-reboot::before { content: \"\\f1a7\"; }\n.bi-bootstrap::before { content: \"\\f1a8\"; }\n.bi-border-all::before { content: \"\\f1a9\"; }\n.bi-border-bottom::before { content: \"\\f1aa\"; }\n.bi-border-center::before { content: \"\\f1ab\"; }\n.bi-border-inner::before { content: \"\\f1ac\"; }\n.bi-border-left::before { content: \"\\f1ad\"; }\n.bi-border-middle::before { content: \"\\f1ae\"; }\n.bi-border-outer::before { content: \"\\f1af\"; }\n.bi-border-right::before { content: \"\\f1b0\"; }\n.bi-border-style::before { content: \"\\f1b1\"; }\n.bi-border-top::before { content: \"\\f1b2\"; }\n.bi-border-width::before { content: \"\\f1b3\"; }\n.bi-border::before { content: \"\\f1b4\"; }\n.bi-bounding-box-circles::before { content: \"\\f1b5\"; }\n.bi-bounding-box::before { content: \"\\f1b6\"; }\n.bi-box-arrow-down-left::before { content: \"\\f1b7\"; }\n.bi-box-arrow-down-right::before { content: \"\\f1b8\"; }\n.bi-box-arrow-down::before { content: \"\\f1b9\"; }\n.bi-box-arrow-in-down-left::before { content: \"\\f1ba\"; }\n.bi-box-arrow-in-down-right::before { content: \"\\f1bb\"; }\n.bi-box-arrow-in-down::before { content: \"\\f1bc\"; }\n.bi-box-arrow-in-left::before { content: \"\\f1bd\"; }\n.bi-box-arrow-in-right::before { content: \"\\f1be\"; }\n.bi-box-arrow-in-up-left::before { content: \"\\f1bf\"; }\n.bi-box-arrow-in-up-right::before { content: \"\\f1c0\"; }\n.bi-box-arrow-in-up::before { content: \"\\f1c1\"; }\n.bi-box-arrow-left::before { content: \"\\f1c2\"; }\n.bi-box-arrow-right::before { content: \"\\f1c3\"; }\n.bi-box-arrow-up-left::before { content: \"\\f1c4\"; }\n.bi-box-arrow-up-right::before { content: \"\\f1c5\"; }\n.bi-box-arrow-up::before { content: \"\\f1c6\"; }\n.bi-box-seam::before { content: \"\\f1c7\"; }\n.bi-box::before { content: \"\\f1c8\"; }\n.bi-braces::before { content: \"\\f1c9\"; }\n.bi-bricks::before { content: \"\\f1ca\"; }\n.bi-briefcase-fill::before { content: \"\\f1cb\"; }\n.bi-briefcase::before { content: \"\\f1cc\"; }\n.bi-brightness-alt-high-fill::before { content: \"\\f1cd\"; }\n.bi-brightness-alt-high::before { content: \"\\f1ce\"; }\n.bi-brightness-alt-low-fill::before { content: \"\\f1cf\"; }\n.bi-brightness-alt-low::before { content: \"\\f1d0\"; }\n.bi-brightness-high-fill::before { content: \"\\f1d1\"; }\n.bi-brightness-high::before { content: \"\\f1d2\"; }\n.bi-brightness-low-fill::before { content: \"\\f1d3\"; }\n.bi-brightness-low::before { content: \"\\f1d4\"; }\n.bi-broadcast-pin::before { content: \"\\f1d5\"; }\n.bi-broadcast::before { content: \"\\f1d6\"; }\n.bi-brush-fill::before { content: \"\\f1d7\"; }\n.bi-brush::before { content: \"\\f1d8\"; }\n.bi-bucket-fill::before { content: \"\\f1d9\"; }\n.bi-bucket::before { content: \"\\f1da\"; }\n.bi-bug-fill::before { content: \"\\f1db\"; }\n.bi-bug::before { content: \"\\f1dc\"; }\n.bi-building::before { content: \"\\f1dd\"; }\n.bi-bullseye::before { content: \"\\f1de\"; }\n.bi-calculator-fill::before { content: \"\\f1df\"; }\n.bi-calculator::before { content: \"\\f1e0\"; }\n.bi-calendar-check-fill::before { content: \"\\f1e1\"; }\n.bi-calendar-check::before { content: \"\\f1e2\"; }\n.bi-calendar-date-fill::before { content: \"\\f1e3\"; }\n.bi-calendar-date::before { content: \"\\f1e4\"; }\n.bi-calendar-day-fill::before { content: \"\\f1e5\"; }\n.bi-calendar-day::before { content: \"\\f1e6\"; }\n.bi-calendar-event-fill::before { content: \"\\f1e7\"; }\n.bi-calendar-event::before { content: \"\\f1e8\"; }\n.bi-calendar-fill::before { content: \"\\f1e9\"; }\n.bi-calendar-minus-fill::before { content: \"\\f1ea\"; }\n.bi-calendar-minus::before { content: \"\\f1eb\"; }\n.bi-calendar-month-fill::before { content: \"\\f1ec\"; }\n.bi-calendar-month::before { content: \"\\f1ed\"; }\n.bi-calendar-plus-fill::before { content: \"\\f1ee\"; }\n.bi-calendar-plus::before { content: \"\\f1ef\"; }\n.bi-calendar-range-fill::before { content: \"\\f1f0\"; }\n.bi-calendar-range::before { content: \"\\f1f1\"; }\n.bi-calendar-week-fill::before { content: \"\\f1f2\"; }\n.bi-calendar-week::before { content: \"\\f1f3\"; }\n.bi-calendar-x-fill::before { content: \"\\f1f4\"; }\n.bi-calendar-x::before { content: \"\\f1f5\"; }\n.bi-calendar::before { content: \"\\f1f6\"; }\n.bi-calendar2-check-fill::before { content: \"\\f1f7\"; }\n.bi-calendar2-check::before { content: \"\\f1f8\"; }\n.bi-calendar2-date-fill::before { content: \"\\f1f9\"; }\n.bi-calendar2-date::before { content: \"\\f1fa\"; }\n.bi-calendar2-day-fill::before { content: \"\\f1fb\"; }\n.bi-calendar2-day::before { content: \"\\f1fc\"; }\n.bi-calendar2-event-fill::before { content: \"\\f1fd\"; }\n.bi-calendar2-event::before { content: \"\\f1fe\"; }\n.bi-calendar2-fill::before { content: \"\\f1ff\"; }\n.bi-calendar2-minus-fill::before { content: \"\\f200\"; }\n.bi-calendar2-minus::before { content: \"\\f201\"; }\n.bi-calendar2-month-fill::before { content: \"\\f202\"; }\n.bi-calendar2-month::before { content: \"\\f203\"; }\n.bi-calendar2-plus-fill::before { content: \"\\f204\"; }\n.bi-calendar2-plus::before { content: \"\\f205\"; }\n.bi-calendar2-range-fill::before { content: \"\\f206\"; }\n.bi-calendar2-range::before { content: \"\\f207\"; }\n.bi-calendar2-week-fill::before { content: \"\\f208\"; }\n.bi-calendar2-week::before { content: \"\\f209\"; }\n.bi-calendar2-x-fill::before { content: \"\\f20a\"; }\n.bi-calendar2-x::before { content: \"\\f20b\"; }\n.bi-calendar2::before { content: \"\\f20c\"; }\n.bi-calendar3-event-fill::before { content: \"\\f20d\"; }\n.bi-calendar3-event::before { content: \"\\f20e\"; }\n.bi-calendar3-fill::before { content: \"\\f20f\"; }\n.bi-calendar3-range-fill::before { content: \"\\f210\"; }\n.bi-calendar3-range::before { content: \"\\f211\"; }\n.bi-calendar3-week-fill::before { content: \"\\f212\"; }\n.bi-calendar3-week::before { content: \"\\f213\"; }\n.bi-calendar3::before { content: \"\\f214\"; }\n.bi-calendar4-event::before { content: \"\\f215\"; }\n.bi-calendar4-range::before { content: \"\\f216\"; }\n.bi-calendar4-week::before { content: \"\\f217\"; }\n.bi-calendar4::before { content: \"\\f218\"; }\n.bi-camera-fill::before { content: \"\\f219\"; }\n.bi-camera-reels-fill::before { content: \"\\f21a\"; }\n.bi-camera-reels::before { content: \"\\f21b\"; }\n.bi-camera-video-fill::before { content: \"\\f21c\"; }\n.bi-camera-video-off-fill::before { content: \"\\f21d\"; }\n.bi-camera-video-off::before { content: \"\\f21e\"; }\n.bi-camera-video::before { content: \"\\f21f\"; }\n.bi-camera::before { content: \"\\f220\"; }\n.bi-camera2::before { content: \"\\f221\"; }\n.bi-capslock-fill::before { content: \"\\f222\"; }\n.bi-capslock::before { content: \"\\f223\"; }\n.bi-card-checklist::before { content: \"\\f224\"; }\n.bi-card-heading::before { content: \"\\f225\"; }\n.bi-card-image::before { content: \"\\f226\"; }\n.bi-card-list::before { content: \"\\f227\"; }\n.bi-card-text::before { content: \"\\f228\"; }\n.bi-caret-down-fill::before { content: \"\\f229\"; }\n.bi-caret-down-square-fill::before { content: \"\\f22a\"; }\n.bi-caret-down-square::before { content: \"\\f22b\"; }\n.bi-caret-down::before { content: \"\\f22c\"; }\n.bi-caret-left-fill::before { content: \"\\f22d\"; }\n.bi-caret-left-square-fill::before { content: \"\\f22e\"; }\n.bi-caret-left-square::before { content: \"\\f22f\"; }\n.bi-caret-left::before { content: \"\\f230\"; }\n.bi-caret-right-fill::before { content: \"\\f231\"; }\n.bi-caret-right-square-fill::before { content: \"\\f232\"; }\n.bi-caret-right-square::before { content: \"\\f233\"; }\n.bi-caret-right::before { content: \"\\f234\"; }\n.bi-caret-up-fill::before { content: \"\\f235\"; }\n.bi-caret-up-square-fill::before { content: \"\\f236\"; }\n.bi-caret-up-square::before { content: \"\\f237\"; }\n.bi-caret-up::before { content: \"\\f238\"; }\n.bi-cart-check-fill::before { content: \"\\f239\"; }\n.bi-cart-check::before { content: \"\\f23a\"; }\n.bi-cart-dash-fill::before { content: \"\\f23b\"; }\n.bi-cart-dash::before { content: \"\\f23c\"; }\n.bi-cart-fill::before { content: \"\\f23d\"; }\n.bi-cart-plus-fill::before { content: \"\\f23e\"; }\n.bi-cart-plus::before { content: \"\\f23f\"; }\n.bi-cart-x-fill::before { content: \"\\f240\"; }\n.bi-cart-x::before { content: \"\\f241\"; }\n.bi-cart::before { content: \"\\f242\"; }\n.bi-cart2::before { content: \"\\f243\"; }\n.bi-cart3::before { content: \"\\f244\"; }\n.bi-cart4::before { content: \"\\f245\"; }\n.bi-cash-stack::before { content: \"\\f246\"; }\n.bi-cash::before { content: \"\\f247\"; }\n.bi-cast::before { content: \"\\f248\"; }\n.bi-chat-dots-fill::before { content: \"\\f249\"; }\n.bi-chat-dots::before { content: \"\\f24a\"; }\n.bi-chat-fill::before { content: \"\\f24b\"; }\n.bi-chat-left-dots-fill::before { content: \"\\f24c\"; }\n.bi-chat-left-dots::before { content: \"\\f24d\"; }\n.bi-chat-left-fill::before { content: \"\\f24e\"; }\n.bi-chat-left-quote-fill::before { content: \"\\f24f\"; }\n.bi-chat-left-quote::before { content: \"\\f250\"; }\n.bi-chat-left-text-fill::before { content: \"\\f251\"; }\n.bi-chat-left-text::before { content: \"\\f252\"; }\n.bi-chat-left::before { content: \"\\f253\"; }\n.bi-chat-quote-fill::before { content: \"\\f254\"; }\n.bi-chat-quote::before { content: \"\\f255\"; }\n.bi-chat-right-dots-fill::before { content: \"\\f256\"; }\n.bi-chat-right-dots::before { content: \"\\f257\"; }\n.bi-chat-right-fill::before { content: \"\\f258\"; }\n.bi-chat-right-quote-fill::before { content: \"\\f259\"; }\n.bi-chat-right-quote::before { content: \"\\f25a\"; }\n.bi-chat-right-text-fill::before { content: \"\\f25b\"; }\n.bi-chat-right-text::before { content: \"\\f25c\"; }\n.bi-chat-right::before { content: \"\\f25d\"; }\n.bi-chat-square-dots-fill::before { content: \"\\f25e\"; }\n.bi-chat-square-dots::before { content: \"\\f25f\"; }\n.bi-chat-square-fill::before { content: \"\\f260\"; }\n.bi-chat-square-quote-fill::before { content: \"\\f261\"; }\n.bi-chat-square-quote::before { content: \"\\f262\"; }\n.bi-chat-square-text-fill::before { content: \"\\f263\"; }\n.bi-chat-square-text::before { content: \"\\f264\"; }\n.bi-chat-square::before { content: \"\\f265\"; }\n.bi-chat-text-fill::before { content: \"\\f266\"; }\n.bi-chat-text::before { content: \"\\f267\"; }\n.bi-chat::before { content: \"\\f268\"; }\n.bi-check-all::before { content: \"\\f269\"; }\n.bi-check-circle-fill::before { content: \"\\f26a\"; }\n.bi-check-circle::before { content: \"\\f26b\"; }\n.bi-check-square-fill::before { content: \"\\f26c\"; }\n.bi-check-square::before { content: \"\\f26d\"; }\n.bi-check::before { content: \"\\f26e\"; }\n.bi-check2-all::before { content: \"\\f26f\"; }\n.bi-check2-circle::before { content: \"\\f270\"; }\n.bi-check2-square::before { content: \"\\f271\"; }\n.bi-check2::before { content: \"\\f272\"; }\n.bi-chevron-bar-contract::before { content: \"\\f273\"; }\n.bi-chevron-bar-down::before { content: \"\\f274\"; }\n.bi-chevron-bar-expand::before { content: \"\\f275\"; }\n.bi-chevron-bar-left::before { content: \"\\f276\"; }\n.bi-chevron-bar-right::before { content: \"\\f277\"; }\n.bi-chevron-bar-up::before { content: \"\\f278\"; }\n.bi-chevron-compact-down::before { content: \"\\f279\"; }\n.bi-chevron-compact-left::before { content: \"\\f27a\"; }\n.bi-chevron-compact-right::before { content: \"\\f27b\"; }\n.bi-chevron-compact-up::before { content: \"\\f27c\"; }\n.bi-chevron-contract::before { content: \"\\f27d\"; }\n.bi-chevron-double-down::before { content: \"\\f27e\"; }\n.bi-chevron-double-left::before { content: \"\\f27f\"; }\n.bi-chevron-double-right::before { content: \"\\f280\"; }\n.bi-chevron-double-up::before { content: \"\\f281\"; }\n.bi-chevron-down::before { content: \"\\f282\"; }\n.bi-chevron-expand::before { content: \"\\f283\"; }\n.bi-chevron-left::before { content: \"\\f284\"; }\n.bi-chevron-right::before { content: \"\\f285\"; }\n.bi-chevron-up::before { content: \"\\f286\"; }\n.bi-circle-fill::before { content: \"\\f287\"; }\n.bi-circle-half::before { content: \"\\f288\"; }\n.bi-circle-square::before { content: \"\\f289\"; }\n.bi-circle::before { content: \"\\f28a\"; }\n.bi-clipboard-check::before { content: \"\\f28b\"; }\n.bi-clipboard-data::before { content: \"\\f28c\"; }\n.bi-clipboard-minus::before { content: \"\\f28d\"; }\n.bi-clipboard-plus::before { content: \"\\f28e\"; }\n.bi-clipboard-x::before { content: \"\\f28f\"; }\n.bi-clipboard::before { content: \"\\f290\"; }\n.bi-clock-fill::before { content: \"\\f291\"; }\n.bi-clock-history::before { content: \"\\f292\"; }\n.bi-clock::before { content: \"\\f293\"; }\n.bi-cloud-arrow-down-fill::before { content: \"\\f294\"; }\n.bi-cloud-arrow-down::before { content: \"\\f295\"; }\n.bi-cloud-arrow-up-fill::before { content: \"\\f296\"; }\n.bi-cloud-arrow-up::before { content: \"\\f297\"; }\n.bi-cloud-check-fill::before { content: \"\\f298\"; }\n.bi-cloud-check::before { content: \"\\f299\"; }\n.bi-cloud-download-fill::before { content: \"\\f29a\"; }\n.bi-cloud-download::before { content: \"\\f29b\"; }\n.bi-cloud-drizzle-fill::before { content: \"\\f29c\"; }\n.bi-cloud-drizzle::before { content: \"\\f29d\"; }\n.bi-cloud-fill::before { content: \"\\f29e\"; }\n.bi-cloud-fog-fill::before { content: \"\\f29f\"; }\n.bi-cloud-fog::before { content: \"\\f2a0\"; }\n.bi-cloud-fog2-fill::before { content: \"\\f2a1\"; }\n.bi-cloud-fog2::before { content: \"\\f2a2\"; }\n.bi-cloud-hail-fill::before { content: \"\\f2a3\"; }\n.bi-cloud-hail::before { content: \"\\f2a4\"; }\n.bi-cloud-haze-fill::before { content: \"\\f2a6\"; }\n.bi-cloud-haze::before { content: \"\\f2a7\"; }\n.bi-cloud-haze2-fill::before { content: \"\\f2a8\"; }\n.bi-cloud-lightning-fill::before { content: \"\\f2a9\"; }\n.bi-cloud-lightning-rain-fill::before { content: \"\\f2aa\"; }\n.bi-cloud-lightning-rain::before { content: \"\\f2ab\"; }\n.bi-cloud-lightning::before { content: \"\\f2ac\"; }\n.bi-cloud-minus-fill::before { content: \"\\f2ad\"; }\n.bi-cloud-minus::before { content: \"\\f2ae\"; }\n.bi-cloud-moon-fill::before { content: \"\\f2af\"; }\n.bi-cloud-moon::before { content: \"\\f2b0\"; }\n.bi-cloud-plus-fill::before { content: \"\\f2b1\"; }\n.bi-cloud-plus::before { content: \"\\f2b2\"; }\n.bi-cloud-rain-fill::before { content: \"\\f2b3\"; }\n.bi-cloud-rain-heavy-fill::before { content: \"\\f2b4\"; }\n.bi-cloud-rain-heavy::before { content: \"\\f2b5\"; }\n.bi-cloud-rain::before { content: \"\\f2b6\"; }\n.bi-cloud-slash-fill::before { content: \"\\f2b7\"; }\n.bi-cloud-slash::before { content: \"\\f2b8\"; }\n.bi-cloud-sleet-fill::before { content: \"\\f2b9\"; }\n.bi-cloud-sleet::before { content: \"\\f2ba\"; }\n.bi-cloud-snow-fill::before { content: \"\\f2bb\"; }\n.bi-cloud-snow::before { content: \"\\f2bc\"; }\n.bi-cloud-sun-fill::before { content: \"\\f2bd\"; }\n.bi-cloud-sun::before { content: \"\\f2be\"; }\n.bi-cloud-upload-fill::before { content: \"\\f2bf\"; }\n.bi-cloud-upload::before { content: \"\\f2c0\"; }\n.bi-cloud::before { content: \"\\f2c1\"; }\n.bi-clouds-fill::before { content: \"\\f2c2\"; }\n.bi-clouds::before { content: \"\\f2c3\"; }\n.bi-cloudy-fill::before { content: \"\\f2c4\"; }\n.bi-cloudy::before { content: \"\\f2c5\"; }\n.bi-code-slash::before { content: \"\\f2c6\"; }\n.bi-code-square::before { content: \"\\f2c7\"; }\n.bi-code::before { content: \"\\f2c8\"; }\n.bi-collection-fill::before { content: \"\\f2c9\"; }\n.bi-collection-play-fill::before { content: \"\\f2ca\"; }\n.bi-collection-play::before { content: \"\\f2cb\"; }\n.bi-collection::before { content: \"\\f2cc\"; }\n.bi-columns-gap::before { content: \"\\f2cd\"; }\n.bi-columns::before { content: \"\\f2ce\"; }\n.bi-command::before { content: \"\\f2cf\"; }\n.bi-compass-fill::before { content: \"\\f2d0\"; }\n.bi-compass::before { content: \"\\f2d1\"; }\n.bi-cone-striped::before { content: \"\\f2d2\"; }\n.bi-cone::before { content: \"\\f2d3\"; }\n.bi-controller::before { content: \"\\f2d4\"; }\n.bi-cpu-fill::before { content: \"\\f2d5\"; }\n.bi-cpu::before { content: \"\\f2d6\"; }\n.bi-credit-card-2-back-fill::before { content: \"\\f2d7\"; }\n.bi-credit-card-2-back::before { content: \"\\f2d8\"; }\n.bi-credit-card-2-front-fill::before { content: \"\\f2d9\"; }\n.bi-credit-card-2-front::before { content: \"\\f2da\"; }\n.bi-credit-card-fill::before { content: \"\\f2db\"; }\n.bi-credit-card::before { content: \"\\f2dc\"; }\n.bi-crop::before { content: \"\\f2dd\"; }\n.bi-cup-fill::before { content: \"\\f2de\"; }\n.bi-cup-straw::before { content: \"\\f2df\"; }\n.bi-cup::before { content: \"\\f2e0\"; }\n.bi-cursor-fill::before { content: \"\\f2e1\"; }\n.bi-cursor-text::before { content: \"\\f2e2\"; }\n.bi-cursor::before { content: \"\\f2e3\"; }\n.bi-dash-circle-dotted::before { content: \"\\f2e4\"; }\n.bi-dash-circle-fill::before { content: \"\\f2e5\"; }\n.bi-dash-circle::before { content: \"\\f2e6\"; }\n.bi-dash-square-dotted::before { content: \"\\f2e7\"; }\n.bi-dash-square-fill::before { content: \"\\f2e8\"; }\n.bi-dash-square::before { content: \"\\f2e9\"; }\n.bi-dash::before { content: \"\\f2ea\"; }\n.bi-diagram-2-fill::before { content: \"\\f2eb\"; }\n.bi-diagram-2::before { content: \"\\f2ec\"; }\n.bi-diagram-3-fill::before { content: \"\\f2ed\"; }\n.bi-diagram-3::before { content: \"\\f2ee\"; }\n.bi-diamond-fill::before { content: \"\\f2ef\"; }\n.bi-diamond-half::before { content: \"\\f2f0\"; }\n.bi-diamond::before { content: \"\\f2f1\"; }\n.bi-dice-1-fill::before { content: \"\\f2f2\"; }\n.bi-dice-1::before { content: \"\\f2f3\"; }\n.bi-dice-2-fill::before { content: \"\\f2f4\"; }\n.bi-dice-2::before { content: \"\\f2f5\"; }\n.bi-dice-3-fill::before { content: \"\\f2f6\"; }\n.bi-dice-3::before { content: \"\\f2f7\"; }\n.bi-dice-4-fill::before { content: \"\\f2f8\"; }\n.bi-dice-4::before { content: \"\\f2f9\"; }\n.bi-dice-5-fill::before { content: \"\\f2fa\"; }\n.bi-dice-5::before { content: \"\\f2fb\"; }\n.bi-dice-6-fill::before { content: \"\\f2fc\"; }\n.bi-dice-6::before { content: \"\\f2fd\"; }\n.bi-disc-fill::before { content: \"\\f2fe\"; }\n.bi-disc::before { content: \"\\f2ff\"; }\n.bi-discord::before { content: \"\\f300\"; }\n.bi-display-fill::before { content: \"\\f301\"; }\n.bi-display::before { content: \"\\f302\"; }\n.bi-distribute-horizontal::before { content: \"\\f303\"; }\n.bi-distribute-vertical::before { content: \"\\f304\"; }\n.bi-door-closed-fill::before { content: \"\\f305\"; }\n.bi-door-closed::before { content: \"\\f306\"; }\n.bi-door-open-fill::before { content: \"\\f307\"; }\n.bi-door-open::before { content: \"\\f308\"; }\n.bi-dot::before { content: \"\\f309\"; }\n.bi-download::before { content: \"\\f30a\"; }\n.bi-droplet-fill::before { content: \"\\f30b\"; }\n.bi-droplet-half::before { content: \"\\f30c\"; }\n.bi-droplet::before { content: \"\\f30d\"; }\n.bi-earbuds::before { content: \"\\f30e\"; }\n.bi-easel-fill::before { content: \"\\f30f\"; }\n.bi-easel::before { content: \"\\f310\"; }\n.bi-egg-fill::before { content: \"\\f311\"; }\n.bi-egg-fried::before { content: \"\\f312\"; }\n.bi-egg::before { content: \"\\f313\"; }\n.bi-eject-fill::before { content: \"\\f314\"; }\n.bi-eject::before { content: \"\\f315\"; }\n.bi-emoji-angry-fill::before { content: \"\\f316\"; }\n.bi-emoji-angry::before { content: \"\\f317\"; }\n.bi-emoji-dizzy-fill::before { content: \"\\f318\"; }\n.bi-emoji-dizzy::before { content: \"\\f319\"; }\n.bi-emoji-expressionless-fill::before { content: \"\\f31a\"; }\n.bi-emoji-expressionless::before { content: \"\\f31b\"; }\n.bi-emoji-frown-fill::before { content: \"\\f31c\"; }\n.bi-emoji-frown::before { content: \"\\f31d\"; }\n.bi-emoji-heart-eyes-fill::before { content: \"\\f31e\"; }\n.bi-emoji-heart-eyes::before { content: \"\\f31f\"; }\n.bi-emoji-laughing-fill::before { content: \"\\f320\"; }\n.bi-emoji-laughing::before { content: \"\\f321\"; }\n.bi-emoji-neutral-fill::before { content: \"\\f322\"; }\n.bi-emoji-neutral::before { content: \"\\f323\"; }\n.bi-emoji-smile-fill::before { content: \"\\f324\"; }\n.bi-emoji-smile-upside-down-fill::before { content: \"\\f325\"; }\n.bi-emoji-smile-upside-down::before { content: \"\\f326\"; }\n.bi-emoji-smile::before { content: \"\\f327\"; }\n.bi-emoji-sunglasses-fill::before { content: \"\\f328\"; }\n.bi-emoji-sunglasses::before { content: \"\\f329\"; }\n.bi-emoji-wink-fill::before { content: \"\\f32a\"; }\n.bi-emoji-wink::before { content: \"\\f32b\"; }\n.bi-envelope-fill::before { content: \"\\f32c\"; }\n.bi-envelope-open-fill::before { content: \"\\f32d\"; }\n.bi-envelope-open::before { content: \"\\f32e\"; }\n.bi-envelope::before { content: \"\\f32f\"; }\n.bi-eraser-fill::before { content: \"\\f330\"; }\n.bi-eraser::before { content: \"\\f331\"; }\n.bi-exclamation-circle-fill::before { content: \"\\f332\"; }\n.bi-exclamation-circle::before { content: \"\\f333\"; }\n.bi-exclamation-diamond-fill::before { content: \"\\f334\"; }\n.bi-exclamation-diamond::before { content: \"\\f335\"; }\n.bi-exclamation-octagon-fill::before { content: \"\\f336\"; }\n.bi-exclamation-octagon::before { content: \"\\f337\"; }\n.bi-exclamation-square-fill::before { content: \"\\f338\"; }\n.bi-exclamation-square::before { content: \"\\f339\"; }\n.bi-exclamation-triangle-fill::before { content: \"\\f33a\"; }\n.bi-exclamation-triangle::before { content: \"\\f33b\"; }\n.bi-exclamation::before { content: \"\\f33c\"; }\n.bi-exclude::before { content: \"\\f33d\"; }\n.bi-eye-fill::before { content: \"\\f33e\"; }\n.bi-eye-slash-fill::before { content: \"\\f33f\"; }\n.bi-eye-slash::before { content: \"\\f340\"; }\n.bi-eye::before { content: \"\\f341\"; }\n.bi-eyedropper::before { content: \"\\f342\"; }\n.bi-eyeglasses::before { content: \"\\f343\"; }\n.bi-facebook::before { content: \"\\f344\"; }\n.bi-file-arrow-down-fill::before { content: \"\\f345\"; }\n.bi-file-arrow-down::before { content: \"\\f346\"; }\n.bi-file-arrow-up-fill::before { content: \"\\f347\"; }\n.bi-file-arrow-up::before { content: \"\\f348\"; }\n.bi-file-bar-graph-fill::before { content: \"\\f349\"; }\n.bi-file-bar-graph::before { content: \"\\f34a\"; }\n.bi-file-binary-fill::before { content: \"\\f34b\"; }\n.bi-file-binary::before { content: \"\\f34c\"; }\n.bi-file-break-fill::before { content: \"\\f34d\"; }\n.bi-file-break::before { content: \"\\f34e\"; }\n.bi-file-check-fill::before { content: \"\\f34f\"; }\n.bi-file-check::before { content: \"\\f350\"; }\n.bi-file-code-fill::before { content: \"\\f351\"; }\n.bi-file-code::before { content: \"\\f352\"; }\n.bi-file-diff-fill::before { content: \"\\f353\"; }\n.bi-file-diff::before { content: \"\\f354\"; }\n.bi-file-earmark-arrow-down-fill::before { content: \"\\f355\"; }\n.bi-file-earmark-arrow-down::before { content: \"\\f356\"; }\n.bi-file-earmark-arrow-up-fill::before { content: \"\\f357\"; }\n.bi-file-earmark-arrow-up::before { content: \"\\f358\"; }\n.bi-file-earmark-bar-graph-fill::before { content: \"\\f359\"; }\n.bi-file-earmark-bar-graph::before { content: \"\\f35a\"; }\n.bi-file-earmark-binary-fill::before { content: \"\\f35b\"; }\n.bi-file-earmark-binary::before { content: \"\\f35c\"; }\n.bi-file-earmark-break-fill::before { content: \"\\f35d\"; }\n.bi-file-earmark-break::before { content: \"\\f35e\"; }\n.bi-file-earmark-check-fill::before { content: \"\\f35f\"; }\n.bi-file-earmark-check::before { content: \"\\f360\"; }\n.bi-file-earmark-code-fill::before { content: \"\\f361\"; }\n.bi-file-earmark-code::before { content: \"\\f362\"; }\n.bi-file-earmark-diff-fill::before { content: \"\\f363\"; }\n.bi-file-earmark-diff::before { content: \"\\f364\"; }\n.bi-file-earmark-easel-fill::before { content: \"\\f365\"; }\n.bi-file-earmark-easel::before { content: \"\\f366\"; }\n.bi-file-earmark-excel-fill::before { content: \"\\f367\"; }\n.bi-file-earmark-excel::before { content: \"\\f368\"; }\n.bi-file-earmark-fill::before { content: \"\\f369\"; }\n.bi-file-earmark-font-fill::before { content: \"\\f36a\"; }\n.bi-file-earmark-font::before { content: \"\\f36b\"; }\n.bi-file-earmark-image-fill::before { content: \"\\f36c\"; }\n.bi-file-earmark-image::before { content: \"\\f36d\"; }\n.bi-file-earmark-lock-fill::before { content: \"\\f36e\"; }\n.bi-file-earmark-lock::before { content: \"\\f36f\"; }\n.bi-file-earmark-lock2-fill::before { content: \"\\f370\"; }\n.bi-file-earmark-lock2::before { content: \"\\f371\"; }\n.bi-file-earmark-medical-fill::before { content: \"\\f372\"; }\n.bi-file-earmark-medical::before { content: \"\\f373\"; }\n.bi-file-earmark-minus-fill::before { content: \"\\f374\"; }\n.bi-file-earmark-minus::before { content: \"\\f375\"; }\n.bi-file-earmark-music-fill::before { content: \"\\f376\"; }\n.bi-file-earmark-music::before { content: \"\\f377\"; }\n.bi-file-earmark-person-fill::before { content: \"\\f378\"; }\n.bi-file-earmark-person::before { content: \"\\f379\"; }\n.bi-file-earmark-play-fill::before { content: \"\\f37a\"; }\n.bi-file-earmark-play::before { content: \"\\f37b\"; }\n.bi-file-earmark-plus-fill::before { content: \"\\f37c\"; }\n.bi-file-earmark-plus::before { content: \"\\f37d\"; }\n.bi-file-earmark-post-fill::before { content: \"\\f37e\"; }\n.bi-file-earmark-post::before { content: \"\\f37f\"; }\n.bi-file-earmark-ppt-fill::before { content: \"\\f380\"; }\n.bi-file-earmark-ppt::before { content: \"\\f381\"; }\n.bi-file-earmark-richtext-fill::before { content: \"\\f382\"; }\n.bi-file-earmark-richtext::before { content: \"\\f383\"; }\n.bi-file-earmark-ruled-fill::before { content: \"\\f384\"; }\n.bi-file-earmark-ruled::before { content: \"\\f385\"; }\n.bi-file-earmark-slides-fill::before { content: \"\\f386\"; }\n.bi-file-earmark-slides::before { content: \"\\f387\"; }\n.bi-file-earmark-spreadsheet-fill::before { content: \"\\f388\"; }\n.bi-file-earmark-spreadsheet::before { content: \"\\f389\"; }\n.bi-file-earmark-text-fill::before { content: \"\\f38a\"; }\n.bi-file-earmark-text::before { content: \"\\f38b\"; }\n.bi-file-earmark-word-fill::before { content: \"\\f38c\"; }\n.bi-file-earmark-word::before { content: \"\\f38d\"; }\n.bi-file-earmark-x-fill::before { content: \"\\f38e\"; }\n.bi-file-earmark-x::before { content: \"\\f38f\"; }\n.bi-file-earmark-zip-fill::before { content: \"\\f390\"; }\n.bi-file-earmark-zip::before { content: \"\\f391\"; }\n.bi-file-earmark::before { content: \"\\f392\"; }\n.bi-file-easel-fill::before { content: \"\\f393\"; }\n.bi-file-easel::before { content: \"\\f394\"; }\n.bi-file-excel-fill::before { content: \"\\f395\"; }\n.bi-file-excel::before { content: \"\\f396\"; }\n.bi-file-fill::before { content: \"\\f397\"; }\n.bi-file-font-fill::before { content: \"\\f398\"; }\n.bi-file-font::before { content: \"\\f399\"; }\n.bi-file-image-fill::before { content: \"\\f39a\"; }\n.bi-file-image::before { content: \"\\f39b\"; }\n.bi-file-lock-fill::before { content: \"\\f39c\"; }\n.bi-file-lock::before { content: \"\\f39d\"; }\n.bi-file-lock2-fill::before { content: \"\\f39e\"; }\n.bi-file-lock2::before { content: \"\\f39f\"; }\n.bi-file-medical-fill::before { content: \"\\f3a0\"; }\n.bi-file-medical::before { content: \"\\f3a1\"; }\n.bi-file-minus-fill::before { content: \"\\f3a2\"; }\n.bi-file-minus::before { content: \"\\f3a3\"; }\n.bi-file-music-fill::before { content: \"\\f3a4\"; }\n.bi-file-music::before { content: \"\\f3a5\"; }\n.bi-file-person-fill::before { content: \"\\f3a6\"; }\n.bi-file-person::before { content: \"\\f3a7\"; }\n.bi-file-play-fill::before { content: \"\\f3a8\"; }\n.bi-file-play::before { content: \"\\f3a9\"; }\n.bi-file-plus-fill::before { content: \"\\f3aa\"; }\n.bi-file-plus::before { content: \"\\f3ab\"; }\n.bi-file-post-fill::before { content: \"\\f3ac\"; }\n.bi-file-post::before { content: \"\\f3ad\"; }\n.bi-file-ppt-fill::before { content: \"\\f3ae\"; }\n.bi-file-ppt::before { content: \"\\f3af\"; }\n.bi-file-richtext-fill::before { content: \"\\f3b0\"; }\n.bi-file-richtext::before { content: \"\\f3b1\"; }\n.bi-file-ruled-fill::before { content: \"\\f3b2\"; }\n.bi-file-ruled::before { content: \"\\f3b3\"; }\n.bi-file-slides-fill::before { content: \"\\f3b4\"; }\n.bi-file-slides::before { content: \"\\f3b5\"; }\n.bi-file-spreadsheet-fill::before { content: \"\\f3b6\"; }\n.bi-file-spreadsheet::before { content: \"\\f3b7\"; }\n.bi-file-text-fill::before { content: \"\\f3b8\"; }\n.bi-file-text::before { content: \"\\f3b9\"; }\n.bi-file-word-fill::before { content: \"\\f3ba\"; }\n.bi-file-word::before { content: \"\\f3bb\"; }\n.bi-file-x-fill::before { content: \"\\f3bc\"; }\n.bi-file-x::before { content: \"\\f3bd\"; }\n.bi-file-zip-fill::before { content: \"\\f3be\"; }\n.bi-file-zip::before { content: \"\\f3bf\"; }\n.bi-file::before { content: \"\\f3c0\"; }\n.bi-files-alt::before { content: \"\\f3c1\"; }\n.bi-files::before { content: \"\\f3c2\"; }\n.bi-film::before { content: \"\\f3c3\"; }\n.bi-filter-circle-fill::before { content: \"\\f3c4\"; }\n.bi-filter-circle::before { content: \"\\f3c5\"; }\n.bi-filter-left::before { content: \"\\f3c6\"; }\n.bi-filter-right::before { content: \"\\f3c7\"; }\n.bi-filter-square-fill::before { content: \"\\f3c8\"; }\n.bi-filter-square::before { content: \"\\f3c9\"; }\n.bi-filter::before { content: \"\\f3ca\"; }\n.bi-flag-fill::before { content: \"\\f3cb\"; }\n.bi-flag::before { content: \"\\f3cc\"; }\n.bi-flower1::before { content: \"\\f3cd\"; }\n.bi-flower2::before { content: \"\\f3ce\"; }\n.bi-flower3::before { content: \"\\f3cf\"; }\n.bi-folder-check::before { content: \"\\f3d0\"; }\n.bi-folder-fill::before { content: \"\\f3d1\"; }\n.bi-folder-minus::before { content: \"\\f3d2\"; }\n.bi-folder-plus::before { content: \"\\f3d3\"; }\n.bi-folder-symlink-fill::before { content: \"\\f3d4\"; }\n.bi-folder-symlink::before { content: \"\\f3d5\"; }\n.bi-folder-x::before { content: \"\\f3d6\"; }\n.bi-folder::before { content: \"\\f3d7\"; }\n.bi-folder2-open::before { content: \"\\f3d8\"; }\n.bi-folder2::before { content: \"\\f3d9\"; }\n.bi-fonts::before { content: \"\\f3da\"; }\n.bi-forward-fill::before { content: \"\\f3db\"; }\n.bi-forward::before { content: \"\\f3dc\"; }\n.bi-front::before { content: \"\\f3dd\"; }\n.bi-fullscreen-exit::before { content: \"\\f3de\"; }\n.bi-fullscreen::before { content: \"\\f3df\"; }\n.bi-funnel-fill::before { content: \"\\f3e0\"; }\n.bi-funnel::before { content: \"\\f3e1\"; }\n.bi-gear-fill::before { content: \"\\f3e2\"; }\n.bi-gear-wide-connected::before { content: \"\\f3e3\"; }\n.bi-gear-wide::before { content: \"\\f3e4\"; }\n.bi-gear::before { content: \"\\f3e5\"; }\n.bi-gem::before { content: \"\\f3e6\"; }\n.bi-geo-alt-fill::before { content: \"\\f3e7\"; }\n.bi-geo-alt::before { content: \"\\f3e8\"; }\n.bi-geo-fill::before { content: \"\\f3e9\"; }\n.bi-geo::before { content: \"\\f3ea\"; }\n.bi-gift-fill::before { content: \"\\f3eb\"; }\n.bi-gift::before { content: \"\\f3ec\"; }\n.bi-github::before { content: \"\\f3ed\"; }\n.bi-globe::before { content: \"\\f3ee\"; }\n.bi-globe2::before { content: \"\\f3ef\"; }\n.bi-google::before { content: \"\\f3f0\"; }\n.bi-graph-down::before { content: \"\\f3f1\"; }\n.bi-graph-up::before { content: \"\\f3f2\"; }\n.bi-grid-1x2-fill::before { content: \"\\f3f3\"; }\n.bi-grid-1x2::before { content: \"\\f3f4\"; }\n.bi-grid-3x2-gap-fill::before { content: \"\\f3f5\"; }\n.bi-grid-3x2-gap::before { content: \"\\f3f6\"; }\n.bi-grid-3x2::before { content: \"\\f3f7\"; }\n.bi-grid-3x3-gap-fill::before { content: \"\\f3f8\"; }\n.bi-grid-3x3-gap::before { content: \"\\f3f9\"; }\n.bi-grid-3x3::before { content: \"\\f3fa\"; }\n.bi-grid-fill::before { content: \"\\f3fb\"; }\n.bi-grid::before { content: \"\\f3fc\"; }\n.bi-grip-horizontal::before { content: \"\\f3fd\"; }\n.bi-grip-vertical::before { content: \"\\f3fe\"; }\n.bi-hammer::before { content: \"\\f3ff\"; }\n.bi-hand-index-fill::before { content: \"\\f400\"; }\n.bi-hand-index-thumb-fill::before { content: \"\\f401\"; }\n.bi-hand-index-thumb::before { content: \"\\f402\"; }\n.bi-hand-index::before { content: \"\\f403\"; }\n.bi-hand-thumbs-down-fill::before { content: \"\\f404\"; }\n.bi-hand-thumbs-down::before { content: \"\\f405\"; }\n.bi-hand-thumbs-up-fill::before { content: \"\\f406\"; }\n.bi-hand-thumbs-up::before { content: \"\\f407\"; }\n.bi-handbag-fill::before { content: \"\\f408\"; }\n.bi-handbag::before { content: \"\\f409\"; }\n.bi-hash::before { content: \"\\f40a\"; }\n.bi-hdd-fill::before { content: \"\\f40b\"; }\n.bi-hdd-network-fill::before { content: \"\\f40c\"; }\n.bi-hdd-network::before { content: \"\\f40d\"; }\n.bi-hdd-rack-fill::before { content: \"\\f40e\"; }\n.bi-hdd-rack::before { content: \"\\f40f\"; }\n.bi-hdd-stack-fill::before { content: \"\\f410\"; }\n.bi-hdd-stack::before { content: \"\\f411\"; }\n.bi-hdd::before { content: \"\\f412\"; }\n.bi-headphones::before { content: \"\\f413\"; }\n.bi-headset::before { content: \"\\f414\"; }\n.bi-heart-fill::before { content: \"\\f415\"; }\n.bi-heart-half::before { content: \"\\f416\"; }\n.bi-heart::before { content: \"\\f417\"; }\n.bi-heptagon-fill::before { content: \"\\f418\"; }\n.bi-heptagon-half::before { content: \"\\f419\"; }\n.bi-heptagon::before { content: \"\\f41a\"; }\n.bi-hexagon-fill::before { content: \"\\f41b\"; }\n.bi-hexagon-half::before { content: \"\\f41c\"; }\n.bi-hexagon::before { content: \"\\f41d\"; }\n.bi-hourglass-bottom::before { content: \"\\f41e\"; }\n.bi-hourglass-split::before { content: \"\\f41f\"; }\n.bi-hourglass-top::before { content: \"\\f420\"; }\n.bi-hourglass::before { content: \"\\f421\"; }\n.bi-house-door-fill::before { content: \"\\f422\"; }\n.bi-house-door::before { content: \"\\f423\"; }\n.bi-house-fill::before { content: \"\\f424\"; }\n.bi-house::before { content: \"\\f425\"; }\n.bi-hr::before { content: \"\\f426\"; }\n.bi-hurricane::before { content: \"\\f427\"; }\n.bi-image-alt::before { content: \"\\f428\"; }\n.bi-image-fill::before { content: \"\\f429\"; }\n.bi-image::before { content: \"\\f42a\"; }\n.bi-images::before { content: \"\\f42b\"; }\n.bi-inbox-fill::before { content: \"\\f42c\"; }\n.bi-inbox::before { content: \"\\f42d\"; }\n.bi-inboxes-fill::before { content: \"\\f42e\"; }\n.bi-inboxes::before { content: \"\\f42f\"; }\n.bi-info-circle-fill::before { content: \"\\f430\"; }\n.bi-info-circle::before { content: \"\\f431\"; }\n.bi-info-square-fill::before { content: \"\\f432\"; }\n.bi-info-square::before { content: \"\\f433\"; }\n.bi-info::before { content: \"\\f434\"; }\n.bi-input-cursor-text::before { content: \"\\f435\"; }\n.bi-input-cursor::before { content: \"\\f436\"; }\n.bi-instagram::before { content: \"\\f437\"; }\n.bi-intersect::before { content: \"\\f438\"; }\n.bi-journal-album::before { content: \"\\f439\"; }\n.bi-journal-arrow-down::before { content: \"\\f43a\"; }\n.bi-journal-arrow-up::before { content: \"\\f43b\"; }\n.bi-journal-bookmark-fill::before { content: \"\\f43c\"; }\n.bi-journal-bookmark::before { content: \"\\f43d\"; }\n.bi-journal-check::before { content: \"\\f43e\"; }\n.bi-journal-code::before { content: \"\\f43f\"; }\n.bi-journal-medical::before { content: \"\\f440\"; }\n.bi-journal-minus::before { content: \"\\f441\"; }\n.bi-journal-plus::before { content: \"\\f442\"; }\n.bi-journal-richtext::before { content: \"\\f443\"; }\n.bi-journal-text::before { content: \"\\f444\"; }\n.bi-journal-x::before { content: \"\\f445\"; }\n.bi-journal::before { content: \"\\f446\"; }\n.bi-journals::before { content: \"\\f447\"; }\n.bi-joystick::before { content: \"\\f448\"; }\n.bi-justify-left::before { content: \"\\f449\"; }\n.bi-justify-right::before { content: \"\\f44a\"; }\n.bi-justify::before { content: \"\\f44b\"; }\n.bi-kanban-fill::before { content: \"\\f44c\"; }\n.bi-kanban::before { content: \"\\f44d\"; }\n.bi-key-fill::before { content: \"\\f44e\"; }\n.bi-key::before { content: \"\\f44f\"; }\n.bi-keyboard-fill::before { content: \"\\f450\"; }\n.bi-keyboard::before { content: \"\\f451\"; }\n.bi-ladder::before { content: \"\\f452\"; }\n.bi-lamp-fill::before { content: \"\\f453\"; }\n.bi-lamp::before { content: \"\\f454\"; }\n.bi-laptop-fill::before { content: \"\\f455\"; }\n.bi-laptop::before { content: \"\\f456\"; }\n.bi-layer-backward::before { content: \"\\f457\"; }\n.bi-layer-forward::before { content: \"\\f458\"; }\n.bi-layers-fill::before { content: \"\\f459\"; }\n.bi-layers-half::before { content: \"\\f45a\"; }\n.bi-layers::before { content: \"\\f45b\"; }\n.bi-layout-sidebar-inset-reverse::before { content: \"\\f45c\"; }\n.bi-layout-sidebar-inset::before { content: \"\\f45d\"; }\n.bi-layout-sidebar-reverse::before { content: \"\\f45e\"; }\n.bi-layout-sidebar::before { content: \"\\f45f\"; }\n.bi-layout-split::before { content: \"\\f460\"; }\n.bi-layout-text-sidebar-reverse::before { content: \"\\f461\"; }\n.bi-layout-text-sidebar::before { content: \"\\f462\"; }\n.bi-layout-text-window-reverse::before { content: \"\\f463\"; }\n.bi-layout-text-window::before { content: \"\\f464\"; }\n.bi-layout-three-columns::before { content: \"\\f465\"; }\n.bi-layout-wtf::before { content: \"\\f466\"; }\n.bi-life-preserver::before { content: \"\\f467\"; }\n.bi-lightbulb-fill::before { content: \"\\f468\"; }\n.bi-lightbulb-off-fill::before { content: \"\\f469\"; }\n.bi-lightbulb-off::before { content: \"\\f46a\"; }\n.bi-lightbulb::before { content: \"\\f46b\"; }\n.bi-lightning-charge-fill::before { content: \"\\f46c\"; }\n.bi-lightning-charge::before { content: \"\\f46d\"; }\n.bi-lightning-fill::before { content: \"\\f46e\"; }\n.bi-lightning::before { content: \"\\f46f\"; }\n.bi-link-45deg::before { content: \"\\f470\"; }\n.bi-link::before { content: \"\\f471\"; }\n.bi-linkedin::before { content: \"\\f472\"; }\n.bi-list-check::before { content: \"\\f473\"; }\n.bi-list-nested::before { content: \"\\f474\"; }\n.bi-list-ol::before { content: \"\\f475\"; }\n.bi-list-stars::before { content: \"\\f476\"; }\n.bi-list-task::before { content: \"\\f477\"; }\n.bi-list-ul::before { content: \"\\f478\"; }\n.bi-list::before { content: \"\\f479\"; }\n.bi-lock-fill::before { content: \"\\f47a\"; }\n.bi-lock::before { content: \"\\f47b\"; }\n.bi-mailbox::before { content: \"\\f47c\"; }\n.bi-mailbox2::before { content: \"\\f47d\"; }\n.bi-map-fill::before { content: \"\\f47e\"; }\n.bi-map::before { content: \"\\f47f\"; }\n.bi-markdown-fill::before { content: \"\\f480\"; }\n.bi-markdown::before { content: \"\\f481\"; }\n.bi-mask::before { content: \"\\f482\"; }\n.bi-megaphone-fill::before { content: \"\\f483\"; }\n.bi-megaphone::before { content: \"\\f484\"; }\n.bi-menu-app-fill::before { content: \"\\f485\"; }\n.bi-menu-app::before { content: \"\\f486\"; }\n.bi-menu-button-fill::before { content: \"\\f487\"; }\n.bi-menu-button-wide-fill::before { content: \"\\f488\"; }\n.bi-menu-button-wide::before { content: \"\\f489\"; }\n.bi-menu-button::before { content: \"\\f48a\"; }\n.bi-menu-down::before { content: \"\\f48b\"; }\n.bi-menu-up::before { content: \"\\f48c\"; }\n.bi-mic-fill::before { content: \"\\f48d\"; }\n.bi-mic-mute-fill::before { content: \"\\f48e\"; }\n.bi-mic-mute::before { content: \"\\f48f\"; }\n.bi-mic::before { content: \"\\f490\"; }\n.bi-minecart-loaded::before { content: \"\\f491\"; }\n.bi-minecart::before { content: \"\\f492\"; }\n.bi-moisture::before { content: \"\\f493\"; }\n.bi-moon-fill::before { content: \"\\f494\"; }\n.bi-moon-stars-fill::before { content: \"\\f495\"; }\n.bi-moon-stars::before { content: \"\\f496\"; }\n.bi-moon::before { content: \"\\f497\"; }\n.bi-mouse-fill::before { content: \"\\f498\"; }\n.bi-mouse::before { content: \"\\f499\"; }\n.bi-mouse2-fill::before { content: \"\\f49a\"; }\n.bi-mouse2::before { content: \"\\f49b\"; }\n.bi-mouse3-fill::before { content: \"\\f49c\"; }\n.bi-mouse3::before { content: \"\\f49d\"; }\n.bi-music-note-beamed::before { content: \"\\f49e\"; }\n.bi-music-note-list::before { content: \"\\f49f\"; }\n.bi-music-note::before { content: \"\\f4a0\"; }\n.bi-music-player-fill::before { content: \"\\f4a1\"; }\n.bi-music-player::before { content: \"\\f4a2\"; }\n.bi-newspaper::before { content: \"\\f4a3\"; }\n.bi-node-minus-fill::before { content: \"\\f4a4\"; }\n.bi-node-minus::before { content: \"\\f4a5\"; }\n.bi-node-plus-fill::before { content: \"\\f4a6\"; }\n.bi-node-plus::before { content: \"\\f4a7\"; }\n.bi-nut-fill::before { content: \"\\f4a8\"; }\n.bi-nut::before { content: \"\\f4a9\"; }\n.bi-octagon-fill::before { content: \"\\f4aa\"; }\n.bi-octagon-half::before { content: \"\\f4ab\"; }\n.bi-octagon::before { content: \"\\f4ac\"; }\n.bi-option::before { content: \"\\f4ad\"; }\n.bi-outlet::before { content: \"\\f4ae\"; }\n.bi-paint-bucket::before { content: \"\\f4af\"; }\n.bi-palette-fill::before { content: \"\\f4b0\"; }\n.bi-palette::before { content: \"\\f4b1\"; }\n.bi-palette2::before { content: \"\\f4b2\"; }\n.bi-paperclip::before { content: \"\\f4b3\"; }\n.bi-paragraph::before { content: \"\\f4b4\"; }\n.bi-patch-check-fill::before { content: \"\\f4b5\"; }\n.bi-patch-check::before { content: \"\\f4b6\"; }\n.bi-patch-exclamation-fill::before { content: \"\\f4b7\"; }\n.bi-patch-exclamation::before { content: \"\\f4b8\"; }\n.bi-patch-minus-fill::before { content: \"\\f4b9\"; }\n.bi-patch-minus::before { content: \"\\f4ba\"; }\n.bi-patch-plus-fill::before { content: \"\\f4bb\"; }\n.bi-patch-plus::before { content: \"\\f4bc\"; }\n.bi-patch-question-fill::before { content: \"\\f4bd\"; }\n.bi-patch-question::before { content: \"\\f4be\"; }\n.bi-pause-btn-fill::before { content: \"\\f4bf\"; }\n.bi-pause-btn::before { content: \"\\f4c0\"; }\n.bi-pause-circle-fill::before { content: \"\\f4c1\"; }\n.bi-pause-circle::before { content: \"\\f4c2\"; }\n.bi-pause-fill::before { content: \"\\f4c3\"; }\n.bi-pause::before { content: \"\\f4c4\"; }\n.bi-peace-fill::before { content: \"\\f4c5\"; }\n.bi-peace::before { content: \"\\f4c6\"; }\n.bi-pen-fill::before { content: \"\\f4c7\"; }\n.bi-pen::before { content: \"\\f4c8\"; }\n.bi-pencil-fill::before { content: \"\\f4c9\"; }\n.bi-pencil-square::before { content: \"\\f4ca\"; }\n.bi-pencil::before { content: \"\\f4cb\"; }\n.bi-pentagon-fill::before { content: \"\\f4cc\"; }\n.bi-pentagon-half::before { content: \"\\f4cd\"; }\n.bi-pentagon::before { content: \"\\f4ce\"; }\n.bi-people-fill::before { content: \"\\f4cf\"; }\n.bi-people::before { content: \"\\f4d0\"; }\n.bi-percent::before { content: \"\\f4d1\"; }\n.bi-person-badge-fill::before { content: \"\\f4d2\"; }\n.bi-person-badge::before { content: \"\\f4d3\"; }\n.bi-person-bounding-box::before { content: \"\\f4d4\"; }\n.bi-person-check-fill::before { content: \"\\f4d5\"; }\n.bi-person-check::before { content: \"\\f4d6\"; }\n.bi-person-circle::before { content: \"\\f4d7\"; }\n.bi-person-dash-fill::before { content: \"\\f4d8\"; }\n.bi-person-dash::before { content: \"\\f4d9\"; }\n.bi-person-fill::before { content: \"\\f4da\"; }\n.bi-person-lines-fill::before { content: \"\\f4db\"; }\n.bi-person-plus-fill::before { content: \"\\f4dc\"; }\n.bi-person-plus::before { content: \"\\f4dd\"; }\n.bi-person-square::before { content: \"\\f4de\"; }\n.bi-person-x-fill::before { content: \"\\f4df\"; }\n.bi-person-x::before { content: \"\\f4e0\"; }\n.bi-person::before { content: \"\\f4e1\"; }\n.bi-phone-fill::before { content: \"\\f4e2\"; }\n.bi-phone-landscape-fill::before { content: \"\\f4e3\"; }\n.bi-phone-landscape::before { content: \"\\f4e4\"; }\n.bi-phone-vibrate-fill::before { content: \"\\f4e5\"; }\n.bi-phone-vibrate::before { content: \"\\f4e6\"; }\n.bi-phone::before { content: \"\\f4e7\"; }\n.bi-pie-chart-fill::before { content: \"\\f4e8\"; }\n.bi-pie-chart::before { content: \"\\f4e9\"; }\n.bi-pin-angle-fill::before { content: \"\\f4ea\"; }\n.bi-pin-angle::before { content: \"\\f4eb\"; }\n.bi-pin-fill::before { content: \"\\f4ec\"; }\n.bi-pin::before { content: \"\\f4ed\"; }\n.bi-pip-fill::before { content: \"\\f4ee\"; }\n.bi-pip::before { content: \"\\f4ef\"; }\n.bi-play-btn-fill::before { content: \"\\f4f0\"; }\n.bi-play-btn::before { content: \"\\f4f1\"; }\n.bi-play-circle-fill::before { content: \"\\f4f2\"; }\n.bi-play-circle::before { content: \"\\f4f3\"; }\n.bi-play-fill::before { content: \"\\f4f4\"; }\n.bi-play::before { content: \"\\f4f5\"; }\n.bi-plug-fill::before { content: \"\\f4f6\"; }\n.bi-plug::before { content: \"\\f4f7\"; }\n.bi-plus-circle-dotted::before { content: \"\\f4f8\"; }\n.bi-plus-circle-fill::before { content: \"\\f4f9\"; }\n.bi-plus-circle::before { content: \"\\f4fa\"; }\n.bi-plus-square-dotted::before { content: \"\\f4fb\"; }\n.bi-plus-square-fill::before { content: \"\\f4fc\"; }\n.bi-plus-square::before { content: \"\\f4fd\"; }\n.bi-plus::before { content: \"\\f4fe\"; }\n.bi-power::before { content: \"\\f4ff\"; }\n.bi-printer-fill::before { content: \"\\f500\"; }\n.bi-printer::before { content: \"\\f501\"; }\n.bi-puzzle-fill::before { content: \"\\f502\"; }\n.bi-puzzle::before { content: \"\\f503\"; }\n.bi-question-circle-fill::before { content: \"\\f504\"; }\n.bi-question-circle::before { content: \"\\f505\"; }\n.bi-question-diamond-fill::before { content: \"\\f506\"; }\n.bi-question-diamond::before { content: \"\\f507\"; }\n.bi-question-octagon-fill::before { content: \"\\f508\"; }\n.bi-question-octagon::before { content: \"\\f509\"; }\n.bi-question-square-fill::before { content: \"\\f50a\"; }\n.bi-question-square::before { content: \"\\f50b\"; }\n.bi-question::before { content: \"\\f50c\"; }\n.bi-rainbow::before { content: \"\\f50d\"; }\n.bi-receipt-cutoff::before { content: \"\\f50e\"; }\n.bi-receipt::before { content: \"\\f50f\"; }\n.bi-reception-0::before { content: \"\\f510\"; }\n.bi-reception-1::before { content: \"\\f511\"; }\n.bi-reception-2::before { content: \"\\f512\"; }\n.bi-reception-3::before { content: \"\\f513\"; }\n.bi-reception-4::before { content: \"\\f514\"; }\n.bi-record-btn-fill::before { content: \"\\f515\"; }\n.bi-record-btn::before { content: \"\\f516\"; }\n.bi-record-circle-fill::before { content: \"\\f517\"; }\n.bi-record-circle::before { content: \"\\f518\"; }\n.bi-record-fill::before { content: \"\\f519\"; }\n.bi-record::before { content: \"\\f51a\"; }\n.bi-record2-fill::before { content: \"\\f51b\"; }\n.bi-record2::before { content: \"\\f51c\"; }\n.bi-reply-all-fill::before { content: \"\\f51d\"; }\n.bi-reply-all::before { content: \"\\f51e\"; }\n.bi-reply-fill::before { content: \"\\f51f\"; }\n.bi-reply::before { content: \"\\f520\"; }\n.bi-rss-fill::before { content: \"\\f521\"; }\n.bi-rss::before { content: \"\\f522\"; }\n.bi-rulers::before { content: \"\\f523\"; }\n.bi-save-fill::before { content: \"\\f524\"; }\n.bi-save::before { content: \"\\f525\"; }\n.bi-save2-fill::before { content: \"\\f526\"; }\n.bi-save2::before { content: \"\\f527\"; }\n.bi-scissors::before { content: \"\\f528\"; }\n.bi-screwdriver::before { content: \"\\f529\"; }\n.bi-search::before { content: \"\\f52a\"; }\n.bi-segmented-nav::before { content: \"\\f52b\"; }\n.bi-server::before { content: \"\\f52c\"; }\n.bi-share-fill::before { content: \"\\f52d\"; }\n.bi-share::before { content: \"\\f52e\"; }\n.bi-shield-check::before { content: \"\\f52f\"; }\n.bi-shield-exclamation::before { content: \"\\f530\"; }\n.bi-shield-fill-check::before { content: \"\\f531\"; }\n.bi-shield-fill-exclamation::before { content: \"\\f532\"; }\n.bi-shield-fill-minus::before { content: \"\\f533\"; }\n.bi-shield-fill-plus::before { content: \"\\f534\"; }\n.bi-shield-fill-x::before { content: \"\\f535\"; }\n.bi-shield-fill::before { content: \"\\f536\"; }\n.bi-shield-lock-fill::before { content: \"\\f537\"; }\n.bi-shield-lock::before { content: \"\\f538\"; }\n.bi-shield-minus::before { content: \"\\f539\"; }\n.bi-shield-plus::before { content: \"\\f53a\"; }\n.bi-shield-shaded::before { content: \"\\f53b\"; }\n.bi-shield-slash-fill::before { content: \"\\f53c\"; }\n.bi-shield-slash::before { content: \"\\f53d\"; }\n.bi-shield-x::before { content: \"\\f53e\"; }\n.bi-shield::before { content: \"\\f53f\"; }\n.bi-shift-fill::before { content: \"\\f540\"; }\n.bi-shift::before { content: \"\\f541\"; }\n.bi-shop-window::before { content: \"\\f542\"; }\n.bi-shop::before { content: \"\\f543\"; }\n.bi-shuffle::before { content: \"\\f544\"; }\n.bi-signpost-2-fill::before { content: \"\\f545\"; }\n.bi-signpost-2::before { content: \"\\f546\"; }\n.bi-signpost-fill::before { content: \"\\f547\"; }\n.bi-signpost-split-fill::before { content: \"\\f548\"; }\n.bi-signpost-split::before { content: \"\\f549\"; }\n.bi-signpost::before { content: \"\\f54a\"; }\n.bi-sim-fill::before { content: \"\\f54b\"; }\n.bi-sim::before { content: \"\\f54c\"; }\n.bi-skip-backward-btn-fill::before { content: \"\\f54d\"; }\n.bi-skip-backward-btn::before { content: \"\\f54e\"; }\n.bi-skip-backward-circle-fill::before { content: \"\\f54f\"; }\n.bi-skip-backward-circle::before { content: \"\\f550\"; }\n.bi-skip-backward-fill::before { content: \"\\f551\"; }\n.bi-skip-backward::before { content: \"\\f552\"; }\n.bi-skip-end-btn-fill::before { content: \"\\f553\"; }\n.bi-skip-end-btn::before { content: \"\\f554\"; }\n.bi-skip-end-circle-fill::before { content: \"\\f555\"; }\n.bi-skip-end-circle::before { content: \"\\f556\"; }\n.bi-skip-end-fill::before { content: \"\\f557\"; }\n.bi-skip-end::before { content: \"\\f558\"; }\n.bi-skip-forward-btn-fill::before { content: \"\\f559\"; }\n.bi-skip-forward-btn::before { content: \"\\f55a\"; }\n.bi-skip-forward-circle-fill::before { content: \"\\f55b\"; }\n.bi-skip-forward-circle::before { content: \"\\f55c\"; }\n.bi-skip-forward-fill::before { content: \"\\f55d\"; }\n.bi-skip-forward::before { content: \"\\f55e\"; }\n.bi-skip-start-btn-fill::before { content: \"\\f55f\"; }\n.bi-skip-start-btn::before { content: \"\\f560\"; }\n.bi-skip-start-circle-fill::before { content: \"\\f561\"; }\n.bi-skip-start-circle::before { content: \"\\f562\"; }\n.bi-skip-start-fill::before { content: \"\\f563\"; }\n.bi-skip-start::before { content: \"\\f564\"; }\n.bi-slack::before { content: \"\\f565\"; }\n.bi-slash-circle-fill::before { content: \"\\f566\"; }\n.bi-slash-circle::before { content: \"\\f567\"; }\n.bi-slash-square-fill::before { content: \"\\f568\"; }\n.bi-slash-square::before { content: \"\\f569\"; }\n.bi-slash::before { content: \"\\f56a\"; }\n.bi-sliders::before { content: \"\\f56b\"; }\n.bi-smartwatch::before { content: \"\\f56c\"; }\n.bi-snow::before { content: \"\\f56d\"; }\n.bi-snow2::before { content: \"\\f56e\"; }\n.bi-snow3::before { content: \"\\f56f\"; }\n.bi-sort-alpha-down-alt::before { content: \"\\f570\"; }\n.bi-sort-alpha-down::before { content: \"\\f571\"; }\n.bi-sort-alpha-up-alt::before { content: \"\\f572\"; }\n.bi-sort-alpha-up::before { content: \"\\f573\"; }\n.bi-sort-down-alt::before { content: \"\\f574\"; }\n.bi-sort-down::before { content: \"\\f575\"; }\n.bi-sort-numeric-down-alt::before { content: \"\\f576\"; }\n.bi-sort-numeric-down::before { content: \"\\f577\"; }\n.bi-sort-numeric-up-alt::before { content: \"\\f578\"; }\n.bi-sort-numeric-up::before { content: \"\\f579\"; }\n.bi-sort-up-alt::before { content: \"\\f57a\"; }\n.bi-sort-up::before { content: \"\\f57b\"; }\n.bi-soundwave::before { content: \"\\f57c\"; }\n.bi-speaker-fill::before { content: \"\\f57d\"; }\n.bi-speaker::before { content: \"\\f57e\"; }\n.bi-speedometer::before { content: \"\\f57f\"; }\n.bi-speedometer2::before { content: \"\\f580\"; }\n.bi-spellcheck::before { content: \"\\f581\"; }\n.bi-square-fill::before { content: \"\\f582\"; }\n.bi-square-half::before { content: \"\\f583\"; }\n.bi-square::before { content: \"\\f584\"; }\n.bi-stack::before { content: \"\\f585\"; }\n.bi-star-fill::before { content: \"\\f586\"; }\n.bi-star-half::before { content: \"\\f587\"; }\n.bi-star::before { content: \"\\f588\"; }\n.bi-stars::before { content: \"\\f589\"; }\n.bi-stickies-fill::before { content: \"\\f58a\"; }\n.bi-stickies::before { content: \"\\f58b\"; }\n.bi-sticky-fill::before { content: \"\\f58c\"; }\n.bi-sticky::before { content: \"\\f58d\"; }\n.bi-stop-btn-fill::before { content: \"\\f58e\"; }\n.bi-stop-btn::before { content: \"\\f58f\"; }\n.bi-stop-circle-fill::before { content: \"\\f590\"; }\n.bi-stop-circle::before { content: \"\\f591\"; }\n.bi-stop-fill::before { content: \"\\f592\"; }\n.bi-stop::before { content: \"\\f593\"; }\n.bi-stoplights-fill::before { content: \"\\f594\"; }\n.bi-stoplights::before { content: \"\\f595\"; }\n.bi-stopwatch-fill::before { content: \"\\f596\"; }\n.bi-stopwatch::before { content: \"\\f597\"; }\n.bi-subtract::before { content: \"\\f598\"; }\n.bi-suit-club-fill::before { content: \"\\f599\"; }\n.bi-suit-club::before { content: \"\\f59a\"; }\n.bi-suit-diamond-fill::before { content: \"\\f59b\"; }\n.bi-suit-diamond::before { content: \"\\f59c\"; }\n.bi-suit-heart-fill::before { content: \"\\f59d\"; }\n.bi-suit-heart::before { content: \"\\f59e\"; }\n.bi-suit-spade-fill::before { content: \"\\f59f\"; }\n.bi-suit-spade::before { content: \"\\f5a0\"; }\n.bi-sun-fill::before { content: \"\\f5a1\"; }\n.bi-sun::before { content: \"\\f5a2\"; }\n.bi-sunglasses::before { content: \"\\f5a3\"; }\n.bi-sunrise-fill::before { content: \"\\f5a4\"; }\n.bi-sunrise::before { content: \"\\f5a5\"; }\n.bi-sunset-fill::before { content: \"\\f5a6\"; }\n.bi-sunset::before { content: \"\\f5a7\"; }\n.bi-symmetry-horizontal::before { content: \"\\f5a8\"; }\n.bi-symmetry-vertical::before { content: \"\\f5a9\"; }\n.bi-table::before { content: \"\\f5aa\"; }\n.bi-tablet-fill::before { content: \"\\f5ab\"; }\n.bi-tablet-landscape-fill::before { content: \"\\f5ac\"; }\n.bi-tablet-landscape::before { content: \"\\f5ad\"; }\n.bi-tablet::before { content: \"\\f5ae\"; }\n.bi-tag-fill::before { content: \"\\f5af\"; }\n.bi-tag::before { content: \"\\f5b0\"; }\n.bi-tags-fill::before { content: \"\\f5b1\"; }\n.bi-tags::before { content: \"\\f5b2\"; }\n.bi-telegram::before { content: \"\\f5b3\"; }\n.bi-telephone-fill::before { content: \"\\f5b4\"; }\n.bi-telephone-forward-fill::before { content: \"\\f5b5\"; }\n.bi-telephone-forward::before { content: \"\\f5b6\"; }\n.bi-telephone-inbound-fill::before { content: \"\\f5b7\"; }\n.bi-telephone-inbound::before { content: \"\\f5b8\"; }\n.bi-telephone-minus-fill::before { content: \"\\f5b9\"; }\n.bi-telephone-minus::before { content: \"\\f5ba\"; }\n.bi-telephone-outbound-fill::before { content: \"\\f5bb\"; }\n.bi-telephone-outbound::before { content: \"\\f5bc\"; }\n.bi-telephone-plus-fill::before { content: \"\\f5bd\"; }\n.bi-telephone-plus::before { content: \"\\f5be\"; }\n.bi-telephone-x-fill::before { content: \"\\f5bf\"; }\n.bi-telephone-x::before { content: \"\\f5c0\"; }\n.bi-telephone::before { content: \"\\f5c1\"; }\n.bi-terminal-fill::before { content: \"\\f5c2\"; }\n.bi-terminal::before { content: \"\\f5c3\"; }\n.bi-text-center::before { content: \"\\f5c4\"; }\n.bi-text-indent-left::before { content: \"\\f5c5\"; }\n.bi-text-indent-right::before { content: \"\\f5c6\"; }\n.bi-text-left::before { content: \"\\f5c7\"; }\n.bi-text-paragraph::before { content: \"\\f5c8\"; }\n.bi-text-right::before { content: \"\\f5c9\"; }\n.bi-textarea-resize::before { content: \"\\f5ca\"; }\n.bi-textarea-t::before { content: \"\\f5cb\"; }\n.bi-textarea::before { content: \"\\f5cc\"; }\n.bi-thermometer-half::before { content: \"\\f5cd\"; }\n.bi-thermometer-high::before { content: \"\\f5ce\"; }\n.bi-thermometer-low::before { content: \"\\f5cf\"; }\n.bi-thermometer-snow::before { content: \"\\f5d0\"; }\n.bi-thermometer-sun::before { content: \"\\f5d1\"; }\n.bi-thermometer::before { content: \"\\f5d2\"; }\n.bi-three-dots-vertical::before { content: \"\\f5d3\"; }\n.bi-three-dots::before { content: \"\\f5d4\"; }\n.bi-toggle-off::before { content: \"\\f5d5\"; }\n.bi-toggle-on::before { content: \"\\f5d6\"; }\n.bi-toggle2-off::before { content: \"\\f5d7\"; }\n.bi-toggle2-on::before { content: \"\\f5d8\"; }\n.bi-toggles::before { content: \"\\f5d9\"; }\n.bi-toggles2::before { content: \"\\f5da\"; }\n.bi-tools::before { content: \"\\f5db\"; }\n.bi-tornado::before { content: \"\\f5dc\"; }\n.bi-trash-fill::before { content: \"\\f5dd\"; }\n.bi-trash::before { content: \"\\f5de\"; }\n.bi-trash2-fill::before { content: \"\\f5df\"; }\n.bi-trash2::before { content: \"\\f5e0\"; }\n.bi-tree-fill::before { content: \"\\f5e1\"; }\n.bi-tree::before { content: \"\\f5e2\"; }\n.bi-triangle-fill::before { content: \"\\f5e3\"; }\n.bi-triangle-half::before { content: \"\\f5e4\"; }\n.bi-triangle::before { content: \"\\f5e5\"; }\n.bi-trophy-fill::before { content: \"\\f5e6\"; }\n.bi-trophy::before { content: \"\\f5e7\"; }\n.bi-tropical-storm::before { content: \"\\f5e8\"; }\n.bi-truck-flatbed::before { content: \"\\f5e9\"; }\n.bi-truck::before { content: \"\\f5ea\"; }\n.bi-tsunami::before { content: \"\\f5eb\"; }\n.bi-tv-fill::before { content: \"\\f5ec\"; }\n.bi-tv::before { content: \"\\f5ed\"; }\n.bi-twitch::before { content: \"\\f5ee\"; }\n.bi-twitter::before { content: \"\\f5ef\"; }\n.bi-type-bold::before { content: \"\\f5f0\"; }\n.bi-type-h1::before { content: \"\\f5f1\"; }\n.bi-type-h2::before { content: \"\\f5f2\"; }\n.bi-type-h3::before { content: \"\\f5f3\"; }\n.bi-type-italic::before { content: \"\\f5f4\"; }\n.bi-type-strikethrough::before { content: \"\\f5f5\"; }\n.bi-type-underline::before { content: \"\\f5f6\"; }\n.bi-type::before { content: \"\\f5f7\"; }\n.bi-ui-checks-grid::before { content: \"\\f5f8\"; }\n.bi-ui-checks::before { content: \"\\f5f9\"; }\n.bi-ui-radios-grid::before { content: \"\\f5fa\"; }\n.bi-ui-radios::before { content: \"\\f5fb\"; }\n.bi-umbrella-fill::before { content: \"\\f5fc\"; }\n.bi-umbrella::before { content: \"\\f5fd\"; }\n.bi-union::before { content: \"\\f5fe\"; }\n.bi-unlock-fill::before { content: \"\\f5ff\"; }\n.bi-unlock::before { content: \"\\f600\"; }\n.bi-upc-scan::before { content: \"\\f601\"; }\n.bi-upc::before { content: \"\\f602\"; }\n.bi-upload::before { content: \"\\f603\"; }\n.bi-vector-pen::before { content: \"\\f604\"; }\n.bi-view-list::before { content: \"\\f605\"; }\n.bi-view-stacked::before { content: \"\\f606\"; }\n.bi-vinyl-fill::before { content: \"\\f607\"; }\n.bi-vinyl::before { content: \"\\f608\"; }\n.bi-voicemail::before { content: \"\\f609\"; }\n.bi-volume-down-fill::before { content: \"\\f60a\"; }\n.bi-volume-down::before { content: \"\\f60b\"; }\n.bi-volume-mute-fill::before { content: \"\\f60c\"; }\n.bi-volume-mute::before { content: \"\\f60d\"; }\n.bi-volume-off-fill::before { content: \"\\f60e\"; }\n.bi-volume-off::before { content: \"\\f60f\"; }\n.bi-volume-up-fill::before { content: \"\\f610\"; }\n.bi-volume-up::before { content: \"\\f611\"; }\n.bi-vr::before { content: \"\\f612\"; }\n.bi-wallet-fill::before { content: \"\\f613\"; }\n.bi-wallet::before { content: \"\\f614\"; }\n.bi-wallet2::before { content: \"\\f615\"; }\n.bi-watch::before { content: \"\\f616\"; }\n.bi-water::before { content: \"\\f617\"; }\n.bi-whatsapp::before { content: \"\\f618\"; }\n.bi-wifi-1::before { content: \"\\f619\"; }\n.bi-wifi-2::before { content: \"\\f61a\"; }\n.bi-wifi-off::before { content: \"\\f61b\"; }\n.bi-wifi::before { content: \"\\f61c\"; }\n.bi-wind::before { content: \"\\f61d\"; }\n.bi-window-dock::before { content: \"\\f61e\"; }\n.bi-window-sidebar::before { content: \"\\f61f\"; }\n.bi-window::before { content: \"\\f620\"; }\n.bi-wrench::before { content: \"\\f621\"; }\n.bi-x-circle-fill::before { content: \"\\f622\"; }\n.bi-x-circle::before { content: \"\\f623\"; }\n.bi-x-diamond-fill::before { content: \"\\f624\"; }\n.bi-x-diamond::before { content: \"\\f625\"; }\n.bi-x-octagon-fill::before { content: \"\\f626\"; }\n.bi-x-octagon::before { content: \"\\f627\"; }\n.bi-x-square-fill::before { content: \"\\f628\"; }\n.bi-x-square::before { content: \"\\f629\"; }\n.bi-x::before { content: \"\\f62a\"; }\n.bi-youtube::before { content: \"\\f62b\"; }\n.bi-zoom-in::before { content: \"\\f62c\"; }\n.bi-zoom-out::before { content: \"\\f62d\"; }\n.bi-bank::before { content: \"\\f62e\"; }\n.bi-bank2::before { content: \"\\f62f\"; }\n.bi-bell-slash-fill::before { content: \"\\f630\"; }\n.bi-bell-slash::before { content: \"\\f631\"; }\n.bi-cash-coin::before { content: \"\\f632\"; }\n.bi-check-lg::before { content: \"\\f633\"; }\n.bi-coin::before { content: \"\\f634\"; }\n.bi-currency-bitcoin::before { content: \"\\f635\"; }\n.bi-currency-dollar::before { content: \"\\f636\"; }\n.bi-currency-euro::before { content: \"\\f637\"; }\n.bi-currency-exchange::before { content: \"\\f638\"; }\n.bi-currency-pound::before { content: \"\\f639\"; }\n.bi-currency-yen::before { content: \"\\f63a\"; }\n.bi-dash-lg::before { content: \"\\f63b\"; }\n.bi-exclamation-lg::before { content: \"\\f63c\"; }\n.bi-file-earmark-pdf-fill::before { content: \"\\f63d\"; }\n.bi-file-earmark-pdf::before { content: \"\\f63e\"; }\n.bi-file-pdf-fill::before { content: \"\\f63f\"; }\n.bi-file-pdf::before { content: \"\\f640\"; }\n.bi-gender-ambiguous::before { content: \"\\f641\"; }\n.bi-gender-female::before { content: \"\\f642\"; }\n.bi-gender-male::before { content: \"\\f643\"; }\n.bi-gender-trans::before { content: \"\\f644\"; }\n.bi-headset-vr::before { content: \"\\f645\"; }\n.bi-info-lg::before { content: \"\\f646\"; }\n.bi-mastodon::before { content: \"\\f647\"; }\n.bi-messenger::before { content: \"\\f648\"; }\n.bi-piggy-bank-fill::before { content: \"\\f649\"; }\n.bi-piggy-bank::before { content: \"\\f64a\"; }\n.bi-pin-map-fill::before { content: \"\\f64b\"; }\n.bi-pin-map::before { content: \"\\f64c\"; }\n.bi-plus-lg::before { content: \"\\f64d\"; }\n.bi-question-lg::before { content: \"\\f64e\"; }\n.bi-recycle::before { content: \"\\f64f\"; }\n.bi-reddit::before { content: \"\\f650\"; }\n.bi-safe-fill::before { content: \"\\f651\"; }\n.bi-safe2-fill::before { content: \"\\f652\"; }\n.bi-safe2::before { content: \"\\f653\"; }\n.bi-sd-card-fill::before { content: \"\\f654\"; }\n.bi-sd-card::before { content: \"\\f655\"; }\n.bi-skype::before { content: \"\\f656\"; }\n.bi-slash-lg::before { content: \"\\f657\"; }\n.bi-translate::before { content: \"\\f658\"; }\n.bi-x-lg::before { content: \"\\f659\"; }\n.bi-safe::before { content: \"\\f65a\"; }\n.bi-apple::before { content: \"\\f65b\"; }\n.bi-microsoft::before { content: \"\\f65d\"; }\n.bi-windows::before { content: \"\\f65e\"; }\n.bi-behance::before { content: \"\\f65c\"; }\n.bi-dribbble::before { content: \"\\f65f\"; }\n.bi-line::before { content: \"\\f660\"; }\n.bi-medium::before { content: \"\\f661\"; }\n.bi-paypal::before { content: \"\\f662\"; }\n.bi-pinterest::before { content: \"\\f663\"; }\n.bi-signal::before { content: \"\\f664\"; }\n.bi-snapchat::before { content: \"\\f665\"; }\n.bi-spotify::before { content: \"\\f666\"; }\n.bi-stack-overflow::before { content: \"\\f667\"; }\n.bi-strava::before { content: \"\\f668\"; }\n.bi-wordpress::before { content: \"\\f669\"; }\n.bi-vimeo::before { content: \"\\f66a\"; }\n.bi-activity::before { content: \"\\f66b\"; }\n.bi-easel2-fill::before { content: \"\\f66c\"; }\n.bi-easel2::before { content: \"\\f66d\"; }\n.bi-easel3-fill::before { content: \"\\f66e\"; }\n.bi-easel3::before { content: \"\\f66f\"; }\n.bi-fan::before { content: \"\\f670\"; }\n.bi-fingerprint::before { content: \"\\f671\"; }\n.bi-graph-down-arrow::before { content: \"\\f672\"; }\n.bi-graph-up-arrow::before { content: \"\\f673\"; }\n.bi-hypnotize::before { content: \"\\f674\"; }\n.bi-magic::before { content: \"\\f675\"; }\n.bi-person-rolodex::before { content: \"\\f676\"; }\n.bi-person-video::before { content: \"\\f677\"; }\n.bi-person-video2::before { content: \"\\f678\"; }\n.bi-person-video3::before { content: \"\\f679\"; }\n.bi-person-workspace::before { content: \"\\f67a\"; }\n.bi-radioactive::before { content: \"\\f67b\"; }\n.bi-webcam-fill::before { content: \"\\f67c\"; }\n.bi-webcam::before { content: \"\\f67d\"; }\n.bi-yin-yang::before { content: \"\\f67e\"; }\n.bi-bandaid-fill::before { content: \"\\f680\"; }\n.bi-bandaid::before { content: \"\\f681\"; }\n.bi-bluetooth::before { content: \"\\f682\"; }\n.bi-body-text::before { content: \"\\f683\"; }\n.bi-boombox::before { content: \"\\f684\"; }\n.bi-boxes::before { content: \"\\f685\"; }\n.bi-dpad-fill::before { content: \"\\f686\"; }\n.bi-dpad::before { content: \"\\f687\"; }\n.bi-ear-fill::before { content: \"\\f688\"; }\n.bi-ear::before { content: \"\\f689\"; }\n.bi-envelope-check-fill::before { content: \"\\f68b\"; }\n.bi-envelope-check::before { content: \"\\f68c\"; }\n.bi-envelope-dash-fill::before { content: \"\\f68e\"; }\n.bi-envelope-dash::before { content: \"\\f68f\"; }\n.bi-envelope-exclamation-fill::before { content: \"\\f691\"; }\n.bi-envelope-exclamation::before { content: \"\\f692\"; }\n.bi-envelope-plus-fill::before { content: \"\\f693\"; }\n.bi-envelope-plus::before { content: \"\\f694\"; }\n.bi-envelope-slash-fill::before { content: \"\\f696\"; }\n.bi-envelope-slash::before { content: \"\\f697\"; }\n.bi-envelope-x-fill::before { content: \"\\f699\"; }\n.bi-envelope-x::before { content: \"\\f69a\"; }\n.bi-explicit-fill::before { content: \"\\f69b\"; }\n.bi-explicit::before { content: \"\\f69c\"; }\n.bi-git::before { content: \"\\f69d\"; }\n.bi-infinity::before { content: \"\\f69e\"; }\n.bi-list-columns-reverse::before { content: \"\\f69f\"; }\n.bi-list-columns::before { content: \"\\f6a0\"; }\n.bi-meta::before { content: \"\\f6a1\"; }\n.bi-nintendo-switch::before { content: \"\\f6a4\"; }\n.bi-pc-display-horizontal::before { content: \"\\f6a5\"; }\n.bi-pc-display::before { content: \"\\f6a6\"; }\n.bi-pc-horizontal::before { content: \"\\f6a7\"; }\n.bi-pc::before { content: \"\\f6a8\"; }\n.bi-playstation::before { content: \"\\f6a9\"; }\n.bi-plus-slash-minus::before { content: \"\\f6aa\"; }\n.bi-projector-fill::before { content: \"\\f6ab\"; }\n.bi-projector::before { content: \"\\f6ac\"; }\n.bi-qr-code-scan::before { content: \"\\f6ad\"; }\n.bi-qr-code::before { content: \"\\f6ae\"; }\n.bi-quora::before { content: \"\\f6af\"; }\n.bi-quote::before { content: \"\\f6b0\"; }\n.bi-robot::before { content: \"\\f6b1\"; }\n.bi-send-check-fill::before { content: \"\\f6b2\"; }\n.bi-send-check::before { content: \"\\f6b3\"; }\n.bi-send-dash-fill::before { content: \"\\f6b4\"; }\n.bi-send-dash::before { content: \"\\f6b5\"; }\n.bi-send-exclamation-fill::before { content: \"\\f6b7\"; }\n.bi-send-exclamation::before { content: \"\\f6b8\"; }\n.bi-send-fill::before { content: \"\\f6b9\"; }\n.bi-send-plus-fill::before { content: \"\\f6ba\"; }\n.bi-send-plus::before { content: \"\\f6bb\"; }\n.bi-send-slash-fill::before { content: \"\\f6bc\"; }\n.bi-send-slash::before { content: \"\\f6bd\"; }\n.bi-send-x-fill::before { content: \"\\f6be\"; }\n.bi-send-x::before { content: \"\\f6bf\"; }\n.bi-send::before { content: \"\\f6c0\"; }\n.bi-steam::before { content: \"\\f6c1\"; }\n.bi-terminal-dash::before { content: \"\\f6c3\"; }\n.bi-terminal-plus::before { content: \"\\f6c4\"; }\n.bi-terminal-split::before { content: \"\\f6c5\"; }\n.bi-ticket-detailed-fill::before { content: \"\\f6c6\"; }\n.bi-ticket-detailed::before { content: \"\\f6c7\"; }\n.bi-ticket-fill::before { content: \"\\f6c8\"; }\n.bi-ticket-perforated-fill::before { content: \"\\f6c9\"; }\n.bi-ticket-perforated::before { content: \"\\f6ca\"; }\n.bi-ticket::before { content: \"\\f6cb\"; }\n.bi-tiktok::before { content: \"\\f6cc\"; }\n.bi-window-dash::before { content: \"\\f6cd\"; }\n.bi-window-desktop::before { content: \"\\f6ce\"; }\n.bi-window-fullscreen::before { content: \"\\f6cf\"; }\n.bi-window-plus::before { content: \"\\f6d0\"; }\n.bi-window-split::before { content: \"\\f6d1\"; }\n.bi-window-stack::before { content: \"\\f6d2\"; }\n.bi-window-x::before { content: \"\\f6d3\"; }\n.bi-xbox::before { content: \"\\f6d4\"; }\n.bi-ethernet::before { content: \"\\f6d5\"; }\n.bi-hdmi-fill::before { content: \"\\f6d6\"; }\n.bi-hdmi::before { content: \"\\f6d7\"; }\n.bi-usb-c-fill::before { content: \"\\f6d8\"; }\n.bi-usb-c::before { content: \"\\f6d9\"; }\n.bi-usb-fill::before { content: \"\\f6da\"; }\n.bi-usb-plug-fill::before { content: \"\\f6db\"; }\n.bi-usb-plug::before { content: \"\\f6dc\"; }\n.bi-usb-symbol::before { content: \"\\f6dd\"; }\n.bi-usb::before { content: \"\\f6de\"; }\n.bi-boombox-fill::before { content: \"\\f6df\"; }\n.bi-displayport::before { content: \"\\f6e1\"; }\n.bi-gpu-card::before { content: \"\\f6e2\"; }\n.bi-memory::before { content: \"\\f6e3\"; }\n.bi-modem-fill::before { content: \"\\f6e4\"; }\n.bi-modem::before { content: \"\\f6e5\"; }\n.bi-motherboard-fill::before { content: \"\\f6e6\"; }\n.bi-motherboard::before { content: \"\\f6e7\"; }\n.bi-optical-audio-fill::before { content: \"\\f6e8\"; }\n.bi-optical-audio::before { content: \"\\f6e9\"; }\n.bi-pci-card::before { content: \"\\f6ea\"; }\n.bi-router-fill::before { content: \"\\f6eb\"; }\n.bi-router::before { content: \"\\f6ec\"; }\n.bi-thunderbolt-fill::before { content: \"\\f6ef\"; }\n.bi-thunderbolt::before { content: \"\\f6f0\"; }\n.bi-usb-drive-fill::before { content: \"\\f6f1\"; }\n.bi-usb-drive::before { content: \"\\f6f2\"; }\n.bi-usb-micro-fill::before { content: \"\\f6f3\"; }\n.bi-usb-micro::before { content: \"\\f6f4\"; }\n.bi-usb-mini-fill::before { content: \"\\f6f5\"; }\n.bi-usb-mini::before { content: \"\\f6f6\"; }\n.bi-cloud-haze2::before { content: \"\\f6f7\"; }\n.bi-device-hdd-fill::before { content: \"\\f6f8\"; }\n.bi-device-hdd::before { content: \"\\f6f9\"; }\n.bi-device-ssd-fill::before { content: \"\\f6fa\"; }\n.bi-device-ssd::before { content: \"\\f6fb\"; }\n.bi-displayport-fill::before { content: \"\\f6fc\"; }\n.bi-mortarboard-fill::before { content: \"\\f6fd\"; }\n.bi-mortarboard::before { content: \"\\f6fe\"; }\n.bi-terminal-x::before { content: \"\\f6ff\"; }\n.bi-arrow-through-heart-fill::before { content: \"\\f700\"; }\n.bi-arrow-through-heart::before { content: \"\\f701\"; }\n.bi-badge-sd-fill::before { content: \"\\f702\"; }\n.bi-badge-sd::before { content: \"\\f703\"; }\n.bi-bag-heart-fill::before { content: \"\\f704\"; }\n.bi-bag-heart::before { content: \"\\f705\"; }\n.bi-balloon-fill::before { content: \"\\f706\"; }\n.bi-balloon-heart-fill::before { content: \"\\f707\"; }\n.bi-balloon-heart::before { content: \"\\f708\"; }\n.bi-balloon::before { content: \"\\f709\"; }\n.bi-box2-fill::before { content: \"\\f70a\"; }\n.bi-box2-heart-fill::before { content: \"\\f70b\"; }\n.bi-box2-heart::before { content: \"\\f70c\"; }\n.bi-box2::before { content: \"\\f70d\"; }\n.bi-braces-asterisk::before { content: \"\\f70e\"; }\n.bi-calendar-heart-fill::before { content: \"\\f70f\"; }\n.bi-calendar-heart::before { content: \"\\f710\"; }\n.bi-calendar2-heart-fill::before { content: \"\\f711\"; }\n.bi-calendar2-heart::before { content: \"\\f712\"; }\n.bi-chat-heart-fill::before { content: \"\\f713\"; }\n.bi-chat-heart::before { content: \"\\f714\"; }\n.bi-chat-left-heart-fill::before { content: \"\\f715\"; }\n.bi-chat-left-heart::before { content: \"\\f716\"; }\n.bi-chat-right-heart-fill::before { content: \"\\f717\"; }\n.bi-chat-right-heart::before { content: \"\\f718\"; }\n.bi-chat-square-heart-fill::before { content: \"\\f719\"; }\n.bi-chat-square-heart::before { content: \"\\f71a\"; }\n.bi-clipboard-check-fill::before { content: \"\\f71b\"; }\n.bi-clipboard-data-fill::before { content: \"\\f71c\"; }\n.bi-clipboard-fill::before { content: \"\\f71d\"; }\n.bi-clipboard-heart-fill::before { content: \"\\f71e\"; }\n.bi-clipboard-heart::before { content: \"\\f71f\"; }\n.bi-clipboard-minus-fill::before { content: \"\\f720\"; }\n.bi-clipboard-plus-fill::before { content: \"\\f721\"; }\n.bi-clipboard-pulse::before { content: \"\\f722\"; }\n.bi-clipboard-x-fill::before { content: \"\\f723\"; }\n.bi-clipboard2-check-fill::before { content: \"\\f724\"; }\n.bi-clipboard2-check::before { content: \"\\f725\"; }\n.bi-clipboard2-data-fill::before { content: \"\\f726\"; }\n.bi-clipboard2-data::before { content: \"\\f727\"; }\n.bi-clipboard2-fill::before { content: \"\\f728\"; }\n.bi-clipboard2-heart-fill::before { content: \"\\f729\"; }\n.bi-clipboard2-heart::before { content: \"\\f72a\"; }\n.bi-clipboard2-minus-fill::before { content: \"\\f72b\"; }\n.bi-clipboard2-minus::before { content: \"\\f72c\"; }\n.bi-clipboard2-plus-fill::before { content: \"\\f72d\"; }\n.bi-clipboard2-plus::before { content: \"\\f72e\"; }\n.bi-clipboard2-pulse-fill::before { content: \"\\f72f\"; }\n.bi-clipboard2-pulse::before { content: \"\\f730\"; }\n.bi-clipboard2-x-fill::before { content: \"\\f731\"; }\n.bi-clipboard2-x::before { content: \"\\f732\"; }\n.bi-clipboard2::before { content: \"\\f733\"; }\n.bi-emoji-kiss-fill::before { content: \"\\f734\"; }\n.bi-emoji-kiss::before { content: \"\\f735\"; }\n.bi-envelope-heart-fill::before { content: \"\\f736\"; }\n.bi-envelope-heart::before { content: \"\\f737\"; }\n.bi-envelope-open-heart-fill::before { content: \"\\f738\"; }\n.bi-envelope-open-heart::before { content: \"\\f739\"; }\n.bi-envelope-paper-fill::before { content: \"\\f73a\"; }\n.bi-envelope-paper-heart-fill::before { content: \"\\f73b\"; }\n.bi-envelope-paper-heart::before { content: \"\\f73c\"; }\n.bi-envelope-paper::before { content: \"\\f73d\"; }\n.bi-filetype-aac::before { content: \"\\f73e\"; }\n.bi-filetype-ai::before { content: \"\\f73f\"; }\n.bi-filetype-bmp::before { content: \"\\f740\"; }\n.bi-filetype-cs::before { content: \"\\f741\"; }\n.bi-filetype-css::before { content: \"\\f742\"; }\n.bi-filetype-csv::before { content: \"\\f743\"; }\n.bi-filetype-doc::before { content: \"\\f744\"; }\n.bi-filetype-docx::before { content: \"\\f745\"; }\n.bi-filetype-exe::before { content: \"\\f746\"; }\n.bi-filetype-gif::before { content: \"\\f747\"; }\n.bi-filetype-heic::before { content: \"\\f748\"; }\n.bi-filetype-html::before { content: \"\\f749\"; }\n.bi-filetype-java::before { content: \"\\f74a\"; }\n.bi-filetype-jpg::before { content: \"\\f74b\"; }\n.bi-filetype-js::before { content: \"\\f74c\"; }\n.bi-filetype-jsx::before { content: \"\\f74d\"; }\n.bi-filetype-key::before { content: \"\\f74e\"; }\n.bi-filetype-m4p::before { content: \"\\f74f\"; }\n.bi-filetype-md::before { content: \"\\f750\"; }\n.bi-filetype-mdx::before { content: \"\\f751\"; }\n.bi-filetype-mov::before { content: \"\\f752\"; }\n.bi-filetype-mp3::before { content: \"\\f753\"; }\n.bi-filetype-mp4::before { content: \"\\f754\"; }\n.bi-filetype-otf::before { content: \"\\f755\"; }\n.bi-filetype-pdf::before { content: \"\\f756\"; }\n.bi-filetype-php::before { content: \"\\f757\"; }\n.bi-filetype-png::before { content: \"\\f758\"; }\n.bi-filetype-ppt::before { content: \"\\f75a\"; }\n.bi-filetype-psd::before { content: \"\\f75b\"; }\n.bi-filetype-py::before { content: \"\\f75c\"; }\n.bi-filetype-raw::before { content: \"\\f75d\"; }\n.bi-filetype-rb::before { content: \"\\f75e\"; }\n.bi-filetype-sass::before { content: \"\\f75f\"; }\n.bi-filetype-scss::before { content: \"\\f760\"; }\n.bi-filetype-sh::before { content: \"\\f761\"; }\n.bi-filetype-svg::before { content: \"\\f762\"; }\n.bi-filetype-tiff::before { content: \"\\f763\"; }\n.bi-filetype-tsx::before { content: \"\\f764\"; }\n.bi-filetype-ttf::before { content: \"\\f765\"; }\n.bi-filetype-txt::before { content: \"\\f766\"; }\n.bi-filetype-wav::before { content: \"\\f767\"; }\n.bi-filetype-woff::before { content: \"\\f768\"; }\n.bi-filetype-xls::before { content: \"\\f76a\"; }\n.bi-filetype-xml::before { content: \"\\f76b\"; }\n.bi-filetype-yml::before { content: \"\\f76c\"; }\n.bi-heart-arrow::before { content: \"\\f76d\"; }\n.bi-heart-pulse-fill::before { content: \"\\f76e\"; }\n.bi-heart-pulse::before { content: \"\\f76f\"; }\n.bi-heartbreak-fill::before { content: \"\\f770\"; }\n.bi-heartbreak::before { content: \"\\f771\"; }\n.bi-hearts::before { content: \"\\f772\"; }\n.bi-hospital-fill::before { content: \"\\f773\"; }\n.bi-hospital::before { content: \"\\f774\"; }\n.bi-house-heart-fill::before { content: \"\\f775\"; }\n.bi-house-heart::before { content: \"\\f776\"; }\n.bi-incognito::before { content: \"\\f777\"; }\n.bi-magnet-fill::before { content: \"\\f778\"; }\n.bi-magnet::before { content: \"\\f779\"; }\n.bi-person-heart::before { content: \"\\f77a\"; }\n.bi-person-hearts::before { content: \"\\f77b\"; }\n.bi-phone-flip::before { content: \"\\f77c\"; }\n.bi-plugin::before { content: \"\\f77d\"; }\n.bi-postage-fill::before { content: \"\\f77e\"; }\n.bi-postage-heart-fill::before { content: \"\\f77f\"; }\n.bi-postage-heart::before { content: \"\\f780\"; }\n.bi-postage::before { content: \"\\f781\"; }\n.bi-postcard-fill::before { content: \"\\f782\"; }\n.bi-postcard-heart-fill::before { content: \"\\f783\"; }\n.bi-postcard-heart::before { content: \"\\f784\"; }\n.bi-postcard::before { content: \"\\f785\"; }\n.bi-search-heart-fill::before { content: \"\\f786\"; }\n.bi-search-heart::before { content: \"\\f787\"; }\n.bi-sliders2-vertical::before { content: \"\\f788\"; }\n.bi-sliders2::before { content: \"\\f789\"; }\n.bi-trash3-fill::before { content: \"\\f78a\"; }\n.bi-trash3::before { content: \"\\f78b\"; }\n.bi-valentine::before { content: \"\\f78c\"; }\n.bi-valentine2::before { content: \"\\f78d\"; }\n.bi-wrench-adjustable-circle-fill::before { content: \"\\f78e\"; }\n.bi-wrench-adjustable-circle::before { content: \"\\f78f\"; }\n.bi-wrench-adjustable::before { content: \"\\f790\"; }\n.bi-filetype-json::before { content: \"\\f791\"; }\n.bi-filetype-pptx::before { content: \"\\f792\"; }\n.bi-filetype-xlsx::before { content: \"\\f793\"; }\n.bi-1-circle-fill::before { content: \"\\f796\"; }\n.bi-1-circle::before { content: \"\\f797\"; }\n.bi-1-square-fill::before { content: \"\\f798\"; }\n.bi-1-square::before { content: \"\\f799\"; }\n.bi-2-circle-fill::before { content: \"\\f79c\"; }\n.bi-2-circle::before { content: \"\\f79d\"; }\n.bi-2-square-fill::before { content: \"\\f79e\"; }\n.bi-2-square::before { content: \"\\f79f\"; }\n.bi-3-circle-fill::before { content: \"\\f7a2\"; }\n.bi-3-circle::before { content: \"\\f7a3\"; }\n.bi-3-square-fill::before { content: \"\\f7a4\"; }\n.bi-3-square::before { content: \"\\f7a5\"; }\n.bi-4-circle-fill::before { content: \"\\f7a8\"; }\n.bi-4-circle::before { content: \"\\f7a9\"; }\n.bi-4-square-fill::before { content: \"\\f7aa\"; }\n.bi-4-square::before { content: \"\\f7ab\"; }\n.bi-5-circle-fill::before { content: \"\\f7ae\"; }\n.bi-5-circle::before { content: \"\\f7af\"; }\n.bi-5-square-fill::before { content: \"\\f7b0\"; }\n.bi-5-square::before { content: \"\\f7b1\"; }\n.bi-6-circle-fill::before { content: \"\\f7b4\"; }\n.bi-6-circle::before { content: \"\\f7b5\"; }\n.bi-6-square-fill::before { content: \"\\f7b6\"; }\n.bi-6-square::before { content: \"\\f7b7\"; }\n.bi-7-circle-fill::before { content: \"\\f7ba\"; }\n.bi-7-circle::before { content: \"\\f7bb\"; }\n.bi-7-square-fill::before { content: \"\\f7bc\"; }\n.bi-7-square::before { content: \"\\f7bd\"; }\n.bi-8-circle-fill::before { content: \"\\f7c0\"; }\n.bi-8-circle::before { content: \"\\f7c1\"; }\n.bi-8-square-fill::before { content: \"\\f7c2\"; }\n.bi-8-square::before { content: \"\\f7c3\"; }\n.bi-9-circle-fill::before { content: \"\\f7c6\"; }\n.bi-9-circle::before { content: \"\\f7c7\"; }\n.bi-9-square-fill::before { content: \"\\f7c8\"; }\n.bi-9-square::before { content: \"\\f7c9\"; }\n.bi-airplane-engines-fill::before { content: \"\\f7ca\"; }\n.bi-airplane-engines::before { content: \"\\f7cb\"; }\n.bi-airplane-fill::before { content: \"\\f7cc\"; }\n.bi-airplane::before { content: \"\\f7cd\"; }\n.bi-alexa::before { content: \"\\f7ce\"; }\n.bi-alipay::before { content: \"\\f7cf\"; }\n.bi-android::before { content: \"\\f7d0\"; }\n.bi-android2::before { content: \"\\f7d1\"; }\n.bi-box-fill::before { content: \"\\f7d2\"; }\n.bi-box-seam-fill::before { content: \"\\f7d3\"; }\n.bi-browser-chrome::before { content: \"\\f7d4\"; }\n.bi-browser-edge::before { content: \"\\f7d5\"; }\n.bi-browser-firefox::before { content: \"\\f7d6\"; }\n.bi-browser-safari::before { content: \"\\f7d7\"; }\n.bi-c-circle-fill::before { content: \"\\f7da\"; }\n.bi-c-circle::before { content: \"\\f7db\"; }\n.bi-c-square-fill::before { content: \"\\f7dc\"; }\n.bi-c-square::before { content: \"\\f7dd\"; }\n.bi-capsule-pill::before { content: \"\\f7de\"; }\n.bi-capsule::before { content: \"\\f7df\"; }\n.bi-car-front-fill::before { content: \"\\f7e0\"; }\n.bi-car-front::before { content: \"\\f7e1\"; }\n.bi-cassette-fill::before { content: \"\\f7e2\"; }\n.bi-cassette::before { content: \"\\f7e3\"; }\n.bi-cc-circle-fill::before { content: \"\\f7e6\"; }\n.bi-cc-circle::before { content: \"\\f7e7\"; }\n.bi-cc-square-fill::before { content: \"\\f7e8\"; }\n.bi-cc-square::before { content: \"\\f7e9\"; }\n.bi-cup-hot-fill::before { content: \"\\f7ea\"; }\n.bi-cup-hot::before { content: \"\\f7eb\"; }\n.bi-currency-rupee::before { content: \"\\f7ec\"; }\n.bi-dropbox::before { content: \"\\f7ed\"; }\n.bi-escape::before { content: \"\\f7ee\"; }\n.bi-fast-forward-btn-fill::before { content: \"\\f7ef\"; }\n.bi-fast-forward-btn::before { content: \"\\f7f0\"; }\n.bi-fast-forward-circle-fill::before { content: \"\\f7f1\"; }\n.bi-fast-forward-circle::before { content: \"\\f7f2\"; }\n.bi-fast-forward-fill::before { content: \"\\f7f3\"; }\n.bi-fast-forward::before { content: \"\\f7f4\"; }\n.bi-filetype-sql::before { content: \"\\f7f5\"; }\n.bi-fire::before { content: \"\\f7f6\"; }\n.bi-google-play::before { content: \"\\f7f7\"; }\n.bi-h-circle-fill::before { content: \"\\f7fa\"; }\n.bi-h-circle::before { content: \"\\f7fb\"; }\n.bi-h-square-fill::before { content: \"\\f7fc\"; }\n.bi-h-square::before { content: \"\\f7fd\"; }\n.bi-indent::before { content: \"\\f7fe\"; }\n.bi-lungs-fill::before { content: \"\\f7ff\"; }\n.bi-lungs::before { content: \"\\f800\"; }\n.bi-microsoft-teams::before { content: \"\\f801\"; }\n.bi-p-circle-fill::before { content: \"\\f804\"; }\n.bi-p-circle::before { content: \"\\f805\"; }\n.bi-p-square-fill::before { content: \"\\f806\"; }\n.bi-p-square::before { content: \"\\f807\"; }\n.bi-pass-fill::before { content: \"\\f808\"; }\n.bi-pass::before { content: \"\\f809\"; }\n.bi-prescription::before { content: \"\\f80a\"; }\n.bi-prescription2::before { content: \"\\f80b\"; }\n.bi-r-circle-fill::before { content: \"\\f80e\"; }\n.bi-r-circle::before { content: \"\\f80f\"; }\n.bi-r-square-fill::before { content: \"\\f810\"; }\n.bi-r-square::before { content: \"\\f811\"; }\n.bi-repeat-1::before { content: \"\\f812\"; }\n.bi-repeat::before { content: \"\\f813\"; }\n.bi-rewind-btn-fill::before { content: \"\\f814\"; }\n.bi-rewind-btn::before { content: \"\\f815\"; }\n.bi-rewind-circle-fill::before { content: \"\\f816\"; }\n.bi-rewind-circle::before { content: \"\\f817\"; }\n.bi-rewind-fill::before { content: \"\\f818\"; }\n.bi-rewind::before { content: \"\\f819\"; }\n.bi-train-freight-front-fill::before { content: \"\\f81a\"; }\n.bi-train-freight-front::before { content: \"\\f81b\"; }\n.bi-train-front-fill::before { content: \"\\f81c\"; }\n.bi-train-front::before { content: \"\\f81d\"; }\n.bi-train-lightrail-front-fill::before { content: \"\\f81e\"; }\n.bi-train-lightrail-front::before { content: \"\\f81f\"; }\n.bi-truck-front-fill::before { content: \"\\f820\"; }\n.bi-truck-front::before { content: \"\\f821\"; }\n.bi-ubuntu::before { content: \"\\f822\"; }\n.bi-unindent::before { content: \"\\f823\"; }\n.bi-unity::before { content: \"\\f824\"; }\n.bi-universal-access-circle::before { content: \"\\f825\"; }\n.bi-universal-access::before { content: \"\\f826\"; }\n.bi-virus::before { content: \"\\f827\"; }\n.bi-virus2::before { content: \"\\f828\"; }\n.bi-wechat::before { content: \"\\f829\"; }\n.bi-yelp::before { content: \"\\f82a\"; }\n.bi-sign-stop-fill::before { content: \"\\f82b\"; }\n.bi-sign-stop-lights-fill::before { content: \"\\f82c\"; }\n.bi-sign-stop-lights::before { content: \"\\f82d\"; }\n.bi-sign-stop::before { content: \"\\f82e\"; }\n.bi-sign-turn-left-fill::before { content: \"\\f82f\"; }\n.bi-sign-turn-left::before { content: \"\\f830\"; }\n.bi-sign-turn-right-fill::before { content: \"\\f831\"; }\n.bi-sign-turn-right::before { content: \"\\f832\"; }\n.bi-sign-turn-slight-left-fill::before { content: \"\\f833\"; }\n.bi-sign-turn-slight-left::before { content: \"\\f834\"; }\n.bi-sign-turn-slight-right-fill::before { content: \"\\f835\"; }\n.bi-sign-turn-slight-right::before { content: \"\\f836\"; }\n.bi-sign-yield-fill::before { content: \"\\f837\"; }\n.bi-sign-yield::before { content: \"\\f838\"; }\n.bi-ev-station-fill::before { content: \"\\f839\"; }\n.bi-ev-station::before { content: \"\\f83a\"; }\n.bi-fuel-pump-diesel-fill::before { content: \"\\f83b\"; }\n.bi-fuel-pump-diesel::before { content: \"\\f83c\"; }\n.bi-fuel-pump-fill::before { content: \"\\f83d\"; }\n.bi-fuel-pump::before { content: \"\\f83e\"; }\n.bi-0-circle-fill::before { content: \"\\f83f\"; }\n.bi-0-circle::before { content: \"\\f840\"; }\n.bi-0-square-fill::before { content: \"\\f841\"; }\n.bi-0-square::before { content: \"\\f842\"; }\n.bi-rocket-fill::before { content: \"\\f843\"; }\n.bi-rocket-takeoff-fill::before { content: \"\\f844\"; }\n.bi-rocket-takeoff::before { content: \"\\f845\"; }\n.bi-rocket::before { content: \"\\f846\"; }\n.bi-stripe::before { content: \"\\f847\"; }\n.bi-subscript::before { content: \"\\f848\"; }\n.bi-superscript::before { content: \"\\f849\"; }\n.bi-trello::before { content: \"\\f84a\"; }\n.bi-envelope-at-fill::before { content: \"\\f84b\"; }\n.bi-envelope-at::before { content: \"\\f84c\"; }\n.bi-regex::before { content: \"\\f84d\"; }\n.bi-text-wrap::before { content: \"\\f84e\"; }\n.bi-sign-dead-end-fill::before { content: \"\\f84f\"; }\n.bi-sign-dead-end::before { content: \"\\f850\"; }\n.bi-sign-do-not-enter-fill::before { content: \"\\f851\"; }\n.bi-sign-do-not-enter::before { content: \"\\f852\"; }\n.bi-sign-intersection-fill::before { content: \"\\f853\"; }\n.bi-sign-intersection-side-fill::before { content: \"\\f854\"; }\n.bi-sign-intersection-side::before { content: \"\\f855\"; }\n.bi-sign-intersection-t-fill::before { content: \"\\f856\"; }\n.bi-sign-intersection-t::before { content: \"\\f857\"; }\n.bi-sign-intersection-y-fill::before { content: \"\\f858\"; }\n.bi-sign-intersection-y::before { content: \"\\f859\"; }\n.bi-sign-intersection::before { content: \"\\f85a\"; }\n.bi-sign-merge-left-fill::before { content: \"\\f85b\"; }\n.bi-sign-merge-left::before { content: \"\\f85c\"; }\n.bi-sign-merge-right-fill::before { content: \"\\f85d\"; }\n.bi-sign-merge-right::before { content: \"\\f85e\"; }\n.bi-sign-no-left-turn-fill::before { content: \"\\f85f\"; }\n.bi-sign-no-left-turn::before { content: \"\\f860\"; }\n.bi-sign-no-parking-fill::before { content: \"\\f861\"; }\n.bi-sign-no-parking::before { content: \"\\f862\"; }\n.bi-sign-no-right-turn-fill::before { content: \"\\f863\"; }\n.bi-sign-no-right-turn::before { content: \"\\f864\"; }\n.bi-sign-railroad-fill::before { content: \"\\f865\"; }\n.bi-sign-railroad::before { content: \"\\f866\"; }\n.bi-building-add::before { content: \"\\f867\"; }\n.bi-building-check::before { content: \"\\f868\"; }\n.bi-building-dash::before { content: \"\\f869\"; }\n.bi-building-down::before { content: \"\\f86a\"; }\n.bi-building-exclamation::before { content: \"\\f86b\"; }\n.bi-building-fill-add::before { content: \"\\f86c\"; }\n.bi-building-fill-check::before { content: \"\\f86d\"; }\n.bi-building-fill-dash::before { content: \"\\f86e\"; }\n.bi-building-fill-down::before { content: \"\\f86f\"; }\n.bi-building-fill-exclamation::before { content: \"\\f870\"; }\n.bi-building-fill-gear::before { content: \"\\f871\"; }\n.bi-building-fill-lock::before { content: \"\\f872\"; }\n.bi-building-fill-slash::before { content: \"\\f873\"; }\n.bi-building-fill-up::before { content: \"\\f874\"; }\n.bi-building-fill-x::before { content: \"\\f875\"; }\n.bi-building-fill::before { content: \"\\f876\"; }\n.bi-building-gear::before { content: \"\\f877\"; }\n.bi-building-lock::before { content: \"\\f878\"; }\n.bi-building-slash::before { content: \"\\f879\"; }\n.bi-building-up::before { content: \"\\f87a\"; }\n.bi-building-x::before { content: \"\\f87b\"; }\n.bi-buildings-fill::before { content: \"\\f87c\"; }\n.bi-buildings::before { content: \"\\f87d\"; }\n.bi-bus-front-fill::before { content: \"\\f87e\"; }\n.bi-bus-front::before { content: \"\\f87f\"; }\n.bi-ev-front-fill::before { content: \"\\f880\"; }\n.bi-ev-front::before { content: \"\\f881\"; }\n.bi-globe-americas::before { content: \"\\f882\"; }\n.bi-globe-asia-australia::before { content: \"\\f883\"; }\n.bi-globe-central-south-asia::before { content: \"\\f884\"; }\n.bi-globe-europe-africa::before { content: \"\\f885\"; }\n.bi-house-add-fill::before { content: \"\\f886\"; }\n.bi-house-add::before { content: \"\\f887\"; }\n.bi-house-check-fill::before { content: \"\\f888\"; }\n.bi-house-check::before { content: \"\\f889\"; }\n.bi-house-dash-fill::before { content: \"\\f88a\"; }\n.bi-house-dash::before { content: \"\\f88b\"; }\n.bi-house-down-fill::before { content: \"\\f88c\"; }\n.bi-house-down::before { content: \"\\f88d\"; }\n.bi-house-exclamation-fill::before { content: \"\\f88e\"; }\n.bi-house-exclamation::before { content: \"\\f88f\"; }\n.bi-house-gear-fill::before { content: \"\\f890\"; }\n.bi-house-gear::before { content: \"\\f891\"; }\n.bi-house-lock-fill::before { content: \"\\f892\"; }\n.bi-house-lock::before { content: \"\\f893\"; }\n.bi-house-slash-fill::before { content: \"\\f894\"; }\n.bi-house-slash::before { content: \"\\f895\"; }\n.bi-house-up-fill::before { content: \"\\f896\"; }\n.bi-house-up::before { content: \"\\f897\"; }\n.bi-house-x-fill::before { content: \"\\f898\"; }\n.bi-house-x::before { content: \"\\f899\"; }\n.bi-person-add::before { content: \"\\f89a\"; }\n.bi-person-down::before { content: \"\\f89b\"; }\n.bi-person-exclamation::before { content: \"\\f89c\"; }\n.bi-person-fill-add::before { content: \"\\f89d\"; }\n.bi-person-fill-check::before { content: \"\\f89e\"; }\n.bi-person-fill-dash::before { content: \"\\f89f\"; }\n.bi-person-fill-down::before { content: \"\\f8a0\"; }\n.bi-person-fill-exclamation::before { content: \"\\f8a1\"; }\n.bi-person-fill-gear::before { content: \"\\f8a2\"; }\n.bi-person-fill-lock::before { content: \"\\f8a3\"; }\n.bi-person-fill-slash::before { content: \"\\f8a4\"; }\n.bi-person-fill-up::before { content: \"\\f8a5\"; }\n.bi-person-fill-x::before { content: \"\\f8a6\"; }\n.bi-person-gear::before { content: \"\\f8a7\"; }\n.bi-person-lock::before { content: \"\\f8a8\"; }\n.bi-person-slash::before { content: \"\\f8a9\"; }\n.bi-person-up::before { content: \"\\f8aa\"; }\n.bi-scooter::before { content: \"\\f8ab\"; }\n.bi-taxi-front-fill::before { content: \"\\f8ac\"; }\n.bi-taxi-front::before { content: \"\\f8ad\"; }\n.bi-amd::before { content: \"\\f8ae\"; }\n.bi-database-add::before { content: \"\\f8af\"; }\n.bi-database-check::before { content: \"\\f8b0\"; }\n.bi-database-dash::before { content: \"\\f8b1\"; }\n.bi-database-down::before { content: \"\\f8b2\"; }\n.bi-database-exclamation::before { content: \"\\f8b3\"; }\n.bi-database-fill-add::before { content: \"\\f8b4\"; }\n.bi-database-fill-check::before { content: \"\\f8b5\"; }\n.bi-database-fill-dash::before { content: \"\\f8b6\"; }\n.bi-database-fill-down::before { content: \"\\f8b7\"; }\n.bi-database-fill-exclamation::before { content: \"\\f8b8\"; }\n.bi-database-fill-gear::before { content: \"\\f8b9\"; }\n.bi-database-fill-lock::before { content: \"\\f8ba\"; }\n.bi-database-fill-slash::before { content: \"\\f8bb\"; }\n.bi-database-fill-up::before { content: \"\\f8bc\"; }\n.bi-database-fill-x::before { content: \"\\f8bd\"; }\n.bi-database-fill::before { content: \"\\f8be\"; }\n.bi-database-gear::before { content: \"\\f8bf\"; }\n.bi-database-lock::before { content: \"\\f8c0\"; }\n.bi-database-slash::before { content: \"\\f8c1\"; }\n.bi-database-up::before { content: \"\\f8c2\"; }\n.bi-database-x::before { content: \"\\f8c3\"; }\n.bi-database::before { content: \"\\f8c4\"; }\n.bi-houses-fill::before { content: \"\\f8c5\"; }\n.bi-houses::before { content: \"\\f8c6\"; }\n.bi-nvidia::before { content: \"\\f8c7\"; }\n.bi-person-vcard-fill::before { content: \"\\f8c8\"; }\n.bi-person-vcard::before { content: \"\\f8c9\"; }\n.bi-sina-weibo::before { content: \"\\f8ca\"; }\n.bi-tencent-qq::before { content: \"\\f8cb\"; }\n.bi-wikipedia::before { content: \"\\f8cc\"; }\n.bi-alphabet-uppercase::before { content: \"\\f2a5\"; }\n.bi-alphabet::before { content: \"\\f68a\"; }\n.bi-amazon::before { content: \"\\f68d\"; }\n.bi-arrows-collapse-vertical::before { content: \"\\f690\"; }\n.bi-arrows-expand-vertical::before { content: \"\\f695\"; }\n.bi-arrows-vertical::before { content: \"\\f698\"; }\n.bi-arrows::before { content: \"\\f6a2\"; }\n.bi-ban-fill::before { content: \"\\f6a3\"; }\n.bi-ban::before { content: \"\\f6b6\"; }\n.bi-bing::before { content: \"\\f6c2\"; }\n.bi-cake::before { content: \"\\f6e0\"; }\n.bi-cake2::before { content: \"\\f6ed\"; }\n.bi-cookie::before { content: \"\\f6ee\"; }\n.bi-copy::before { content: \"\\f759\"; }\n.bi-crosshair::before { content: \"\\f769\"; }\n.bi-crosshair2::before { content: \"\\f794\"; }\n.bi-emoji-astonished-fill::before { content: \"\\f795\"; }\n.bi-emoji-astonished::before { content: \"\\f79a\"; }\n.bi-emoji-grimace-fill::before { content: \"\\f79b\"; }\n.bi-emoji-grimace::before { content: \"\\f7a0\"; }\n.bi-emoji-grin-fill::before { content: \"\\f7a1\"; }\n.bi-emoji-grin::before { content: \"\\f7a6\"; }\n.bi-emoji-surprise-fill::before { content: \"\\f7a7\"; }\n.bi-emoji-surprise::before { content: \"\\f7ac\"; }\n.bi-emoji-tear-fill::before { content: \"\\f7ad\"; }\n.bi-emoji-tear::before { content: \"\\f7b2\"; }\n.bi-envelope-arrow-down-fill::before { content: \"\\f7b3\"; }\n.bi-envelope-arrow-down::before { content: \"\\f7b8\"; }\n.bi-envelope-arrow-up-fill::before { content: \"\\f7b9\"; }\n.bi-envelope-arrow-up::before { content: \"\\f7be\"; }\n.bi-feather::before { content: \"\\f7bf\"; }\n.bi-feather2::before { content: \"\\f7c4\"; }\n.bi-floppy-fill::before { content: \"\\f7c5\"; }\n.bi-floppy::before { content: \"\\f7d8\"; }\n.bi-floppy2-fill::before { content: \"\\f7d9\"; }\n.bi-floppy2::before { content: \"\\f7e4\"; }\n.bi-gitlab::before { content: \"\\f7e5\"; }\n.bi-highlighter::before { content: \"\\f7f8\"; }\n.bi-marker-tip::before { content: \"\\f802\"; }\n.bi-nvme-fill::before { content: \"\\f803\"; }\n.bi-nvme::before { content: \"\\f80c\"; }\n.bi-opencollective::before { content: \"\\f80d\"; }\n.bi-pci-card-network::before { content: \"\\f8cd\"; }\n.bi-pci-card-sound::before { content: \"\\f8ce\"; }\n.bi-radar::before { content: \"\\f8cf\"; }\n.bi-send-arrow-down-fill::before { content: \"\\f8d0\"; }\n.bi-send-arrow-down::before { content: \"\\f8d1\"; }\n.bi-send-arrow-up-fill::before { content: \"\\f8d2\"; }\n.bi-send-arrow-up::before { content: \"\\f8d3\"; }\n.bi-sim-slash-fill::before { content: \"\\f8d4\"; }\n.bi-sim-slash::before { content: \"\\f8d5\"; }\n.bi-sourceforge::before { content: \"\\f8d6\"; }\n.bi-substack::before { content: \"\\f8d7\"; }\n.bi-threads-fill::before { content: \"\\f8d8\"; }\n.bi-threads::before { content: \"\\f8d9\"; }\n.bi-transparency::before { content: \"\\f8da\"; }\n.bi-twitter-x::before { content: \"\\f8db\"; }\n.bi-type-h4::before { content: \"\\f8dc\"; }\n.bi-type-h5::before { content: \"\\f8dd\"; }\n.bi-type-h6::before { content: \"\\f8de\"; }\n.bi-backpack-fill::before { content: \"\\f8df\"; }\n.bi-backpack::before { content: \"\\f8e0\"; }\n.bi-backpack2-fill::before { content: \"\\f8e1\"; }\n.bi-backpack2::before { content: \"\\f8e2\"; }\n.bi-backpack3-fill::before { content: \"\\f8e3\"; }\n.bi-backpack3::before { content: \"\\f8e4\"; }\n.bi-backpack4-fill::before { content: \"\\f8e5\"; }\n.bi-backpack4::before { content: \"\\f8e6\"; }\n.bi-brilliance::before { content: \"\\f8e7\"; }\n.bi-cake-fill::before { content: \"\\f8e8\"; }\n.bi-cake2-fill::before { content: \"\\f8e9\"; }\n.bi-duffle-fill::before { content: \"\\f8ea\"; }\n.bi-duffle::before { content: \"\\f8eb\"; }\n.bi-exposure::before { content: \"\\f8ec\"; }\n.bi-gender-neuter::before { content: \"\\f8ed\"; }\n.bi-highlights::before { content: \"\\f8ee\"; }\n.bi-luggage-fill::before { content: \"\\f8ef\"; }\n.bi-luggage::before { content: \"\\f8f0\"; }\n.bi-mailbox-flag::before { content: \"\\f8f1\"; }\n.bi-mailbox2-flag::before { content: \"\\f8f2\"; }\n.bi-noise-reduction::before { content: \"\\f8f3\"; }\n.bi-passport-fill::before { content: \"\\f8f4\"; }\n.bi-passport::before { content: \"\\f8f5\"; }\n.bi-person-arms-up::before { content: \"\\f8f6\"; }\n.bi-person-raised-hand::before { content: \"\\f8f7\"; }\n.bi-person-standing-dress::before { content: \"\\f8f8\"; }\n.bi-person-standing::before { content: \"\\f8f9\"; }\n.bi-person-walking::before { content: \"\\f8fa\"; }\n.bi-person-wheelchair::before { content: \"\\f8fb\"; }\n.bi-shadows::before { content: \"\\f8fc\"; }\n.bi-suitcase-fill::before { content: \"\\f8fd\"; }\n.bi-suitcase-lg-fill::before { content: \"\\f8fe\"; }\n.bi-suitcase-lg::before { content: \"\\f8ff\"; }\n.bi-suitcase::before { content: \"\\f900\"; }\n.bi-suitcase2-fill::before { content: \"\\f901\"; }\n.bi-suitcase2::before { content: \"\\f902\"; }\n.bi-vignette::before { content: \"\\f903\"; }\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {



module.exports = function (url, options) {
  if (!options) {
    options = {};
  }
  if (!url) {
    return url;
  }
  url = String(url.__esModule ? url.default : url);

  // If url is already wrapped in quotes, remove them
  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }
  if (options.hash) {
    url += options.hash;
  }

  // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls
  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }
  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/bootstrap-icons/font/bootstrap-icons.css":
/*!***************************************************************!*\
  !*** ./node_modules/bootstrap-icons/font/bootstrap-icons.css ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_bootstrap_icons_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../css-loader/dist/cjs.js!./bootstrap-icons.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/bootstrap-icons/font/bootstrap-icons.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_bootstrap_icons_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_bootstrap_icons_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_bootstrap_icons_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_bootstrap_icons_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {



var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {



var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./node_modules/bootstrap-icons/font/fonts/bootstrap-icons.woff2?dd67030699838ea613ee6dbda90effa6":
/*!********************************************************************************************************!*\
  !*** ./node_modules/bootstrap-icons/font/fonts/bootstrap-icons.woff2?dd67030699838ea613ee6dbda90effa6 ***!
  \********************************************************************************************************/
/***/ ((module) => {

module.exports = "data:font/woff2;base64,";

/***/ }),

/***/ "./node_modules/bootstrap-icons/font/fonts/bootstrap-icons.woff?dd67030699838ea613ee6dbda90effa6":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/bootstrap-icons/font/fonts/bootstrap-icons.woff?dd67030699838ea613ee6dbda90effa6 ***!
  \*******************************************************************************************************/
/***/ ((module) => {

module.exports = "data:font/woff;base64,";

/***/ }),

/***/ "./node_modules/@kurkle/color/dist/color.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/@kurkle/color/dist/color.esm.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Color: () => (/* binding */ Color),
/* harmony export */   b2n: () => (/* binding */ b2n),
/* harmony export */   b2p: () => (/* binding */ b2p),
/* harmony export */   "default": () => (/* binding */ index_esm),
/* harmony export */   hexParse: () => (/* binding */ hexParse),
/* harmony export */   hexString: () => (/* binding */ hexString),
/* harmony export */   hsl2rgb: () => (/* binding */ hsl2rgb),
/* harmony export */   hslString: () => (/* binding */ hslString),
/* harmony export */   hsv2rgb: () => (/* binding */ hsv2rgb),
/* harmony export */   hueParse: () => (/* binding */ hueParse),
/* harmony export */   hwb2rgb: () => (/* binding */ hwb2rgb),
/* harmony export */   lim: () => (/* binding */ lim),
/* harmony export */   n2b: () => (/* binding */ n2b),
/* harmony export */   n2p: () => (/* binding */ n2p),
/* harmony export */   nameParse: () => (/* binding */ nameParse),
/* harmony export */   p2b: () => (/* binding */ p2b),
/* harmony export */   rgb2hsl: () => (/* binding */ rgb2hsl),
/* harmony export */   rgbParse: () => (/* binding */ rgbParse),
/* harmony export */   rgbString: () => (/* binding */ rgbString),
/* harmony export */   rotate: () => (/* binding */ rotate),
/* harmony export */   round: () => (/* binding */ round)
/* harmony export */ });
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */
function round(v) {
  return v + 0.5 | 0;
}
const lim = (v, l, h) => Math.max(Math.min(v, h), l);
function p2b(v) {
  return lim(round(v * 2.55), 0, 255);
}
function b2p(v) {
  return lim(round(v / 2.55), 0, 100);
}
function n2b(v) {
  return lim(round(v * 255), 0, 255);
}
function b2n(v) {
  return lim(round(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
  return lim(round(v * 100), 0, 100);
}

const map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};
const hex = [...'0123456789ABCDEF'];
const h1 = b => hex[b & 0xF];
const h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];
const eq = b => ((b & 0xF0) >> 4) === (b & 0xF);
const isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
function hexParse(str) {
  var len = str.length;
  var ret;
  if (str[0] === '#') {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map$1[str[1]] * 17,
        g: 255 & map$1[str[2]] * 17,
        b: 255 & map$1[str[3]] * 17,
        a: len === 5 ? map$1[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map$1[str[1]] << 4 | map$1[str[2]],
        g: map$1[str[3]] << 4 | map$1[str[4]],
        b: map$1[str[5]] << 4 | map$1[str[6]],
        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255
      };
    }
  }
  return ret;
}
const alpha = (a, f) => a < 255 ? f(a) : '';
function hexString(v) {
  var f = isShort(v) ? h1 : h2;
  return v
    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)
    : undefined;
}

const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h, s, l) {
  const a = s * Math.min(l, 1 - l);
  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  return [f(0), f(8), f(4)];
}
function hsv2rgbn(h, s, v) {
  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
  return [f(5), f(3), f(1)];
}
function hwb2rgbn(h, w, b) {
  const rgb = hsl2rgbn(h, 1, 0.5);
  let i;
  if (w + b > 1) {
    i = 1 / (w + b);
    w *= i;
    b *= i;
  }
  for (i = 0; i < 3; i++) {
    rgb[i] *= 1 - w - b;
    rgb[i] += w;
  }
  return rgb;
}
function hueValue(r, g, b, d, max) {
  if (r === max) {
    return ((g - b) / d) + (g < b ? 6 : 0);
  }
  if (g === max) {
    return (b - r) / d + 2;
  }
  return (r - g) / d + 4;
}
function rgb2hsl(v) {
  const range = 255;
  const r = v.r / range;
  const g = v.g / range;
  const b = v.b / range;
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  const l = (max + min) / 2;
  let h, s, d;
  if (max !== min) {
    d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    h = hueValue(r, g, b, d, max);
    h = h * 60 + 0.5;
  }
  return [h | 0, s || 0, l];
}
function calln(f, a, b, c) {
  return (
    Array.isArray(a)
      ? f(a[0], a[1], a[2])
      : f(a, b, c)
  ).map(n2b);
}
function hsl2rgb(h, s, l) {
  return calln(hsl2rgbn, h, s, l);
}
function hwb2rgb(h, w, b) {
  return calln(hwb2rgbn, h, w, b);
}
function hsv2rgb(h, s, v) {
  return calln(hsv2rgbn, h, s, v);
}
function hue(h) {
  return (h % 360 + 360) % 360;
}
function hueParse(str) {
  const m = HUE_RE.exec(str);
  let a = 255;
  let v;
  if (!m) {
    return;
  }
  if (m[5] !== v) {
    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
  }
  const h = hue(+m[2]);
  const p1 = +m[3] / 100;
  const p2 = +m[4] / 100;
  if (m[1] === 'hwb') {
    v = hwb2rgb(h, p1, p2);
  } else if (m[1] === 'hsv') {
    v = hsv2rgb(h, p1, p2);
  } else {
    v = hsl2rgb(h, p1, p2);
  }
  return {
    r: v[0],
    g: v[1],
    b: v[2],
    a: a
  };
}
function rotate(v, deg) {
  var h = rgb2hsl(v);
  h[0] = hue(h[0] + deg);
  h = hsl2rgb(h);
  v.r = h[0];
  v.g = h[1];
  v.b = h[2];
}
function hslString(v) {
  if (!v) {
    return;
  }
  const a = rgb2hsl(v);
  const h = a[0];
  const s = n2p(a[1]);
  const l = n2p(a[2]);
  return v.a < 255
    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`
    : `hsl(${h}, ${s}%, ${l}%)`;
}

const map = {
  x: 'dark',
  Z: 'light',
  Y: 're',
  X: 'blu',
  W: 'gr',
  V: 'medium',
  U: 'slate',
  A: 'ee',
  T: 'ol',
  S: 'or',
  B: 'ra',
  C: 'lateg',
  D: 'ights',
  R: 'in',
  Q: 'turquois',
  E: 'hi',
  P: 'ro',
  O: 'al',
  N: 'le',
  M: 'de',
  L: 'yello',
  F: 'en',
  K: 'ch',
  G: 'arks',
  H: 'ea',
  I: 'ightg',
  J: 'wh'
};
const names$1 = {
  OiceXe: 'f0f8ff',
  antiquewEte: 'faebd7',
  aqua: 'ffff',
  aquamarRe: '7fffd4',
  azuY: 'f0ffff',
  beige: 'f5f5dc',
  bisque: 'ffe4c4',
  black: '0',
  blanKedOmond: 'ffebcd',
  Xe: 'ff',
  XeviTet: '8a2be2',
  bPwn: 'a52a2a',
  burlywood: 'deb887',
  caMtXe: '5f9ea0',
  KartYuse: '7fff00',
  KocTate: 'd2691e',
  cSO: 'ff7f50',
  cSnflowerXe: '6495ed',
  cSnsilk: 'fff8dc',
  crimson: 'dc143c',
  cyan: 'ffff',
  xXe: '8b',
  xcyan: '8b8b',
  xgTMnPd: 'b8860b',
  xWay: 'a9a9a9',
  xgYF: '6400',
  xgYy: 'a9a9a9',
  xkhaki: 'bdb76b',
  xmagFta: '8b008b',
  xTivegYF: '556b2f',
  xSange: 'ff8c00',
  xScEd: '9932cc',
  xYd: '8b0000',
  xsOmon: 'e9967a',
  xsHgYF: '8fbc8f',
  xUXe: '483d8b',
  xUWay: '2f4f4f',
  xUgYy: '2f4f4f',
  xQe: 'ced1',
  xviTet: '9400d3',
  dAppRk: 'ff1493',
  dApskyXe: 'bfff',
  dimWay: '696969',
  dimgYy: '696969',
  dodgerXe: '1e90ff',
  fiYbrick: 'b22222',
  flSOwEte: 'fffaf0',
  foYstWAn: '228b22',
  fuKsia: 'ff00ff',
  gaRsbSo: 'dcdcdc',
  ghostwEte: 'f8f8ff',
  gTd: 'ffd700',
  gTMnPd: 'daa520',
  Way: '808080',
  gYF: '8000',
  gYFLw: 'adff2f',
  gYy: '808080',
  honeyMw: 'f0fff0',
  hotpRk: 'ff69b4',
  RdianYd: 'cd5c5c',
  Rdigo: '4b0082',
  ivSy: 'fffff0',
  khaki: 'f0e68c',
  lavFMr: 'e6e6fa',
  lavFMrXsh: 'fff0f5',
  lawngYF: '7cfc00',
  NmoncEffon: 'fffacd',
  ZXe: 'add8e6',
  ZcSO: 'f08080',
  Zcyan: 'e0ffff',
  ZgTMnPdLw: 'fafad2',
  ZWay: 'd3d3d3',
  ZgYF: '90ee90',
  ZgYy: 'd3d3d3',
  ZpRk: 'ffb6c1',
  ZsOmon: 'ffa07a',
  ZsHgYF: '20b2aa',
  ZskyXe: '87cefa',
  ZUWay: '778899',
  ZUgYy: '778899',
  ZstAlXe: 'b0c4de',
  ZLw: 'ffffe0',
  lime: 'ff00',
  limegYF: '32cd32',
  lRF: 'faf0e6',
  magFta: 'ff00ff',
  maPon: '800000',
  VaquamarRe: '66cdaa',
  VXe: 'cd',
  VScEd: 'ba55d3',
  VpurpN: '9370db',
  VsHgYF: '3cb371',
  VUXe: '7b68ee',
  VsprRggYF: 'fa9a',
  VQe: '48d1cc',
  VviTetYd: 'c71585',
  midnightXe: '191970',
  mRtcYam: 'f5fffa',
  mistyPse: 'ffe4e1',
  moccasR: 'ffe4b5',
  navajowEte: 'ffdead',
  navy: '80',
  Tdlace: 'fdf5e6',
  Tive: '808000',
  TivedBb: '6b8e23',
  Sange: 'ffa500',
  SangeYd: 'ff4500',
  ScEd: 'da70d6',
  pOegTMnPd: 'eee8aa',
  pOegYF: '98fb98',
  pOeQe: 'afeeee',
  pOeviTetYd: 'db7093',
  papayawEp: 'ffefd5',
  pHKpuff: 'ffdab9',
  peru: 'cd853f',
  pRk: 'ffc0cb',
  plum: 'dda0dd',
  powMrXe: 'b0e0e6',
  purpN: '800080',
  YbeccapurpN: '663399',
  Yd: 'ff0000',
  Psybrown: 'bc8f8f',
  PyOXe: '4169e1',
  saddNbPwn: '8b4513',
  sOmon: 'fa8072',
  sandybPwn: 'f4a460',
  sHgYF: '2e8b57',
  sHshell: 'fff5ee',
  siFna: 'a0522d',
  silver: 'c0c0c0',
  skyXe: '87ceeb',
  UXe: '6a5acd',
  UWay: '708090',
  UgYy: '708090',
  snow: 'fffafa',
  sprRggYF: 'ff7f',
  stAlXe: '4682b4',
  tan: 'd2b48c',
  teO: '8080',
  tEstN: 'd8bfd8',
  tomato: 'ff6347',
  Qe: '40e0d0',
  viTet: 'ee82ee',
  JHt: 'f5deb3',
  wEte: 'ffffff',
  wEtesmoke: 'f5f5f5',
  Lw: 'ffff00',
  LwgYF: '9acd32'
};
function unpack() {
  const unpacked = {};
  const keys = Object.keys(names$1);
  const tkeys = Object.keys(map);
  let i, j, k, ok, nk;
  for (i = 0; i < keys.length; i++) {
    ok = nk = keys[i];
    for (j = 0; j < tkeys.length; j++) {
      k = tkeys[j];
      nk = nk.replace(k, map[k]);
    }
    k = parseInt(names$1[ok], 16);
    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
  }
  return unpacked;
}

let names;
function nameParse(str) {
  if (!names) {
    names = unpack();
    names.transparent = [0, 0, 0, 0];
  }
  const a = names[str.toLowerCase()];
  return a && {
    r: a[0],
    g: a[1],
    b: a[2],
    a: a.length === 4 ? a[3] : 255
  };
}

const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
  const m = RGB_RE.exec(str);
  let a = 255;
  let r, g, b;
  if (!m) {
    return;
  }
  if (m[7] !== r) {
    const v = +m[7];
    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
  }
  r = +m[1];
  g = +m[3];
  b = +m[5];
  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
  return {
    r: r,
    g: g,
    b: b,
    a: a
  };
}
function rgbString(v) {
  return v && (
    v.a < 255
      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`
      : `rgb(${v.r}, ${v.g}, ${v.b})`
  );
}

const to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;
const from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
function interpolate(rgb1, rgb2, t) {
  const r = from(b2n(rgb1.r));
  const g = from(b2n(rgb1.g));
  const b = from(b2n(rgb1.b));
  return {
    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),
    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),
    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),
    a: rgb1.a + t * (rgb2.a - rgb1.a)
  };
}

function modHSL(v, i, ratio) {
  if (v) {
    let tmp = rgb2hsl(v);
    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v.r = tmp[0];
    v.g = tmp[1];
    v.b = tmp[2];
  }
}
function clone(v, proto) {
  return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
  var v = {r: 0, g: 0, b: 0, a: 255};
  if (Array.isArray(input)) {
    if (input.length >= 3) {
      v = {r: input[0], g: input[1], b: input[2], a: 255};
      if (input.length > 3) {
        v.a = n2b(input[3]);
      }
    }
  } else {
    v = clone(input, {r: 0, g: 0, b: 0, a: 1});
    v.a = n2b(v.a);
  }
  return v;
}
function functionParse(str) {
  if (str.charAt(0) === 'r') {
    return rgbParse(str);
  }
  return hueParse(str);
}
class Color {
  constructor(input) {
    if (input instanceof Color) {
      return input;
    }
    const type = typeof input;
    let v;
    if (type === 'object') {
      v = fromObject(input);
    } else if (type === 'string') {
      v = hexParse(input) || nameParse(input) || functionParse(input);
    }
    this._rgb = v;
    this._valid = !!v;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
    var v = clone(this._rgb);
    if (v) {
      v.a = b2n(v.a);
    }
    return v;
  }
  set rgb(obj) {
    this._rgb = fromObject(obj);
  }
  rgbString() {
    return this._valid ? rgbString(this._rgb) : undefined;
  }
  hexString() {
    return this._valid ? hexString(this._rgb) : undefined;
  }
  hslString() {
    return this._valid ? hslString(this._rgb) : undefined;
  }
  mix(color, weight) {
    if (color) {
      const c1 = this.rgb;
      const c2 = color.rgb;
      let w2;
      const p = weight === w2 ? 0.5 : weight;
      const w = 2 * p - 1;
      const a = c1.a - c2.a;
      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
      w2 = 1 - w1;
      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
      c1.a = p * c1.a + (1 - p) * c2.a;
      this.rgb = c1;
    }
    return this;
  }
  interpolate(color, t) {
    if (color) {
      this._rgb = interpolate(this._rgb, color._rgb, t);
    }
    return this;
  }
  clone() {
    return new Color(this.rgb);
  }
  alpha(a) {
    this._rgb.a = n2b(a);
    return this;
  }
  clearer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 - ratio;
    return this;
  }
  greyscale() {
    const rgb = this._rgb;
    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    rgb.r = rgb.g = rgb.b = val;
    return this;
  }
  opaquer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 + ratio;
    return this;
  }
  negate() {
    const v = this._rgb;
    v.r = 255 - v.r;
    v.g = 255 - v.g;
    v.b = 255 - v.b;
    return this;
  }
  lighten(ratio) {
    modHSL(this._rgb, 2, ratio);
    return this;
  }
  darken(ratio) {
    modHSL(this._rgb, 2, -ratio);
    return this;
  }
  saturate(ratio) {
    modHSL(this._rgb, 1, ratio);
    return this;
  }
  desaturate(ratio) {
    modHSL(this._rgb, 1, -ratio);
    return this;
  }
  rotate(deg) {
    rotate(this._rgb, deg);
    return this;
  }
}

function index_esm(input) {
  return new Color(input);
}




/***/ }),

/***/ "./node_modules/chart.js/dist/chart.js":
/*!*********************************************!*\
  !*** ./node_modules/chart.js/dist/chart.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Animation: () => (/* binding */ Animation),
/* harmony export */   Animations: () => (/* binding */ Animations),
/* harmony export */   ArcElement: () => (/* binding */ ArcElement),
/* harmony export */   BarController: () => (/* binding */ BarController),
/* harmony export */   BarElement: () => (/* binding */ BarElement),
/* harmony export */   BasePlatform: () => (/* binding */ BasePlatform),
/* harmony export */   BasicPlatform: () => (/* binding */ BasicPlatform),
/* harmony export */   BubbleController: () => (/* binding */ BubbleController),
/* harmony export */   CategoryScale: () => (/* binding */ CategoryScale),
/* harmony export */   Chart: () => (/* binding */ Chart),
/* harmony export */   Colors: () => (/* binding */ plugin_colors),
/* harmony export */   DatasetController: () => (/* binding */ DatasetController),
/* harmony export */   Decimation: () => (/* binding */ plugin_decimation),
/* harmony export */   DomPlatform: () => (/* binding */ DomPlatform),
/* harmony export */   DoughnutController: () => (/* binding */ DoughnutController),
/* harmony export */   Element: () => (/* binding */ Element),
/* harmony export */   Filler: () => (/* binding */ index),
/* harmony export */   Interaction: () => (/* binding */ Interaction),
/* harmony export */   Legend: () => (/* binding */ plugin_legend),
/* harmony export */   LineController: () => (/* binding */ LineController),
/* harmony export */   LineElement: () => (/* binding */ LineElement),
/* harmony export */   LinearScale: () => (/* binding */ LinearScale),
/* harmony export */   LogarithmicScale: () => (/* binding */ LogarithmicScale),
/* harmony export */   PieController: () => (/* binding */ PieController),
/* harmony export */   PointElement: () => (/* binding */ PointElement),
/* harmony export */   PolarAreaController: () => (/* binding */ PolarAreaController),
/* harmony export */   RadarController: () => (/* binding */ RadarController),
/* harmony export */   RadialLinearScale: () => (/* binding */ RadialLinearScale),
/* harmony export */   Scale: () => (/* binding */ Scale),
/* harmony export */   ScatterController: () => (/* binding */ ScatterController),
/* harmony export */   SubTitle: () => (/* binding */ plugin_subtitle),
/* harmony export */   Ticks: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aL),
/* harmony export */   TimeScale: () => (/* binding */ TimeScale),
/* harmony export */   TimeSeriesScale: () => (/* binding */ TimeSeriesScale),
/* harmony export */   Title: () => (/* binding */ plugin_title),
/* harmony export */   Tooltip: () => (/* binding */ plugin_tooltip),
/* harmony export */   _adapters: () => (/* binding */ adapters),
/* harmony export */   _detectPlatform: () => (/* binding */ _detectPlatform),
/* harmony export */   animator: () => (/* binding */ animator),
/* harmony export */   controllers: () => (/* binding */ controllers),
/* harmony export */   defaults: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d),
/* harmony export */   elements: () => (/* binding */ elements),
/* harmony export */   layouts: () => (/* binding */ layouts),
/* harmony export */   plugins: () => (/* binding */ plugins),
/* harmony export */   registerables: () => (/* binding */ registerables),
/* harmony export */   registry: () => (/* binding */ registry),
/* harmony export */   scales: () => (/* binding */ scales)
/* harmony export */ });
/* harmony import */ var _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/helpers.segment.js */ "./node_modules/chart.js/dist/chunks/helpers.segment.js");
/*!
 * Chart.js v4.4.3
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */



class Animator {
    constructor(){
        this._request = null;
        this._charts = new Map();
        this._running = false;
        this._lastDate = undefined;
    }
 _notify(chart, anims, date, type) {
        const callbacks = anims.listeners[type];
        const numSteps = anims.duration;
        callbacks.forEach((fn)=>fn({
                chart,
                initial: anims.initial,
                numSteps,
                currentStep: Math.min(date - anims.start, numSteps)
            }));
    }
 _refresh() {
        if (this._request) {
            return;
        }
        this._running = true;
        this._request = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.r.call(window, ()=>{
            this._update();
            this._request = null;
            if (this._running) {
                this._refresh();
            }
        });
    }
 _update(date = Date.now()) {
        let remaining = 0;
        this._charts.forEach((anims, chart)=>{
            if (!anims.running || !anims.items.length) {
                return;
            }
            const items = anims.items;
            let i = items.length - 1;
            let draw = false;
            let item;
            for(; i >= 0; --i){
                item = items[i];
                if (item._active) {
                    if (item._total > anims.duration) {
                        anims.duration = item._total;
                    }
                    item.tick(date);
                    draw = true;
                } else {
                    items[i] = items[items.length - 1];
                    items.pop();
                }
            }
            if (draw) {
                chart.draw();
                this._notify(chart, anims, date, 'progress');
            }
            if (!items.length) {
                anims.running = false;
                this._notify(chart, anims, date, 'complete');
                anims.initial = false;
            }
            remaining += items.length;
        });
        this._lastDate = date;
        if (remaining === 0) {
            this._running = false;
        }
    }
 _getAnims(chart) {
        const charts = this._charts;
        let anims = charts.get(chart);
        if (!anims) {
            anims = {
                running: false,
                initial: true,
                items: [],
                listeners: {
                    complete: [],
                    progress: []
                }
            };
            charts.set(chart, anims);
        }
        return anims;
    }
 listen(chart, event, cb) {
        this._getAnims(chart).listeners[event].push(cb);
    }
 add(chart, items) {
        if (!items || !items.length) {
            return;
        }
        this._getAnims(chart).items.push(...items);
    }
 has(chart) {
        return this._getAnims(chart).items.length > 0;
    }
 start(chart) {
        const anims = this._charts.get(chart);
        if (!anims) {
            return;
        }
        anims.running = true;
        anims.start = Date.now();
        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);
        this._refresh();
    }
    running(chart) {
        if (!this._running) {
            return false;
        }
        const anims = this._charts.get(chart);
        if (!anims || !anims.running || !anims.items.length) {
            return false;
        }
        return true;
    }
 stop(chart) {
        const anims = this._charts.get(chart);
        if (!anims || !anims.items.length) {
            return;
        }
        const items = anims.items;
        let i = items.length - 1;
        for(; i >= 0; --i){
            items[i].cancel();
        }
        anims.items = [];
        this._notify(chart, anims, Date.now(), 'complete');
    }
 remove(chart) {
        return this._charts.delete(chart);
    }
}
var animator = /* #__PURE__ */ new Animator();

const transparent = 'transparent';
const interpolators = {
    boolean (from, to, factor) {
        return factor > 0.5 ? to : from;
    },
 color (from, to, factor) {
        const c0 = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.c)(from || transparent);
        const c1 = c0.valid && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.c)(to || transparent);
        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
    },
    number (from, to, factor) {
        return from + (to - from) * factor;
    }
};
class Animation {
    constructor(cfg, target, prop, to){
        const currentValue = target[prop];
        to = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a)([
            cfg.to,
            to,
            currentValue,
            cfg.from
        ]);
        const from = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a)([
            cfg.from,
            currentValue,
            to
        ]);
        this._active = true;
        this._fn = cfg.fn || interpolators[cfg.type || typeof from];
        this._easing = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.e[cfg.easing] || _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.e.linear;
        this._start = Math.floor(Date.now() + (cfg.delay || 0));
        this._duration = this._total = Math.floor(cfg.duration);
        this._loop = !!cfg.loop;
        this._target = target;
        this._prop = prop;
        this._from = from;
        this._to = to;
        this._promises = undefined;
    }
    active() {
        return this._active;
    }
    update(cfg, to, date) {
        if (this._active) {
            this._notify(false);
            const currentValue = this._target[this._prop];
            const elapsed = date - this._start;
            const remain = this._duration - elapsed;
            this._start = date;
            this._duration = Math.floor(Math.max(remain, cfg.duration));
            this._total += elapsed;
            this._loop = !!cfg.loop;
            this._to = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a)([
                cfg.to,
                to,
                currentValue,
                cfg.from
            ]);
            this._from = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a)([
                cfg.from,
                currentValue,
                to
            ]);
        }
    }
    cancel() {
        if (this._active) {
            this.tick(Date.now());
            this._active = false;
            this._notify(false);
        }
    }
    tick(date) {
        const elapsed = date - this._start;
        const duration = this._duration;
        const prop = this._prop;
        const from = this._from;
        const loop = this._loop;
        const to = this._to;
        let factor;
        this._active = from !== to && (loop || elapsed < duration);
        if (!this._active) {
            this._target[prop] = to;
            this._notify(true);
            return;
        }
        if (elapsed < 0) {
            this._target[prop] = from;
            return;
        }
        factor = elapsed / duration % 2;
        factor = loop && factor > 1 ? 2 - factor : factor;
        factor = this._easing(Math.min(1, Math.max(0, factor)));
        this._target[prop] = this._fn(from, to, factor);
    }
    wait() {
        const promises = this._promises || (this._promises = []);
        return new Promise((res, rej)=>{
            promises.push({
                res,
                rej
            });
        });
    }
    _notify(resolved) {
        const method = resolved ? 'res' : 'rej';
        const promises = this._promises || [];
        for(let i = 0; i < promises.length; i++){
            promises[i][method]();
        }
    }
}

class Animations {
    constructor(chart, config){
        this._chart = chart;
        this._properties = new Map();
        this.configure(config);
    }
    configure(config) {
        if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(config)) {
            return;
        }
        const animationOptions = Object.keys(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.animation);
        const animatedProps = this._properties;
        Object.getOwnPropertyNames(config).forEach((key)=>{
            const cfg = config[key];
            if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(cfg)) {
                return;
            }
            const resolved = {};
            for (const option of animationOptions){
                resolved[option] = cfg[option];
            }
            ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(cfg.properties) && cfg.properties || [
                key
            ]).forEach((prop)=>{
                if (prop === key || !animatedProps.has(prop)) {
                    animatedProps.set(prop, resolved);
                }
            });
        });
    }
 _animateOptions(target, values) {
        const newOptions = values.options;
        const options = resolveTargetOptions(target, newOptions);
        if (!options) {
            return [];
        }
        const animations = this._createAnimations(options, newOptions);
        if (newOptions.$shared) {
            awaitAll(target.options.$animations, newOptions).then(()=>{
                target.options = newOptions;
            }, ()=>{
            });
        }
        return animations;
    }
 _createAnimations(target, values) {
        const animatedProps = this._properties;
        const animations = [];
        const running = target.$animations || (target.$animations = {});
        const props = Object.keys(values);
        const date = Date.now();
        let i;
        for(i = props.length - 1; i >= 0; --i){
            const prop = props[i];
            if (prop.charAt(0) === '$') {
                continue;
            }
            if (prop === 'options') {
                animations.push(...this._animateOptions(target, values));
                continue;
            }
            const value = values[prop];
            let animation = running[prop];
            const cfg = animatedProps.get(prop);
            if (animation) {
                if (cfg && animation.active()) {
                    animation.update(cfg, value, date);
                    continue;
                } else {
                    animation.cancel();
                }
            }
            if (!cfg || !cfg.duration) {
                target[prop] = value;
                continue;
            }
            running[prop] = animation = new Animation(cfg, target, prop, value);
            animations.push(animation);
        }
        return animations;
    }
 update(target, values) {
        if (this._properties.size === 0) {
            Object.assign(target, values);
            return;
        }
        const animations = this._createAnimations(target, values);
        if (animations.length) {
            animator.add(this._chart, animations);
            return true;
        }
    }
}
function awaitAll(animations, properties) {
    const running = [];
    const keys = Object.keys(properties);
    for(let i = 0; i < keys.length; i++){
        const anim = animations[keys[i]];
        if (anim && anim.active()) {
            running.push(anim.wait());
        }
    }
    return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
    if (!newOptions) {
        return;
    }
    let options = target.options;
    if (!options) {
        target.options = newOptions;
        return;
    }
    if (options.$shared) {
        target.options = options = Object.assign({}, options, {
            $shared: false,
            $animations: {}
        });
    }
    return options;
}

function scaleClip(scale, allowedOverflow) {
    const opts = scale && scale.options || {};
    const reverse = opts.reverse;
    const min = opts.min === undefined ? allowedOverflow : 0;
    const max = opts.max === undefined ? allowedOverflow : 0;
    return {
        start: reverse ? max : min,
        end: reverse ? min : max
    };
}
function defaultClip(xScale, yScale, allowedOverflow) {
    if (allowedOverflow === false) {
        return false;
    }
    const x = scaleClip(xScale, allowedOverflow);
    const y = scaleClip(yScale, allowedOverflow);
    return {
        top: y.end,
        right: x.end,
        bottom: y.start,
        left: x.start
    };
}
function toClip(value) {
    let t, r, b, l;
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(value)) {
        t = value.top;
        r = value.right;
        b = value.bottom;
        l = value.left;
    } else {
        t = r = b = l = value;
    }
    return {
        top: t,
        right: r,
        bottom: b,
        left: l,
        disabled: value === false
    };
}
function getSortedDatasetIndices(chart, filterVisible) {
    const keys = [];
    const metasets = chart._getSortedDatasetMetas(filterVisible);
    let i, ilen;
    for(i = 0, ilen = metasets.length; i < ilen; ++i){
        keys.push(metasets[i].index);
    }
    return keys;
}
function applyStack(stack, value, dsIndex, options = {}) {
    const keys = stack.keys;
    const singleMode = options.mode === 'single';
    let i, ilen, datasetIndex, otherValue;
    if (value === null) {
        return;
    }
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        datasetIndex = +keys[i];
        if (datasetIndex === dsIndex) {
            if (options.all) {
                continue;
            }
            break;
        }
        otherValue = stack.values[datasetIndex];
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(otherValue) && (singleMode || value === 0 || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(value) === (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(otherValue))) {
            value += otherValue;
        }
    }
    return value;
}
function convertObjectDataToArray(data, meta) {
    const { iScale , vScale  } = meta;
    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';
    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';
    const keys = Object.keys(data);
    const adata = new Array(keys.length);
    let i, ilen, key;
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        key = keys[i];
        adata[i] = {
            [iAxisKey]: key,
            [vAxisKey]: data[key]
        };
    }
    return adata;
}
function isStacked(scale, meta) {
    const stacked = scale && scale.options.stacked;
    return stacked || stacked === undefined && meta.stack !== undefined;
}
function getStackKey(indexScale, valueScale, meta) {
    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();
    return {
        min: minDefined ? min : Number.NEGATIVE_INFINITY,
        max: maxDefined ? max : Number.POSITIVE_INFINITY
    };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
    const subStack = stacks[stackKey] || (stacks[stackKey] = {});
    return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){
        const value = stack[meta.index];
        if (positive && value > 0 || !positive && value < 0) {
            return meta.index;
        }
    }
    return null;
}
function updateStacks(controller, parsed) {
    const { chart , _cachedMeta: meta  } = controller;
    const stacks = chart._stacks || (chart._stacks = {});
    const { iScale , vScale , index: datasetIndex  } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const key = getStackKey(iScale, vScale, meta);
    const ilen = parsed.length;
    let stack;
    for(let i = 0; i < ilen; ++i){
        const item = parsed[i];
        const { [iAxis]: index , [vAxis]: value  } = item;
        const itemStacks = item._stacks || (item._stacks = {});
        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
        stack[datasetIndex] = value;
        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
        const visualValues = stack._visualValues || (stack._visualValues = {});
        visualValues[datasetIndex] = value;
    }
}
function getFirstScaleId(chart, axis) {
    const scales = chart.scales;
    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();
}
function createDatasetContext(parent, index) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(parent, {
        active: false,
        dataset: undefined,
        datasetIndex: index,
        index,
        mode: 'default',
        type: 'dataset'
    });
}
function createDataContext(parent, index, element) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(parent, {
        active: false,
        dataIndex: index,
        parsed: undefined,
        raw: undefined,
        element,
        index,
        mode: 'default',
        type: 'data'
    });
}
function clearStacks(meta, items) {
    const datasetIndex = meta.controller.index;
    const axis = meta.vScale && meta.vScale.axis;
    if (!axis) {
        return;
    }
    items = items || meta._parsed;
    for (const parsed of items){
        const stacks = parsed._stacks;
        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {
            return;
        }
        delete stacks[axis][datasetIndex];
        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {
            delete stacks[axis]._visualValues[datasetIndex];
        }
    }
}
const isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';
const cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {
        keys: getSortedDatasetIndices(chart, true),
        values: null
    };
class DatasetController {
 static defaults = {};
 static datasetElementType = null;
 static dataElementType = null;
 constructor(chart, datasetIndex){
        this.chart = chart;
        this._ctx = chart.ctx;
        this.index = datasetIndex;
        this._cachedDataOpts = {};
        this._cachedMeta = this.getMeta();
        this._type = this._cachedMeta.type;
        this.options = undefined;
         this._parsing = false;
        this._data = undefined;
        this._objectData = undefined;
        this._sharedOptions = undefined;
        this._drawStart = undefined;
        this._drawCount = undefined;
        this.enableOptionSharing = false;
        this.supportsDecimation = false;
        this.$context = undefined;
        this._syncList = [];
        this.datasetElementType = new.target.datasetElementType;
        this.dataElementType = new.target.dataElementType;
        this.initialize();
    }
    initialize() {
        const meta = this._cachedMeta;
        this.configure();
        this.linkScales();
        meta._stacked = isStacked(meta.vScale, meta);
        this.addElements();
        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {
            console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
        }
    }
    updateIndex(datasetIndex) {
        if (this.index !== datasetIndex) {
            clearStacks(this._cachedMeta);
        }
        this.index = datasetIndex;
    }
    linkScales() {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;
        const xid = meta.xAxisID = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.xAxisID, getFirstScaleId(chart, 'x'));
        const yid = meta.yAxisID = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.yAxisID, getFirstScaleId(chart, 'y'));
        const rid = meta.rAxisID = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.rAxisID, getFirstScaleId(chart, 'r'));
        const indexAxis = meta.indexAxis;
        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
        meta.xScale = this.getScaleForId(xid);
        meta.yScale = this.getScaleForId(yid);
        meta.rScale = this.getScaleForId(rid);
        meta.iScale = this.getScaleForId(iid);
        meta.vScale = this.getScaleForId(vid);
    }
    getDataset() {
        return this.chart.data.datasets[this.index];
    }
    getMeta() {
        return this.chart.getDatasetMeta(this.index);
    }
 getScaleForId(scaleID) {
        return this.chart.scales[scaleID];
    }
 _getOtherScale(scale) {
        const meta = this._cachedMeta;
        return scale === meta.iScale ? meta.vScale : meta.iScale;
    }
    reset() {
        this._update('reset');
    }
 _destroy() {
        const meta = this._cachedMeta;
        if (this._data) {
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.u)(this._data, this);
        }
        if (meta._stacked) {
            clearStacks(meta);
        }
    }
 _dataCheck() {
        const dataset = this.getDataset();
        const data = dataset.data || (dataset.data = []);
        const _data = this._data;
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(data)) {
            const meta = this._cachedMeta;
            this._data = convertObjectDataToArray(data, meta);
        } else if (_data !== data) {
            if (_data) {
                (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.u)(_data, this);
                const meta = this._cachedMeta;
                clearStacks(meta);
                meta._parsed = [];
            }
            if (data && Object.isExtensible(data)) {
                (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.l)(data, this);
            }
            this._syncList = [];
            this._data = data;
        }
    }
    addElements() {
        const meta = this._cachedMeta;
        this._dataCheck();
        if (this.datasetElementType) {
            meta.dataset = new this.datasetElementType();
        }
    }
    buildOrUpdateElements(resetNewElements) {
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        let stackChanged = false;
        this._dataCheck();
        const oldStacked = meta._stacked;
        meta._stacked = isStacked(meta.vScale, meta);
        if (meta.stack !== dataset.stack) {
            stackChanged = true;
            clearStacks(meta);
            meta.stack = dataset.stack;
        }
        this._resyncElements(resetNewElements);
        if (stackChanged || oldStacked !== meta._stacked) {
            updateStacks(this, meta._parsed);
        }
    }
 configure() {
        const config = this.chart.config;
        const scopeKeys = config.datasetScopeKeys(this._type);
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
        this.options = config.createResolver(scopes, this.getContext());
        this._parsing = this.options.parsing;
        this._cachedDataOpts = {};
    }
 parse(start, count) {
        const { _cachedMeta: meta , _data: data  } = this;
        const { iScale , _stacked  } = meta;
        const iAxis = iScale.axis;
        let sorted = start === 0 && count === data.length ? true : meta._sorted;
        let prev = start > 0 && meta._parsed[start - 1];
        let i, cur, parsed;
        if (this._parsing === false) {
            meta._parsed = data;
            meta._sorted = true;
            parsed = data;
        } else {
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(data[start])) {
                parsed = this.parseArrayData(meta, data, start, count);
            } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(data[start])) {
                parsed = this.parseObjectData(meta, data, start, count);
            } else {
                parsed = this.parsePrimitiveData(meta, data, start, count);
            }
            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
            for(i = 0; i < count; ++i){
                meta._parsed[i + start] = cur = parsed[i];
                if (sorted) {
                    if (isNotInOrderComparedToPrev()) {
                        sorted = false;
                    }
                    prev = cur;
                }
            }
            meta._sorted = sorted;
        }
        if (_stacked) {
            updateStacks(this, parsed);
        }
    }
 parsePrimitiveData(meta, data, start, count) {
        const { iScale , vScale  } = meta;
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const labels = iScale.getLabels();
        const singleScale = iScale === vScale;
        const parsed = new Array(count);
        let i, ilen, index;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            parsed[i] = {
                [iAxis]: singleScale || iScale.parse(labels[index], index),
                [vAxis]: vScale.parse(data[index], index)
            };
        }
        return parsed;
    }
 parseArrayData(meta, data, start, count) {
        const { xScale , yScale  } = meta;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            item = data[index];
            parsed[i] = {
                x: xScale.parse(item[0], index),
                y: yScale.parse(item[1], index)
            };
        }
        return parsed;
    }
 parseObjectData(meta, data, start, count) {
        const { xScale , yScale  } = meta;
        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            item = data[index];
            parsed[i] = {
                x: xScale.parse((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(item, xAxisKey), index),
                y: yScale.parse((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(item, yAxisKey), index)
            };
        }
        return parsed;
    }
 getParsed(index) {
        return this._cachedMeta._parsed[index];
    }
 getDataElement(index) {
        return this._cachedMeta.data[index];
    }
 applyStack(scale, parsed, mode) {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const value = parsed[scale.axis];
        const stack = {
            keys: getSortedDatasetIndices(chart, true),
            values: parsed._stacks[scale.axis]._visualValues
        };
        return applyStack(stack, value, meta.index, {
            mode
        });
    }
 updateRangeFromParsed(range, scale, parsed, stack) {
        const parsedValue = parsed[scale.axis];
        let value = parsedValue === null ? NaN : parsedValue;
        const values = stack && parsed._stacks[scale.axis];
        if (stack && values) {
            stack.values = values;
            value = applyStack(stack, parsedValue, this._cachedMeta.index);
        }
        range.min = Math.min(range.min, value);
        range.max = Math.max(range.max, value);
    }
 getMinMax(scale, canStack) {
        const meta = this._cachedMeta;
        const _parsed = meta._parsed;
        const sorted = meta._sorted && scale === meta.iScale;
        const ilen = _parsed.length;
        const otherScale = this._getOtherScale(scale);
        const stack = createStack(canStack, meta, this.chart);
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);
        let i, parsed;
        function _skip() {
            parsed = _parsed[i];
            const otherValue = parsed[otherScale.axis];
            return !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
        }
        for(i = 0; i < ilen; ++i){
            if (_skip()) {
                continue;
            }
            this.updateRangeFromParsed(range, scale, parsed, stack);
            if (sorted) {
                break;
            }
        }
        if (sorted) {
            for(i = ilen - 1; i >= 0; --i){
                if (_skip()) {
                    continue;
                }
                this.updateRangeFromParsed(range, scale, parsed, stack);
                break;
            }
        }
        return range;
    }
    getAllParsedValues(scale) {
        const parsed = this._cachedMeta._parsed;
        const values = [];
        let i, ilen, value;
        for(i = 0, ilen = parsed.length; i < ilen; ++i){
            value = parsed[i][scale.axis];
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(value)) {
                values.push(value);
            }
        }
        return values;
    }
 getMaxOverflow() {
        return false;
    }
 getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const vScale = meta.vScale;
        const parsed = this.getParsed(index);
        return {
            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
        };
    }
 _update(mode) {
        const meta = this._cachedMeta;
        this.update(mode || 'default');
        meta._clip = toClip((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
    }
 update(mode) {}
    draw() {
        const ctx = this._ctx;
        const chart = this.chart;
        const meta = this._cachedMeta;
        const elements = meta.data || [];
        const area = chart.chartArea;
        const active = [];
        const start = this._drawStart || 0;
        const count = this._drawCount || elements.length - start;
        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
        let i;
        if (meta.dataset) {
            meta.dataset.draw(ctx, area, start, count);
        }
        for(i = start; i < start + count; ++i){
            const element = elements[i];
            if (element.hidden) {
                continue;
            }
            if (element.active && drawActiveElementsOnTop) {
                active.push(element);
            } else {
                element.draw(ctx, area);
            }
        }
        for(i = 0; i < active.length; ++i){
            active[i].draw(ctx, area);
        }
    }
 getStyle(index, active) {
        const mode = active ? 'active' : 'default';
        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
    }
 getContext(index, active, mode) {
        const dataset = this.getDataset();
        let context;
        if (index >= 0 && index < this._cachedMeta.data.length) {
            const element = this._cachedMeta.data[index];
            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));
            context.parsed = this.getParsed(index);
            context.raw = dataset.data[index];
            context.index = context.dataIndex = index;
        } else {
            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
            context.dataset = dataset;
            context.index = context.datasetIndex = this.index;
        }
        context.active = !!active;
        context.mode = mode;
        return context;
    }
 resolveDatasetElementOptions(mode) {
        return this._resolveElementOptions(this.datasetElementType.id, mode);
    }
 resolveDataElementOptions(index, mode) {
        return this._resolveElementOptions(this.dataElementType.id, mode, index);
    }
 _resolveElementOptions(elementType, mode = 'default', index) {
        const active = mode === 'active';
        const cache = this._cachedDataOpts;
        const cacheKey = elementType + '-' + mode;
        const cached = cache[cacheKey];
        const sharing = this.enableOptionSharing && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.h)(index);
        if (cached) {
            return cloneIfNotShared(cached, sharing);
        }
        const config = this.chart.config;
        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
        const prefixes = active ? [
            `${elementType}Hover`,
            'hover',
            elementType,
            ''
        ] : [
            elementType,
            ''
        ];
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
        const names = Object.keys(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.elements[elementType]);
        const context = ()=>this.getContext(index, active, mode);
        const values = config.resolveNamedOptions(scopes, names, context, prefixes);
        if (values.$shared) {
            values.$shared = sharing;
            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
        }
        return values;
    }
 _resolveAnimations(index, transition, active) {
        const chart = this.chart;
        const cache = this._cachedDataOpts;
        const cacheKey = `animation-${transition}`;
        const cached = cache[cacheKey];
        if (cached) {
            return cached;
        }
        let options;
        if (chart.options.animation !== false) {
            const config = this.chart.config;
            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
            options = config.createResolver(scopes, this.getContext(index, active, transition));
        }
        const animations = new Animations(chart, options && options.animations);
        if (options && options._cacheable) {
            cache[cacheKey] = Object.freeze(animations);
        }
        return animations;
    }
 getSharedOptions(options) {
        if (!options.$shared) {
            return;
        }
        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
    }
 includeOptions(mode, sharedOptions) {
        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
    }
 _getSharedOptions(start, mode) {
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const previouslySharedOptions = this._sharedOptions;
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
        return {
            sharedOptions,
            includeOptions
        };
    }
 updateElement(element, index, properties, mode) {
        if (isDirectUpdateMode(mode)) {
            Object.assign(element, properties);
        } else {
            this._resolveAnimations(index, mode).update(element, properties);
        }
    }
 updateSharedOptions(sharedOptions, mode, newOptions) {
        if (sharedOptions && !isDirectUpdateMode(mode)) {
            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
        }
    }
 _setStyle(element, index, mode, active) {
        element.active = active;
        const options = this.getStyle(index, active);
        this._resolveAnimations(index, mode, active).update(element, {
            options: !active && this.getSharedOptions(options) || options
        });
    }
    removeHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, 'active', false);
    }
    setHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, 'active', true);
    }
 _removeDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) {
            this._setStyle(element, undefined, 'active', false);
        }
    }
 _setDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) {
            this._setStyle(element, undefined, 'active', true);
        }
    }
 _resyncElements(resetNewElements) {
        const data = this._data;
        const elements = this._cachedMeta.data;
        for (const [method, arg1, arg2] of this._syncList){
            this[method](arg1, arg2);
        }
        this._syncList = [];
        const numMeta = elements.length;
        const numData = data.length;
        const count = Math.min(numData, numMeta);
        if (count) {
            this.parse(0, count);
        }
        if (numData > numMeta) {
            this._insertElements(numMeta, numData - numMeta, resetNewElements);
        } else if (numData < numMeta) {
            this._removeElements(numData, numMeta - numData);
        }
    }
 _insertElements(start, count, resetNewElements = true) {
        const meta = this._cachedMeta;
        const data = meta.data;
        const end = start + count;
        let i;
        const move = (arr)=>{
            arr.length += count;
            for(i = arr.length - 1; i >= end; i--){
                arr[i] = arr[i - count];
            }
        };
        move(data);
        for(i = start; i < end; ++i){
            data[i] = new this.dataElementType();
        }
        if (this._parsing) {
            move(meta._parsed);
        }
        this.parse(start, count);
        if (resetNewElements) {
            this.updateElements(data, start, count, 'reset');
        }
    }
    updateElements(element, start, count, mode) {}
 _removeElements(start, count) {
        const meta = this._cachedMeta;
        if (this._parsing) {
            const removed = meta._parsed.splice(start, count);
            if (meta._stacked) {
                clearStacks(meta, removed);
            }
        }
        meta.data.splice(start, count);
    }
 _sync(args) {
        if (this._parsing) {
            this._syncList.push(args);
        } else {
            const [method, arg1, arg2] = args;
            this[method](arg1, arg2);
        }
        this.chart._dataChanges.push([
            this.index,
            ...args
        ]);
    }
    _onDataPush() {
        const count = arguments.length;
        this._sync([
            '_insertElements',
            this.getDataset().data.length - count,
            count
        ]);
    }
    _onDataPop() {
        this._sync([
            '_removeElements',
            this._cachedMeta.data.length - 1,
            1
        ]);
    }
    _onDataShift() {
        this._sync([
            '_removeElements',
            0,
            1
        ]);
    }
    _onDataSplice(start, count) {
        if (count) {
            this._sync([
                '_removeElements',
                start,
                count
            ]);
        }
        const newCount = arguments.length - 2;
        if (newCount) {
            this._sync([
                '_insertElements',
                start,
                newCount
            ]);
        }
    }
    _onDataUnshift() {
        this._sync([
            '_insertElements',
            0,
            arguments.length
        ]);
    }
}

function getAllScaleValues(scale, type) {
    if (!scale._cache.$bar) {
        const visibleMetas = scale.getMatchingVisibleMetas(type);
        let values = [];
        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){
            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
        }
        scale._cache.$bar = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__._)(values.sort((a, b)=>a - b));
    }
    return scale._cache.$bar;
}
 function computeMinSampleSize(meta) {
    const scale = meta.iScale;
    const values = getAllScaleValues(scale, meta.type);
    let min = scale._length;
    let i, ilen, curr, prev;
    const updateMinAndPrev = ()=>{
        if (curr === 32767 || curr === -32768) {
            return;
        }
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.h)(prev)) {
            min = Math.min(min, Math.abs(curr - prev) || min);
        }
        prev = curr;
    };
    for(i = 0, ilen = values.length; i < ilen; ++i){
        curr = scale.getPixelForValue(values[i]);
        updateMinAndPrev();
    }
    prev = undefined;
    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){
        curr = scale.getPixelForTick(i);
        updateMinAndPrev();
    }
    return min;
}
 function computeFitCategoryTraits(index, ruler, options, stackCount) {
    const thickness = options.barThickness;
    let size, ratio;
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(thickness)) {
        size = ruler.min * options.categoryPercentage;
        ratio = options.barPercentage;
    } else {
        size = thickness * stackCount;
        ratio = 1;
    }
    return {
        chunk: size / stackCount,
        ratio,
        start: ruler.pixels[index] - size / 2
    };
}
 function computeFlexCategoryTraits(index, ruler, options, stackCount) {
    const pixels = ruler.pixels;
    const curr = pixels[index];
    let prev = index > 0 ? pixels[index - 1] : null;
    let next = index < pixels.length - 1 ? pixels[index + 1] : null;
    const percent = options.categoryPercentage;
    if (prev === null) {
        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
    }
    if (next === null) {
        next = curr + curr - prev;
    }
    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
    const size = Math.abs(next - prev) / 2 * percent;
    return {
        chunk: size / stackCount,
        ratio: options.barPercentage,
        start
    };
}
function parseFloatBar(entry, item, vScale, i) {
    const startValue = vScale.parse(entry[0], i);
    const endValue = vScale.parse(entry[1], i);
    const min = Math.min(startValue, endValue);
    const max = Math.max(startValue, endValue);
    let barStart = min;
    let barEnd = max;
    if (Math.abs(min) > Math.abs(max)) {
        barStart = max;
        barEnd = min;
    }
    item[vScale.axis] = barEnd;
    item._custom = {
        barStart,
        barEnd,
        start: startValue,
        end: endValue,
        min,
        max
    };
}
function parseValue(entry, item, vScale, i) {
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(entry)) {
        parseFloatBar(entry, item, vScale, i);
    } else {
        item[vScale.axis] = vScale.parse(entry, i);
    }
    return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = [];
    let i, ilen, item, entry;
    for(i = start, ilen = start + count; i < ilen; ++i){
        entry = data[i];
        item = {};
        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
        parsed.push(parseValue(entry, item, vScale, i));
    }
    return parsed;
}
function isFloatBar(custom) {
    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
}
function barSign(size, vScale, actualBase) {
    if (size !== 0) {
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(size);
    }
    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
    let reverse, start, end, top, bottom;
    if (properties.horizontal) {
        reverse = properties.base > properties.x;
        start = 'left';
        end = 'right';
    } else {
        reverse = properties.base < properties.y;
        start = 'bottom';
        end = 'top';
    }
    if (reverse) {
        top = 'end';
        bottom = 'start';
    } else {
        top = 'start';
        bottom = 'end';
    }
    return {
        start,
        end,
        reverse,
        top,
        bottom
    };
}
function setBorderSkipped(properties, options, stack, index) {
    let edge = options.borderSkipped;
    const res = {};
    if (!edge) {
        properties.borderSkipped = res;
        return;
    }
    if (edge === true) {
        properties.borderSkipped = {
            top: true,
            right: true,
            bottom: true,
            left: true
        };
        return;
    }
    const { start , end , reverse , top , bottom  } = borderProps(properties);
    if (edge === 'middle' && stack) {
        properties.enableBorderRadius = true;
        if ((stack._top || 0) === index) {
            edge = top;
        } else if ((stack._bottom || 0) === index) {
            edge = bottom;
        } else {
            res[parseEdge(bottom, start, end, reverse)] = true;
            edge = top;
        }
    }
    res[parseEdge(edge, start, end, reverse)] = true;
    properties.borderSkipped = res;
}
function parseEdge(edge, a, b, reverse) {
    if (reverse) {
        edge = swap(edge, a, b);
        edge = startEnd(edge, b, a);
    } else {
        edge = startEnd(edge, a, b);
    }
    return edge;
}
function swap(orig, v1, v2) {
    return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v, start, end) {
    return v === 'start' ? start : v === 'end' ? end : v;
}
function setInflateAmount(properties, { inflateAmount  }, ratio) {
    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
class BarController extends DatasetController {
    static id = 'bar';
 static defaults = {
        datasetElementType: false,
        dataElementType: 'bar',
        categoryPercentage: 0.8,
        barPercentage: 0.9,
        grouped: true,
        animations: {
            numbers: {
                type: 'number',
                properties: [
                    'x',
                    'y',
                    'base',
                    'width',
                    'height'
                ]
            }
        }
    };
 static overrides = {
        scales: {
            _index_: {
                type: 'category',
                offset: true,
                grid: {
                    offset: true
                }
            },
            _value_: {
                type: 'linear',
                beginAtZero: true
            }
        }
    };
 parsePrimitiveData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
    }
 parseArrayData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
    }
 parseObjectData(meta, data, start, count) {
        const { iScale , vScale  } = meta;
        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;
        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;
        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;
        const parsed = [];
        let i, ilen, item, obj;
        for(i = start, ilen = start + count; i < ilen; ++i){
            obj = data[i];
            item = {};
            item[iScale.axis] = iScale.parse((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(obj, iAxisKey), i);
            parsed.push(parseValue((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(obj, vAxisKey), item, vScale, i));
        }
        return parsed;
    }
 updateRangeFromParsed(range, scale, parsed, stack) {
        super.updateRangeFromParsed(range, scale, parsed, stack);
        const custom = parsed._custom;
        if (custom && scale === this._cachedMeta.vScale) {
            range.min = Math.min(range.min, custom.min);
            range.max = Math.max(range.max, custom.max);
        }
    }
 getMaxOverflow() {
        return 0;
    }
 getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const { iScale , vScale  } = meta;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);
        return {
            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),
            value
        };
    }
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
        const meta = this._cachedMeta;
        meta.stack = this.getDataset().stack;
    }
    update(mode) {
        const meta = this._cachedMeta;
        this.updateElements(meta.data, 0, meta.data.length, mode);
    }
    updateElements(bars, start, count, mode) {
        const reset = mode === 'reset';
        const { index , _cachedMeta: { vScale  }  } = this;
        const base = vScale.getBasePixel();
        const horizontal = vScale.isHorizontal();
        const ruler = this._getRuler();
        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);
        for(let i = start; i < start + count; i++){
            const parsed = this.getParsed(i);
            const vpixels = reset || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(parsed[vScale.axis]) ? {
                base,
                head: base
            } : this._calculateBarValuePixels(i);
            const ipixels = this._calculateBarIndexPixels(i, ruler);
            const stack = (parsed._stacks || {})[vScale.axis];
            const properties = {
                horizontal,
                base: vpixels.base,
                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,
                x: horizontal ? vpixels.head : ipixels.center,
                y: horizontal ? ipixels.center : vpixels.head,
                height: horizontal ? ipixels.size : Math.abs(vpixels.size),
                width: horizontal ? Math.abs(vpixels.size) : ipixels.size
            };
            if (includeOptions) {
                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);
            }
            const options = properties.options || bars[i].options;
            setBorderSkipped(properties, options, stack, index);
            setInflateAmount(properties, options, ruler.ratio);
            this.updateElement(bars[i], i, properties, mode);
        }
    }
 _getStacks(last, dataIndex) {
        const { iScale  } = this._cachedMeta;
        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);
        const stacked = iScale.options.stacked;
        const stacks = [];
        const skipNull = (meta)=>{
            const parsed = meta.controller.getParsed(dataIndex);
            const val = parsed && parsed[meta.vScale.axis];
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(val) || isNaN(val)) {
                return true;
            }
        };
        for (const meta of metasets){
            if (dataIndex !== undefined && skipNull(meta)) {
                continue;
            }
            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {
                stacks.push(meta.stack);
            }
            if (meta.index === last) {
                break;
            }
        }
        if (!stacks.length) {
            stacks.push(undefined);
        }
        return stacks;
    }
 _getStackCount(index) {
        return this._getStacks(undefined, index).length;
    }
 _getStackIndex(datasetIndex, name, dataIndex) {
        const stacks = this._getStacks(datasetIndex, dataIndex);
        const index = name !== undefined ? stacks.indexOf(name) : -1;
        return index === -1 ? stacks.length - 1 : index;
    }
 _getRuler() {
        const opts = this.options;
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const pixels = [];
        let i, ilen;
        for(i = 0, ilen = meta.data.length; i < ilen; ++i){
            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
        }
        const barThickness = opts.barThickness;
        const min = barThickness || computeMinSampleSize(meta);
        return {
            min,
            pixels,
            start: iScale._startPixel,
            end: iScale._endPixel,
            stackCount: this._getStackCount(),
            scale: iScale,
            grouped: opts.grouped,
            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
        };
    }
 _calculateBarValuePixels(index) {
        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;
        const actualBase = baseValue || 0;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const floating = isFloatBar(custom);
        let value = parsed[vScale.axis];
        let start = 0;
        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
        let head, size;
        if (length !== value) {
            start = length - value;
            length = value;
        }
        if (floating) {
            value = custom.barStart;
            length = custom.barEnd - custom.barStart;
            if (value !== 0 && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(value) !== (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(custom.barEnd)) {
                start = 0;
            }
            start += value;
        }
        const startValue = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(baseValue) && !floating ? baseValue : start;
        let base = vScale.getPixelForValue(startValue);
        if (this.chart.getDataVisibility(index)) {
            head = vScale.getPixelForValue(start + length);
        } else {
            head = base;
        }
        size = head - base;
        if (Math.abs(size) < minBarLength) {
            size = barSign(size, vScale, actualBase) * minBarLength;
            if (value === actualBase) {
                base -= size / 2;
            }
            const startPixel = vScale.getPixelForDecimal(0);
            const endPixel = vScale.getPixelForDecimal(1);
            const min = Math.min(startPixel, endPixel);
            const max = Math.max(startPixel, endPixel);
            base = Math.max(Math.min(base, max), min);
            head = base + size;
            if (_stacked && !floating) {
                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);
            }
        }
        if (base === vScale.getPixelForValue(actualBase)) {
            const halfGrid = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(size) * vScale.getLineWidthForValue(actualBase) / 2;
            base += halfGrid;
            size -= halfGrid;
        }
        return {
            size,
            base,
            head,
            center: head + size / 2
        };
    }
 _calculateBarIndexPixels(index, ruler) {
        const scale = ruler.scale;
        const options = this.options;
        const skipNull = options.skipNull;
        const maxBarThickness = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(options.maxBarThickness, Infinity);
        let center, size;
        if (ruler.grouped) {
            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);
            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);
            center = range.start + range.chunk * stackIndex + range.chunk / 2;
            size = Math.min(maxBarThickness, range.chunk * range.ratio);
        } else {
            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);
            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
        }
        return {
            base: center - size / 2,
            head: center + size / 2,
            center,
            size
        };
    }
    draw() {
        const meta = this._cachedMeta;
        const vScale = meta.vScale;
        const rects = meta.data;
        const ilen = rects.length;
        let i = 0;
        for(; i < ilen; ++i){
            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {
                rects[i].draw(this._ctx);
            }
        }
    }
}

class BubbleController extends DatasetController {
    static id = 'bubble';
 static defaults = {
        datasetElementType: false,
        dataElementType: 'point',
        animations: {
            numbers: {
                type: 'number',
                properties: [
                    'x',
                    'y',
                    'borderWidth',
                    'radius'
                ]
            }
        }
    };
 static overrides = {
        scales: {
            x: {
                type: 'linear'
            },
            y: {
                type: 'linear'
            }
        }
    };
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
    }
 parsePrimitiveData(meta, data, start, count) {
        const parsed = super.parsePrimitiveData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
        }
        return parsed;
    }
 parseArrayData(meta, data, start, count) {
        const parsed = super.parseArrayData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(item[2], this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
 parseObjectData(meta, data, start, count) {
        const parsed = super.parseObjectData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
 getMaxOverflow() {
        const data = this._cachedMeta.data;
        let max = 0;
        for(let i = data.length - 1; i >= 0; --i){
            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
        }
        return max > 0 && max;
    }
 getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const labels = this.chart.data.labels || [];
        const { xScale , yScale  } = meta;
        const parsed = this.getParsed(index);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        const r = parsed._custom;
        return {
            label: labels[index] || '',
            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'
        };
    }
    update(mode) {
        const points = this._cachedMeta.data;
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === 'reset';
        const { iScale , vScale  } = this._cachedMeta;
        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const parsed = !reset && this.getParsed(i);
            const properties = {};
            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
            properties.skip = isNaN(iPixel) || isNaN(vPixel);
            if (includeOptions) {
                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
                if (reset) {
                    properties.options.radius = 0;
                }
            }
            this.updateElement(point, i, properties, mode);
        }
    }
 resolveDataElementOptions(index, mode) {
        const parsed = this.getParsed(index);
        let values = super.resolveDataElementOptions(index, mode);
        if (values.$shared) {
            values = Object.assign({}, values, {
                $shared: false
            });
        }
        const radius = values.radius;
        if (mode !== 'active') {
            values.radius = 0;
        }
        values.radius += (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(parsed && parsed._custom, radius);
        return values;
    }
}

function getRatioAndOffset(rotation, circumference, cutout) {
    let ratioX = 1;
    let ratioY = 1;
    let offsetX = 0;
    let offsetY = 0;
    if (circumference < _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T) {
        const startAngle = rotation;
        const endAngle = startAngle + circumference;
        const startX = Math.cos(startAngle);
        const startY = Math.sin(startAngle);
        const endX = Math.cos(endAngle);
        const endY = Math.sin(endAngle);
        const calcMax = (angle, a, b)=>(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
        const calcMin = (angle, a, b)=>(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
        const maxX = calcMax(0, startX, endX);
        const maxY = calcMax(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H, startY, endY);
        const minX = calcMin(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P, startX, endX);
        const minY = calcMin(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H, startY, endY);
        ratioX = (maxX - minX) / 2;
        ratioY = (maxY - minY) / 2;
        offsetX = -(maxX + minX) / 2;
        offsetY = -(maxY + minY) / 2;
    }
    return {
        ratioX,
        ratioY,
        offsetX,
        offsetY
    };
}
class DoughnutController extends DatasetController {
    static id = 'doughnut';
 static defaults = {
        datasetElementType: false,
        dataElementType: 'arc',
        animation: {
            animateRotate: true,
            animateScale: false
        },
        animations: {
            numbers: {
                type: 'number',
                properties: [
                    'circumference',
                    'endAngle',
                    'innerRadius',
                    'outerRadius',
                    'startAngle',
                    'x',
                    'y',
                    'offset',
                    'borderWidth',
                    'spacing'
                ]
            }
        },
        cutout: '50%',
        rotation: 0,
        circumference: 360,
        radius: '100%',
        spacing: 0,
        indexAxis: 'r'
    };
    static descriptors = {
        _scriptable: (name)=>name !== 'spacing',
        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')
    };
 static overrides = {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels (chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            const { labels: { pointStyle , color  }  } = chart.legend.options;
                            return data.labels.map((label, i)=>{
                                const meta = chart.getDatasetMeta(0);
                                const style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    fontColor: color,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick (e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            }
        }
    };
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.enableOptionSharing = true;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.offsetX = undefined;
        this.offsetY = undefined;
    }
    linkScales() {}
 parse(start, count) {
        const data = this.getDataset().data;
        const meta = this._cachedMeta;
        if (this._parsing === false) {
            meta._parsed = data;
        } else {
            let getter = (i)=>+data[i];
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(data[start])) {
                const { key ='value'  } = this._parsing;
                getter = (i)=>+(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(data[i], key);
            }
            let i, ilen;
            for(i = start, ilen = start + count; i < ilen; ++i){
                meta._parsed[i] = getter(i);
            }
        }
    }
 _getRotation() {
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.options.rotation - 90);
    }
 _getCircumference() {
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.options.circumference);
    }
 _getRotationExtents() {
        let min = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T;
        let max = -_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T;
        for(let i = 0; i < this.chart.data.datasets.length; ++i){
            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {
                const controller = this.chart.getDatasetMeta(i).controller;
                const rotation = controller._getRotation();
                const circumference = controller._getCircumference();
                min = Math.min(min, rotation);
                max = Math.max(max, rotation + circumference);
            }
        }
        return {
            rotation: min,
            circumference: max - min
        };
    }
 update(mode) {
        const chart = this.chart;
        const { chartArea  } = chart;
        const meta = this._cachedMeta;
        const arcs = meta.data;
        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
        const cutout = Math.min((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.m)(this.options.cutout, maxSize), 1);
        const chartWeight = this._getRingWeight(this.index);
        const { circumference , rotation  } = this._getRotationExtents();
        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);
        const maxWidth = (chartArea.width - spacing) / ratioX;
        const maxHeight = (chartArea.height - spacing) / ratioY;
        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
        const outerRadius = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.n)(this.options.radius, maxRadius);
        const innerRadius = Math.max(outerRadius * cutout, 0);
        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
        this.offsetX = offsetX * outerRadius;
        this.offsetY = offsetY * outerRadius;
        meta.total = this.calculateTotal();
        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
        this.updateElements(arcs, 0, arcs.length, mode);
    }
 _circumference(i, reset) {
        const opts = this.options;
        const meta = this._cachedMeta;
        const circumference = this._getCircumference();
        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {
            return 0;
        }
        return this.calculateCircumference(meta._parsed[i] * circumference / _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T);
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === 'reset';
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const centerX = (chartArea.left + chartArea.right) / 2;
        const centerY = (chartArea.top + chartArea.bottom) / 2;
        const animateScale = reset && animationOpts.animateScale;
        const innerRadius = animateScale ? 0 : this.innerRadius;
        const outerRadius = animateScale ? 0 : this.outerRadius;
        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);
        let startAngle = this._getRotation();
        let i;
        for(i = 0; i < start; ++i){
            startAngle += this._circumference(i, reset);
        }
        for(i = start; i < start + count; ++i){
            const circumference = this._circumference(i, reset);
            const arc = arcs[i];
            const properties = {
                x: centerX + this.offsetX,
                y: centerY + this.offsetY,
                startAngle,
                endAngle: startAngle + circumference,
                circumference,
                outerRadius,
                innerRadius
            };
            if (includeOptions) {
                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);
            }
            startAngle += circumference;
            this.updateElement(arc, i, properties, mode);
        }
    }
    calculateTotal() {
        const meta = this._cachedMeta;
        const metaData = meta.data;
        let total = 0;
        let i;
        for(i = 0; i < metaData.length; i++){
            const value = meta._parsed[i];
            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {
                total += Math.abs(value);
            }
        }
        return total;
    }
    calculateCircumference(value) {
        const total = this._cachedMeta.total;
        if (total > 0 && !isNaN(value)) {
            return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T * (Math.abs(value) / total);
        }
        return 0;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.o)(meta._parsed[index], chart.options.locale);
        return {
            label: labels[index] || '',
            value
        };
    }
    getMaxBorderWidth(arcs) {
        let max = 0;
        const chart = this.chart;
        let i, ilen, meta, controller, options;
        if (!arcs) {
            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){
                if (chart.isDatasetVisible(i)) {
                    meta = chart.getDatasetMeta(i);
                    arcs = meta.data;
                    controller = meta.controller;
                    break;
                }
            }
        }
        if (!arcs) {
            return 0;
        }
        for(i = 0, ilen = arcs.length; i < ilen; ++i){
            options = controller.resolveDataElementOptions(i);
            if (options.borderAlign !== 'inner') {
                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
            }
        }
        return max;
    }
    getMaxOffset(arcs) {
        let max = 0;
        for(let i = 0, ilen = arcs.length; i < ilen; ++i){
            const options = this.resolveDataElementOptions(i);
            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
        }
        return max;
    }
 _getRingWeightOffset(datasetIndex) {
        let ringWeightOffset = 0;
        for(let i = 0; i < datasetIndex; ++i){
            if (this.chart.isDatasetVisible(i)) {
                ringWeightOffset += this._getRingWeight(i);
            }
        }
        return ringWeightOffset;
    }
 _getRingWeight(datasetIndex) {
        return Math.max((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(this.chart.data.datasets[datasetIndex].weight, 1), 0);
    }
 _getVisibleDatasetWeightTotal() {
        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
    }
}

class LineController extends DatasetController {
    static id = 'line';
 static defaults = {
        datasetElementType: 'line',
        dataElementType: 'point',
        showLine: true,
        spanGaps: false
    };
 static overrides = {
        scales: {
            _index_: {
                type: 'category'
            },
            _value_: {
                type: 'linear'
            }
        }
    };
    initialize() {
        this.enableOptionSharing = true;
        this.supportsDecimation = true;
        super.initialize();
    }
    update(mode) {
        const meta = this._cachedMeta;
        const { dataset: line , data: points = [] , _dataset  } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start , count  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w)(meta)) {
            start = 0;
            count = points.length;
        }
        line._chart = this.chart;
        line._datasetIndex = this.index;
        line._decimated = !!_dataset._decimated;
        line.points = points;
        const options = this.resolveDatasetElementOptions(mode);
        if (!this.options.showLine) {
            options.borderWidth = 0;
        }
        options.segment = this.options.segment;
        this.updateElement(line, undefined, {
            animated: !animationsDisabled,
            options
        }, mode);
        this.updateElements(points, start, count, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === 'reset';
        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;
        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps , segment  } = this.options;
        const maxGapLength = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
        const end = start + count;
        const pointsCount = points.length;
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for(let i = 0; i < pointsCount; ++i){
            const point = points[i];
            const properties = directUpdate ? point : {};
            if (i < start || i >= end) {
                properties.skip = true;
                continue;
            }
            const parsed = this.getParsed(i);
            const nullData = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(parsed[vAxis]);
            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
            if (segment) {
                properties.parsed = parsed;
                properties.raw = _dataset.data[i];
            }
            if (includeOptions) {
                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
            }
            if (!directUpdate) {
                this.updateElement(point, i, properties, mode);
            }
            prevParsed = parsed;
        }
    }
 getMaxOverflow() {
        const meta = this._cachedMeta;
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        const data = meta.data || [];
        if (!data.length) {
            return border;
        }
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
    }
    draw() {
        const meta = this._cachedMeta;
        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
        super.draw();
    }
}

class PolarAreaController extends DatasetController {
    static id = 'polarArea';
 static defaults = {
        dataElementType: 'arc',
        animation: {
            animateRotate: true,
            animateScale: true
        },
        animations: {
            numbers: {
                type: 'number',
                properties: [
                    'x',
                    'y',
                    'startAngle',
                    'endAngle',
                    'innerRadius',
                    'outerRadius'
                ]
            }
        },
        indexAxis: 'r',
        startAngle: 0
    };
 static overrides = {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels (chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            const { labels: { pointStyle , color  }  } = chart.legend.options;
                            return data.labels.map((label, i)=>{
                                const meta = chart.getDatasetMeta(0);
                                const style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    fontColor: color,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick (e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            }
        },
        scales: {
            r: {
                type: 'radialLinear',
                angleLines: {
                    display: false
                },
                beginAtZero: true,
                grid: {
                    circular: true
                },
                pointLabels: {
                    display: false
                },
                startAngle: 0
            }
        }
    };
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.innerRadius = undefined;
        this.outerRadius = undefined;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.o)(meta._parsed[index].r, chart.options.locale);
        return {
            label: labels[index] || '',
            value
        };
    }
    parseObjectData(meta, data, start, count) {
        return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.y.bind(this)(meta, data, start, count);
    }
    update(mode) {
        const arcs = this._cachedMeta.data;
        this._updateRadius();
        this.updateElements(arcs, 0, arcs.length, mode);
    }
 getMinMax() {
        const meta = this._cachedMeta;
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        meta.data.forEach((element, index)=>{
            const parsed = this.getParsed(index).r;
            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {
                if (parsed < range.min) {
                    range.min = parsed;
                }
                if (parsed > range.max) {
                    range.max = parsed;
                }
            }
        });
        return range;
    }
 _updateRadius() {
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
        const outerRadius = Math.max(minSize / 2, 0);
        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
        this.outerRadius = outerRadius - radiusLength * this.index;
        this.innerRadius = this.outerRadius - radiusLength;
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === 'reset';
        const chart = this.chart;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const scale = this._cachedMeta.rScale;
        const centerX = scale.xCenter;
        const centerY = scale.yCenter;
        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P;
        let angle = datasetStartAngle;
        let i;
        const defaultAngle = 360 / this.countVisibleElements();
        for(i = 0; i < start; ++i){
            angle += this._computeAngle(i, mode, defaultAngle);
        }
        for(i = start; i < start + count; i++){
            const arc = arcs[i];
            let startAngle = angle;
            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);
            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;
            angle = endAngle;
            if (reset) {
                if (animationOpts.animateScale) {
                    outerRadius = 0;
                }
                if (animationOpts.animateRotate) {
                    startAngle = endAngle = datasetStartAngle;
                }
            }
            const properties = {
                x: centerX,
                y: centerY,
                innerRadius: 0,
                outerRadius,
                startAngle,
                endAngle,
                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)
            };
            this.updateElement(arc, i, properties, mode);
        }
    }
    countVisibleElements() {
        const meta = this._cachedMeta;
        let count = 0;
        meta.data.forEach((element, index)=>{
            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {
                count++;
            }
        });
        return count;
    }
 _computeAngle(index, mode, defaultAngle) {
        return this.chart.getDataVisibility(index) ? (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;
    }
}

class PieController extends DoughnutController {
    static id = 'pie';
 static defaults = {
        cutout: 0,
        rotation: 0,
        circumference: 360,
        radius: '100%'
    };
}

class RadarController extends DatasetController {
    static id = 'radar';
 static defaults = {
        datasetElementType: 'line',
        dataElementType: 'point',
        indexAxis: 'r',
        showLine: true,
        elements: {
            line: {
                fill: 'start'
            }
        }
    };
 static overrides = {
        aspectRatio: 1,
        scales: {
            r: {
                type: 'radialLinear'
            }
        }
    };
 getLabelAndValue(index) {
        const vScale = this._cachedMeta.vScale;
        const parsed = this.getParsed(index);
        return {
            label: vScale.getLabels()[index],
            value: '' + vScale.getLabelForValue(parsed[vScale.axis])
        };
    }
    parseObjectData(meta, data, start, count) {
        return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.y.bind(this)(meta, data, start, count);
    }
    update(mode) {
        const meta = this._cachedMeta;
        const line = meta.dataset;
        const points = meta.data || [];
        const labels = meta.iScale.getLabels();
        line.points = points;
        if (mode !== 'resize') {
            const options = this.resolveDatasetElementOptions(mode);
            if (!this.options.showLine) {
                options.borderWidth = 0;
            }
            const properties = {
                _loop: true,
                _fullLoop: labels.length === points.length,
                options
            };
            this.updateElement(line, undefined, properties, mode);
        }
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const scale = this._cachedMeta.rScale;
        const reset = mode === 'reset';
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);
            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);
            const x = reset ? scale.xCenter : pointPosition.x;
            const y = reset ? scale.yCenter : pointPosition.y;
            const properties = {
                x,
                y,
                angle: pointPosition.angle,
                skip: isNaN(x) || isNaN(y),
                options
            };
            this.updateElement(point, i, properties, mode);
        }
    }
}

class ScatterController extends DatasetController {
    static id = 'scatter';
 static defaults = {
        datasetElementType: false,
        dataElementType: 'point',
        showLine: false,
        fill: false
    };
 static overrides = {
        interaction: {
            mode: 'point'
        },
        scales: {
            x: {
                type: 'linear'
            },
            y: {
                type: 'linear'
            }
        }
    };
 getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const labels = this.chart.data.labels || [];
        const { xScale , yScale  } = meta;
        const parsed = this.getParsed(index);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        return {
            label: labels[index] || '',
            value: '(' + x + ', ' + y + ')'
        };
    }
    update(mode) {
        const meta = this._cachedMeta;
        const { data: points = []  } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start , count  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w)(meta)) {
            start = 0;
            count = points.length;
        }
        if (this.options.showLine) {
            if (!this.datasetElementType) {
                this.addElements();
            }
            const { dataset: line , _dataset  } = meta;
            line._chart = this.chart;
            line._datasetIndex = this.index;
            line._decimated = !!_dataset._decimated;
            line.points = points;
            const options = this.resolveDatasetElementOptions(mode);
            options.segment = this.options.segment;
            this.updateElement(line, undefined, {
                animated: !animationsDisabled,
                options
            }, mode);
        } else if (this.datasetElementType) {
            delete meta.dataset;
            this.datasetElementType = false;
        }
        this.updateElements(points, start, count, mode);
    }
    addElements() {
        const { showLine  } = this.options;
        if (!this.datasetElementType && showLine) {
            this.datasetElementType = this.chart.registry.getElement('line');
        }
        super.addElements();
    }
    updateElements(points, start, count, mode) {
        const reset = mode === 'reset';
        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps , segment  } = this.options;
        const maxGapLength = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for(let i = start; i < start + count; ++i){
            const point = points[i];
            const parsed = this.getParsed(i);
            const properties = directUpdate ? point : {};
            const nullData = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(parsed[vAxis]);
            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
            if (segment) {
                properties.parsed = parsed;
                properties.raw = _dataset.data[i];
            }
            if (includeOptions) {
                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
            }
            if (!directUpdate) {
                this.updateElement(point, i, properties, mode);
            }
            prevParsed = parsed;
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
    }
 getMaxOverflow() {
        const meta = this._cachedMeta;
        const data = meta.data || [];
        if (!this.options.showLine) {
            let max = 0;
            for(let i = data.length - 1; i >= 0; --i){
                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
            }
            return max > 0 && max;
        }
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        if (!data.length) {
            return border;
        }
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
    }
}

var controllers = /*#__PURE__*/Object.freeze({
__proto__: null,
BarController: BarController,
BubbleController: BubbleController,
DoughnutController: DoughnutController,
LineController: LineController,
PieController: PieController,
PolarAreaController: PolarAreaController,
RadarController: RadarController,
ScatterController: ScatterController
});

/**
 * @namespace Chart._adapters
 * @since 2.8.0
 * @private
 */ function abstract() {
    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');
}
/**
 * Date adapter (current used by the time scale)
 * @namespace Chart._adapters._date
 * @memberof Chart._adapters
 * @private
 */ class DateAdapterBase {
    /**
   * Override default date adapter methods.
   * Accepts type parameter to define options type.
   * @example
   * Chart._adapters._date.override<{myAdapterOption: string}>({
   *   init() {
   *     console.log(this.options.myAdapterOption);
   *   }
   * })
   */ static override(members) {
        Object.assign(DateAdapterBase.prototype, members);
    }
    options;
    constructor(options){
        this.options = options || {};
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    init() {}
    formats() {
        return abstract();
    }
    parse() {
        return abstract();
    }
    format() {
        return abstract();
    }
    add() {
        return abstract();
    }
    diff() {
        return abstract();
    }
    startOf() {
        return abstract();
    }
    endOf() {
        return abstract();
    }
}
var adapters = {
    _date: DateAdapterBase
};

function binarySearch(metaset, axis, value, intersect) {
    const { controller , data , _sorted  } = metaset;
    const iScale = controller._cachedMeta.iScale;
    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {
        const lookupMethod = iScale._reversePixels ? _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A : _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B;
        if (!intersect) {
            return lookupMethod(data, axis, value);
        } else if (controller._sharedOptions) {
            const el = data[0];
            const range = typeof el.getRange === 'function' && el.getRange(axis);
            if (range) {
                const start = lookupMethod(data, axis, value - range);
                const end = lookupMethod(data, axis, value + range);
                return {
                    lo: start.lo,
                    hi: end.hi
                };
            }
        }
    }
    return {
        lo: 0,
        hi: data.length - 1
    };
}
 function evaluateInteractionItems(chart, axis, position, handler, intersect) {
    const metasets = chart.getSortedVisibleDatasetMetas();
    const value = position[axis];
    for(let i = 0, ilen = metasets.length; i < ilen; ++i){
        const { index , data  } = metasets[i];
        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);
        for(let j = lo; j <= hi; ++j){
            const element = data[j];
            if (!element.skip) {
                handler(element, index, j);
            }
        }
    }
}
 function getDistanceMetricForAxis(axis) {
    const useX = axis.indexOf('x') !== -1;
    const useY = axis.indexOf('y') !== -1;
    return function(pt1, pt2) {
        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    };
}
 function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
    const items = [];
    if (!includeInvisible && !chart.isPointInArea(position)) {
        return items;
    }
    const evaluationFunc = function(element, datasetIndex, index) {
        if (!includeInvisible && !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.C)(element, chart.chartArea, 0)) {
            return;
        }
        if (element.inRange(position.x, position.y, useFinalPosition)) {
            items.push({
                element,
                datasetIndex,
                index
            });
        }
    };
    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
    return items;
}
 function getNearestRadialItems(chart, position, axis, useFinalPosition) {
    let items = [];
    function evaluationFunc(element, datasetIndex, index) {
        const { startAngle , endAngle  } = element.getProps([
            'startAngle',
            'endAngle'
        ], useFinalPosition);
        const { angle  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.D)(element, {
            x: position.x,
            y: position.y
        });
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle)) {
            items.push({
                element,
                datasetIndex,
                index
            });
        }
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
 function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    let items = [];
    const distanceMetric = getDistanceMetricForAxis(axis);
    let minDistance = Number.POSITIVE_INFINITY;
    function evaluationFunc(element, datasetIndex, index) {
        const inRange = element.inRange(position.x, position.y, useFinalPosition);
        if (intersect && !inRange) {
            return;
        }
        const center = element.getCenterPoint(useFinalPosition);
        const pointInArea = !!includeInvisible || chart.isPointInArea(center);
        if (!pointInArea && !inRange) {
            return;
        }
        const distance = distanceMetric(position, center);
        if (distance < minDistance) {
            items = [
                {
                    element,
                    datasetIndex,
                    index
                }
            ];
            minDistance = distance;
        } else if (distance === minDistance) {
            items.push({
                element,
                datasetIndex,
                index
            });
        }
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
 function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    if (!includeInvisible && !chart.isPointInArea(position)) {
        return [];
    }
    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
 function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
    const items = [];
    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';
    let intersectsItem = false;
    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{
        if (element[rangeMethod](position[axis], useFinalPosition)) {
            items.push({
                element,
                datasetIndex,
                index
            });
            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
        }
    });
    if (intersect && !intersectsItem) {
        return [];
    }
    return items;
}
 var Interaction = {
    evaluateInteractionItems,
    modes: {
 index (chart, e, options, useFinalPosition) {
            const position = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.z)(e, chart);
            const axis = options.axis || 'x';
            const includeInvisible = options.includeInvisible || false;
            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            const elements = [];
            if (!items.length) {
                return [];
            }
            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{
                const index = items[0].index;
                const element = meta.data[index];
                if (element && !element.skip) {
                    elements.push({
                        element,
                        datasetIndex: meta.index,
                        index
                    });
                }
            });
            return elements;
        },
 dataset (chart, e, options, useFinalPosition) {
            const position = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.z)(e, chart);
            const axis = options.axis || 'xy';
            const includeInvisible = options.includeInvisible || false;
            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            if (items.length > 0) {
                const datasetIndex = items[0].datasetIndex;
                const data = chart.getDatasetMeta(datasetIndex).data;
                items = [];
                for(let i = 0; i < data.length; ++i){
                    items.push({
                        element: data[i],
                        datasetIndex,
                        index: i
                    });
                }
            }
            return items;
        },
 point (chart, e, options, useFinalPosition) {
            const position = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.z)(e, chart);
            const axis = options.axis || 'xy';
            const includeInvisible = options.includeInvisible || false;
            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
        },
 nearest (chart, e, options, useFinalPosition) {
            const position = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.z)(e, chart);
            const axis = options.axis || 'xy';
            const includeInvisible = options.includeInvisible || false;
            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
        },
 x (chart, e, options, useFinalPosition) {
            const position = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.z)(e, chart);
            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);
        },
 y (chart, e, options, useFinalPosition) {
            const position = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.z)(e, chart);
            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);
        }
    }
};

const STATIC_POSITIONS = [
    'left',
    'top',
    'right',
    'bottom'
];
function filterByPosition(array, position) {
    return array.filter((v)=>v.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}
function sortByWeight(array, reverse) {
    return array.sort((a, b)=>{
        const v0 = reverse ? b : a;
        const v1 = reverse ? a : b;
        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
    });
}
function wrapBoxes(boxes) {
    const layoutBoxes = [];
    let i, ilen, box, pos, stack, stackWeight;
    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){
        box = boxes[i];
        ({ position: pos , options: { stack , stackWeight =1  }  } = box);
        layoutBoxes.push({
            index: i,
            box,
            pos,
            horizontal: box.isHorizontal(),
            weight: box.weight,
            stack: stack && pos + stack,
            stackWeight
        });
    }
    return layoutBoxes;
}
function buildStacks(layouts) {
    const stacks = {};
    for (const wrap of layouts){
        const { stack , pos , stackWeight  } = wrap;
        if (!stack || !STATIC_POSITIONS.includes(pos)) {
            continue;
        }
        const _stack = stacks[stack] || (stacks[stack] = {
            count: 0,
            placed: 0,
            weight: 0,
            size: 0
        });
        _stack.count++;
        _stack.weight += stackWeight;
    }
    return stacks;
}
 function setLayoutDims(layouts, params) {
    const stacks = buildStacks(layouts);
    const { vBoxMaxWidth , hBoxMaxHeight  } = params;
    let i, ilen, layout;
    for(i = 0, ilen = layouts.length; i < ilen; ++i){
        layout = layouts[i];
        const { fullSize  } = layout.box;
        const stack = stacks[layout.stack];
        const factor = stack && layout.stackWeight / stack.weight;
        if (layout.horizontal) {
            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
            layout.height = hBoxMaxHeight;
        } else {
            layout.width = vBoxMaxWidth;
            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
        }
    }
    return stacks;
}
function buildLayoutBoxes(boxes) {
    const layoutBoxes = wrapBoxes(boxes);
    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);
    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
    return {
        fullSize,
        leftAndTop: left.concat(top),
        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
        chartArea: filterByPosition(layoutBoxes, 'chartArea'),
        vertical: left.concat(right).concat(centerVertical),
        horizontal: top.concat(bottom).concat(centerHorizontal)
    };
}
function getCombinedMax(maxPadding, chartArea, a, b) {
    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}
function updateMaxPadding(maxPadding, boxPadding) {
    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
    const { pos , box  } = layout;
    const maxPadding = chartArea.maxPadding;
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(pos)) {
        if (layout.size) {
            chartArea[pos] -= layout.size;
        }
        const stack = stacks[layout.stack] || {
            size: 0,
            count: 1
        };
        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
        layout.size = stack.size / stack.count;
        chartArea[pos] += layout.size;
    }
    if (box.getPadding) {
        updateMaxPadding(maxPadding, box.getPadding());
    }
    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));
    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));
    const widthChanged = newWidth !== chartArea.w;
    const heightChanged = newHeight !== chartArea.h;
    chartArea.w = newWidth;
    chartArea.h = newHeight;
    return layout.horizontal ? {
        same: widthChanged,
        other: heightChanged
    } : {
        same: heightChanged,
        other: widthChanged
    };
}
function handleMaxPadding(chartArea) {
    const maxPadding = chartArea.maxPadding;
    function updatePos(pos) {
        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
        chartArea[pos] += change;
        return change;
    }
    chartArea.y += updatePos('top');
    chartArea.x += updatePos('left');
    updatePos('right');
    updatePos('bottom');
}
function getMargins(horizontal, chartArea) {
    const maxPadding = chartArea.maxPadding;
    function marginForPositions(positions) {
        const margin = {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
        };
        positions.forEach((pos)=>{
            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
        });
        return margin;
    }
    return horizontal ? marginForPositions([
        'left',
        'right'
    ]) : marginForPositions([
        'top',
        'bottom'
    ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
    const refitBoxes = [];
    let i, ilen, layout, box, refit, changed;
    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){
        layout = boxes[i];
        box = layout.box;
        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
        const { same , other  } = updateDims(chartArea, params, layout, stacks);
        refit |= same && refitBoxes.length;
        changed = changed || other;
        if (!box.fullSize) {
            refitBoxes.push(layout);
        }
    }
    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
    box.top = top;
    box.left = left;
    box.right = left + width;
    box.bottom = top + height;
    box.width = width;
    box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
    const userPadding = params.padding;
    let { x , y  } = chartArea;
    for (const layout of boxes){
        const box = layout.box;
        const stack = stacks[layout.stack] || {
            count: 1,
            placed: 0,
            weight: 1
        };
        const weight = layout.stackWeight / stack.weight || 1;
        if (layout.horizontal) {
            const width = chartArea.w * weight;
            const height = stack.size || box.height;
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.h)(stack.start)) {
                y = stack.start;
            }
            if (box.fullSize) {
                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
            } else {
                setBoxDims(box, chartArea.left + stack.placed, y, width, height);
            }
            stack.start = y;
            stack.placed += width;
            y = box.bottom;
        } else {
            const height = chartArea.h * weight;
            const width = stack.size || box.width;
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.h)(stack.start)) {
                x = stack.start;
            }
            if (box.fullSize) {
                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
            } else {
                setBoxDims(box, x, chartArea.top + stack.placed, width, height);
            }
            stack.start = x;
            stack.placed += height;
            x = box.right;
        }
    }
    chartArea.x = x;
    chartArea.y = y;
}
var layouts = {
 addBox (chart, item) {
        if (!chart.boxes) {
            chart.boxes = [];
        }
        item.fullSize = item.fullSize || false;
        item.position = item.position || 'top';
        item.weight = item.weight || 0;
        item._layers = item._layers || function() {
            return [
                {
                    z: 0,
                    draw (chartArea) {
                        item.draw(chartArea);
                    }
                }
            ];
        };
        chart.boxes.push(item);
    },
 removeBox (chart, layoutItem) {
        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
        if (index !== -1) {
            chart.boxes.splice(index, 1);
        }
    },
 configure (chart, item, options) {
        item.fullSize = options.fullSize;
        item.position = options.position;
        item.weight = options.weight;
    },
 update (chart, width, height, minPadding) {
        if (!chart) {
            return;
        }
        const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(chart.options.layout.padding);
        const availableWidth = Math.max(width - padding.width, 0);
        const availableHeight = Math.max(height - padding.height, 0);
        const boxes = buildLayoutBoxes(chart.boxes);
        const verticalBoxes = boxes.vertical;
        const horizontalBoxes = boxes.horizontal;
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(chart.boxes, (box)=>{
            if (typeof box.beforeLayout === 'function') {
                box.beforeLayout();
            }
        });
        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
        const params = Object.freeze({
            outerWidth: width,
            outerHeight: height,
            padding,
            availableWidth,
            availableHeight,
            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
            hBoxMaxHeight: availableHeight / 2
        });
        const maxPadding = Object.assign({}, padding);
        updateMaxPadding(maxPadding, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(minPadding));
        const chartArea = Object.assign({
            maxPadding,
            w: availableWidth,
            h: availableHeight,
            x: padding.left,
            y: padding.top
        }, padding);
        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
        fitBoxes(boxes.fullSize, chartArea, params, stacks);
        fitBoxes(verticalBoxes, chartArea, params, stacks);
        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
            fitBoxes(verticalBoxes, chartArea, params, stacks);
        }
        handleMaxPadding(chartArea);
        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
        chartArea.x += chartArea.w;
        chartArea.y += chartArea.h;
        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
        chart.chartArea = {
            left: chartArea.left,
            top: chartArea.top,
            right: chartArea.left + chartArea.w,
            bottom: chartArea.top + chartArea.h,
            height: chartArea.h,
            width: chartArea.w
        };
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(boxes.chartArea, (layout)=>{
            const box = layout.box;
            Object.assign(box, chart.chartArea);
            box.update(chartArea.w, chartArea.h, {
                left: 0,
                top: 0,
                right: 0,
                bottom: 0
            });
        });
    }
};

class BasePlatform {
 acquireContext(canvas, aspectRatio) {}
 releaseContext(context) {
        return false;
    }
 addEventListener(chart, type, listener) {}
 removeEventListener(chart, type, listener) {}
 getDevicePixelRatio() {
        return 1;
    }
 getMaximumSize(element, width, height, aspectRatio) {
        width = Math.max(0, width || element.width);
        height = height || element.height;
        return {
            width,
            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
        };
    }
 isAttached(canvas) {
        return true;
    }
 updateConfig(config) {
    }
}

class BasicPlatform extends BasePlatform {
    acquireContext(item) {
        return item && item.getContext && item.getContext('2d') || null;
    }
    updateConfig(config) {
        config.options.animation = false;
    }
}

const EXPANDO_KEY = '$chartjs';
 const EVENT_TYPES = {
    touchstart: 'mousedown',
    touchmove: 'mousemove',
    touchend: 'mouseup',
    pointerenter: 'mouseenter',
    pointerdown: 'mousedown',
    pointermove: 'mousemove',
    pointerup: 'mouseup',
    pointerleave: 'mouseout',
    pointerout: 'mouseout'
};
const isNullOrEmpty = (value)=>value === null || value === '';
 function initCanvas(canvas, aspectRatio) {
    const style = canvas.style;
    const renderHeight = canvas.getAttribute('height');
    const renderWidth = canvas.getAttribute('width');
    canvas[EXPANDO_KEY] = {
        initial: {
            height: renderHeight,
            width: renderWidth,
            style: {
                display: style.display,
                height: style.height,
                width: style.width
            }
        }
    };
    style.display = style.display || 'block';
    style.boxSizing = style.boxSizing || 'border-box';
    if (isNullOrEmpty(renderWidth)) {
        const displayWidth = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(canvas, 'width');
        if (displayWidth !== undefined) {
            canvas.width = displayWidth;
        }
    }
    if (isNullOrEmpty(renderHeight)) {
        if (canvas.style.height === '') {
            canvas.height = canvas.width / (aspectRatio || 2);
        } else {
            const displayHeight = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(canvas, 'height');
            if (displayHeight !== undefined) {
                canvas.height = displayHeight;
            }
        }
    }
    return canvas;
}
const eventListenerOptions = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.K ? {
    passive: true
} : false;
function addListener(node, type, listener) {
    if (node) {
        node.addEventListener(type, listener, eventListenerOptions);
    }
}
function removeListener(chart, type, listener) {
    if (chart && chart.canvas) {
        chart.canvas.removeEventListener(type, listener, eventListenerOptions);
    }
}
function fromNativeEvent(event, chart) {
    const type = EVENT_TYPES[event.type] || event.type;
    const { x , y  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.z)(event, chart);
    return {
        type,
        chart,
        native: event,
        x: x !== undefined ? x : null,
        y: y !== undefined ? y : null
    };
}
function nodeListContains(nodeList, canvas) {
    for (const node of nodeList){
        if (node === canvas || node.contains(canvas)) {
            return true;
        }
    }
}
function createAttachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || nodeListContains(entry.addedNodes, canvas);
            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
        }
        if (trigger) {
            listener();
        }
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
function createDetachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || nodeListContains(entry.removedNodes, canvas);
            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
        }
        if (trigger) {
            listener();
        }
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
const drpListeningCharts = new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
    const dpr = window.devicePixelRatio;
    if (dpr === oldDevicePixelRatio) {
        return;
    }
    oldDevicePixelRatio = dpr;
    drpListeningCharts.forEach((resize, chart)=>{
        if (chart.currentDevicePixelRatio !== dpr) {
            resize();
        }
    });
}
function listenDevicePixelRatioChanges(chart, resize) {
    if (!drpListeningCharts.size) {
        window.addEventListener('resize', onWindowResize);
    }
    drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
    drpListeningCharts.delete(chart);
    if (!drpListeningCharts.size) {
        window.removeEventListener('resize', onWindowResize);
    }
}
function createResizeObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const container = canvas && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.I)(canvas);
    if (!container) {
        return;
    }
    const resize = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)((width, height)=>{
        const w = container.clientWidth;
        listener(width, height);
        if (w < container.clientWidth) {
            listener();
        }
    }, window);
    const observer = new ResizeObserver((entries)=>{
        const entry = entries[0];
        const width = entry.contentRect.width;
        const height = entry.contentRect.height;
        if (width === 0 && height === 0) {
            return;
        }
        resize(width, height);
    });
    observer.observe(container);
    listenDevicePixelRatioChanges(chart, resize);
    return observer;
}
function releaseObserver(chart, type, observer) {
    if (observer) {
        observer.disconnect();
    }
    if (type === 'resize') {
        unlistenDevicePixelRatioChanges(chart);
    }
}
function createProxyAndListen(chart, type, listener) {
    const canvas = chart.canvas;
    const proxy = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)((event)=>{
        if (chart.ctx !== null) {
            listener(fromNativeEvent(event, chart));
        }
    }, chart);
    addListener(canvas, type, proxy);
    return proxy;
}
 class DomPlatform extends BasePlatform {
 acquireContext(canvas, aspectRatio) {
        const context = canvas && canvas.getContext && canvas.getContext('2d');
        if (context && context.canvas === canvas) {
            initCanvas(canvas, aspectRatio);
            return context;
        }
        return null;
    }
 releaseContext(context) {
        const canvas = context.canvas;
        if (!canvas[EXPANDO_KEY]) {
            return false;
        }
        const initial = canvas[EXPANDO_KEY].initial;
        [
            'height',
            'width'
        ].forEach((prop)=>{
            const value = initial[prop];
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(value)) {
                canvas.removeAttribute(prop);
            } else {
                canvas.setAttribute(prop, value);
            }
        });
        const style = initial.style || {};
        Object.keys(style).forEach((key)=>{
            canvas.style[key] = style[key];
        });
        canvas.width = canvas.width;
        delete canvas[EXPANDO_KEY];
        return true;
    }
 addEventListener(chart, type, listener) {
        this.removeEventListener(chart, type);
        const proxies = chart.$proxies || (chart.$proxies = {});
        const handlers = {
            attach: createAttachObserver,
            detach: createDetachObserver,
            resize: createResizeObserver
        };
        const handler = handlers[type] || createProxyAndListen;
        proxies[type] = handler(chart, type, listener);
    }
 removeEventListener(chart, type) {
        const proxies = chart.$proxies || (chart.$proxies = {});
        const proxy = proxies[type];
        if (!proxy) {
            return;
        }
        const handlers = {
            attach: releaseObserver,
            detach: releaseObserver,
            resize: releaseObserver
        };
        const handler = handlers[type] || removeListener;
        handler(chart, type, proxy);
        proxies[type] = undefined;
    }
    getDevicePixelRatio() {
        return window.devicePixelRatio;
    }
 getMaximumSize(canvas, width, height, aspectRatio) {
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.G)(canvas, width, height, aspectRatio);
    }
 isAttached(canvas) {
        const container = canvas && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.I)(canvas);
        return !!(container && container.isConnected);
    }
}

function _detectPlatform(canvas) {
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {
        return BasicPlatform;
    }
    return DomPlatform;
}

class Element {
    static defaults = {};
    static defaultRoutes = undefined;
    x;
    y;
    active = false;
    options;
    $animations;
    tooltipPosition(useFinalPosition) {
        const { x , y  } = this.getProps([
            'x',
            'y'
        ], useFinalPosition);
        return {
            x,
            y
        };
    }
    hasValue() {
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.x)(this.x) && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.x)(this.y);
    }
    getProps(props, final) {
        const anims = this.$animations;
        if (!final || !anims) {
            // let's not create an object, if not needed
            return this;
        }
        const ret = {};
        props.forEach((prop)=>{
            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
        });
        return ret;
    }
}

function autoSkip(scale, ticks) {
    const tickOpts = scale.options.ticks;
    const determinedMaxTicks = determineMaxTicks(scale);
    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
    const numMajorIndices = majorIndices.length;
    const first = majorIndices[0];
    const last = majorIndices[numMajorIndices - 1];
    const newTicks = [];
    if (numMajorIndices > ticksLimit) {
        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
        return newTicks;
    }
    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
    if (numMajorIndices > 0) {
        let i, ilen;
        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
        skip(ticks, newTicks, spacing, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){
            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
        }
        skip(ticks, newTicks, spacing, last, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
        return newTicks;
    }
    skip(ticks, newTicks, spacing);
    return newTicks;
}
function determineMaxTicks(scale) {
    const offset = scale.options.offset;
    const tickLength = scale._tickSize();
    const maxScale = scale._length / tickLength + (offset ? 0 : 1);
    const maxChart = scale._maxLength / tickLength;
    return Math.floor(Math.min(maxScale, maxChart));
}
 function calculateSpacing(majorIndices, ticks, ticksLimit) {
    const evenMajorSpacing = getEvenSpacing(majorIndices);
    const spacing = ticks.length / ticksLimit;
    if (!evenMajorSpacing) {
        return Math.max(spacing, 1);
    }
    const factors = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.N)(evenMajorSpacing);
    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){
        const factor = factors[i];
        if (factor > spacing) {
            return factor;
        }
    }
    return Math.max(spacing, 1);
}
 function getMajorIndices(ticks) {
    const result = [];
    let i, ilen;
    for(i = 0, ilen = ticks.length; i < ilen; i++){
        if (ticks[i].major) {
            result.push(i);
        }
    }
    return result;
}
 function skipMajors(ticks, newTicks, majorIndices, spacing) {
    let count = 0;
    let next = majorIndices[0];
    let i;
    spacing = Math.ceil(spacing);
    for(i = 0; i < ticks.length; i++){
        if (i === next) {
            newTicks.push(ticks[i]);
            count++;
            next = majorIndices[count * spacing];
        }
    }
}
 function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
    const start = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(majorStart, 0);
    const end = Math.min((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(majorEnd, ticks.length), ticks.length);
    let count = 0;
    let length, i, next;
    spacing = Math.ceil(spacing);
    if (majorEnd) {
        length = majorEnd - majorStart;
        spacing = length / Math.floor(length / spacing);
    }
    next = start;
    while(next < 0){
        count++;
        next = Math.round(start + count * spacing);
    }
    for(i = Math.max(start, 0); i < end; i++){
        if (i === next) {
            newTicks.push(ticks[i]);
            count++;
            next = Math.round(start + count * spacing);
        }
    }
}
 function getEvenSpacing(arr) {
    const len = arr.length;
    let i, diff;
    if (len < 2) {
        return false;
    }
    for(diff = arr[0], i = 1; i < len; ++i){
        if (arr[i] - arr[i - 1] !== diff) {
            return false;
        }
    }
    return diff;
}

const reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;
const offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;
const getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);
 function sample(arr, numItems) {
    const result = [];
    const increment = arr.length / numItems;
    const len = arr.length;
    let i = 0;
    for(; i < len; i += increment){
        result.push(arr[Math.floor(i)]);
    }
    return result;
}
 function getPixelForGridLine(scale, index, offsetGridLines) {
    const length = scale.ticks.length;
    const validIndex = Math.min(index, length - 1);
    const start = scale._startPixel;
    const end = scale._endPixel;
    const epsilon = 1e-6;
    let lineValue = scale.getPixelForTick(validIndex);
    let offset;
    if (offsetGridLines) {
        if (length === 1) {
            offset = Math.max(lineValue - start, end - lineValue);
        } else if (index === 0) {
            offset = (scale.getPixelForTick(1) - lineValue) / 2;
        } else {
            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
        }
        lineValue += validIndex < index ? offset : -offset;
        if (lineValue < start - epsilon || lineValue > end + epsilon) {
            return;
        }
    }
    return lineValue;
}
 function garbageCollect(caches, length) {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(caches, (cache)=>{
        const gc = cache.gc;
        const gcLen = gc.length / 2;
        let i;
        if (gcLen > length) {
            for(i = 0; i < gcLen; ++i){
                delete cache.data[gc[i]];
            }
            gc.splice(0, gcLen);
        }
    });
}
 function getTickMarkLength(options) {
    return options.drawTicks ? options.tickLength : 0;
}
 function getTitleHeight(options, fallback) {
    if (!options.display) {
        return 0;
    }
    const font = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(options.font, fallback);
    const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(options.padding);
    const lines = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(options.text) ? options.text.length : 1;
    return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(parent, {
        scale,
        type: 'scale'
    });
}
function createTickContext(parent, index, tick) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(parent, {
        tick,
        index,
        type: 'tick'
    });
}
function titleAlign(align, position, reverse) {
     let ret = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a1)(align);
    if (reverse && position !== 'right' || !reverse && position === 'right') {
        ret = reverseAlign(ret);
    }
    return ret;
}
function titleArgs(scale, offset, position, align) {
    const { top , left , bottom , right , chart  } = scale;
    const { chartArea , scales  } = chart;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    const height = bottom - top;
    const width = right - left;
    if (scale.isHorizontal()) {
        titleX = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, left, right);
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
        } else if (position === 'center') {
            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
        } else {
            titleY = offsetFromEdge(scale, position, offset);
        }
        maxWidth = right - left;
    } else {
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
        } else if (position === 'center') {
            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
        } else {
            titleX = offsetFromEdge(scale, position, offset);
        }
        titleY = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, bottom, top);
        rotation = position === 'left' ? -_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H : _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H;
    }
    return {
        titleX,
        titleY,
        maxWidth,
        rotation
    };
}
class Scale extends Element {
    constructor(cfg){
        super();
         this.id = cfg.id;
         this.type = cfg.type;
         this.options = undefined;
         this.ctx = cfg.ctx;
         this.chart = cfg.chart;
         this.top = undefined;
         this.bottom = undefined;
         this.left = undefined;
         this.right = undefined;
         this.width = undefined;
         this.height = undefined;
        this._margins = {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        };
         this.maxWidth = undefined;
         this.maxHeight = undefined;
         this.paddingTop = undefined;
         this.paddingBottom = undefined;
         this.paddingLeft = undefined;
         this.paddingRight = undefined;
         this.axis = undefined;
         this.labelRotation = undefined;
        this.min = undefined;
        this.max = undefined;
        this._range = undefined;
         this.ticks = [];
         this._gridLineItems = null;
         this._labelItems = null;
         this._labelSizes = null;
        this._length = 0;
        this._maxLength = 0;
        this._longestTextCache = {};
         this._startPixel = undefined;
         this._endPixel = undefined;
        this._reversePixels = false;
        this._userMax = undefined;
        this._userMin = undefined;
        this._suggestedMax = undefined;
        this._suggestedMin = undefined;
        this._ticksLength = 0;
        this._borderValue = 0;
        this._cache = {};
        this._dataLimitsCached = false;
        this.$context = undefined;
    }
 init(options) {
        this.options = options.setContext(this.getContext());
        this.axis = options.axis;
        this._userMin = this.parse(options.min);
        this._userMax = this.parse(options.max);
        this._suggestedMin = this.parse(options.suggestedMin);
        this._suggestedMax = this.parse(options.suggestedMax);
    }
 parse(raw, index) {
        return raw;
    }
 getUserBounds() {
        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;
        _userMin = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(_userMin, Number.POSITIVE_INFINITY);
        _userMax = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(_userMax, Number.NEGATIVE_INFINITY);
        _suggestedMin = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(_suggestedMin, Number.POSITIVE_INFINITY);
        _suggestedMax = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(_suggestedMax, Number.NEGATIVE_INFINITY);
        return {
            min: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(_userMin, _suggestedMin),
            max: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(_userMax, _suggestedMax),
            minDefined: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(_userMin),
            maxDefined: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(_userMax)
        };
    }
 getMinMax(canStack) {
        let { min , max , minDefined , maxDefined  } = this.getUserBounds();
        let range;
        if (minDefined && maxDefined) {
            return {
                min,
                max
            };
        }
        const metas = this.getMatchingVisibleMetas();
        for(let i = 0, ilen = metas.length; i < ilen; ++i){
            range = metas[i].controller.getMinMax(this, canStack);
            if (!minDefined) {
                min = Math.min(min, range.min);
            }
            if (!maxDefined) {
                max = Math.max(max, range.max);
            }
        }
        min = maxDefined && min > max ? max : min;
        max = minDefined && min > max ? min : max;
        return {
            min: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(min, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(max, min)),
            max: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(max, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(min, max))
        };
    }
 getPadding() {
        return {
            left: this.paddingLeft || 0,
            top: this.paddingTop || 0,
            right: this.paddingRight || 0,
            bottom: this.paddingBottom || 0
        };
    }
 getTicks() {
        return this.ticks;
    }
 getLabels() {
        const data = this.chart.data;
        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
    }
 getLabelItems(chartArea = this.chart.chartArea) {
        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
        return items;
    }
    beforeLayout() {
        this._cache = {};
        this._dataLimitsCached = false;
    }
    beforeUpdate() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.beforeUpdate, [
            this
        ]);
    }
 update(maxWidth, maxHeight, margins) {
        const { beginAtZero , grace , ticks: tickOpts  } = this.options;
        const sampleSize = tickOpts.sampleSize;
        this.beforeUpdate();
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins = Object.assign({
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        }, margins);
        this.ticks = null;
        this._labelSizes = null;
        this._gridLineItems = null;
        this._labelItems = null;
        this.beforeSetDimensions();
        this.setDimensions();
        this.afterSetDimensions();
        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
        if (!this._dataLimitsCached) {
            this.beforeDataLimits();
            this.determineDataLimits();
            this.afterDataLimits();
            this._range = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.R)(this, grace, beginAtZero);
            this._dataLimitsCached = true;
        }
        this.beforeBuildTicks();
        this.ticks = this.buildTicks() || [];
        this.afterBuildTicks();
        const samplingEnabled = sampleSize < this.ticks.length;
        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
        this.configure();
        this.beforeCalculateLabelRotation();
        this.calculateLabelRotation();
        this.afterCalculateLabelRotation();
        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {
            this.ticks = autoSkip(this, this.ticks);
            this._labelSizes = null;
            this.afterAutoSkip();
        }
        if (samplingEnabled) {
            this._convertTicksToLabels(this.ticks);
        }
        this.beforeFit();
        this.fit();
        this.afterFit();
        this.afterUpdate();
    }
 configure() {
        let reversePixels = this.options.reverse;
        let startPixel, endPixel;
        if (this.isHorizontal()) {
            startPixel = this.left;
            endPixel = this.right;
        } else {
            startPixel = this.top;
            endPixel = this.bottom;
            reversePixels = !reversePixels;
        }
        this._startPixel = startPixel;
        this._endPixel = endPixel;
        this._reversePixels = reversePixels;
        this._length = endPixel - startPixel;
        this._alignToPixels = this.options.alignToPixels;
    }
    afterUpdate() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.afterUpdate, [
            this
        ]);
    }
    beforeSetDimensions() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.beforeSetDimensions, [
            this
        ]);
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = 0;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = 0;
            this.bottom = this.height;
        }
        this.paddingLeft = 0;
        this.paddingTop = 0;
        this.paddingRight = 0;
        this.paddingBottom = 0;
    }
    afterSetDimensions() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.afterSetDimensions, [
            this
        ]);
    }
    _callHooks(name) {
        this.chart.notifyPlugins(name, this.getContext());
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options[name], [
            this
        ]);
    }
    beforeDataLimits() {
        this._callHooks('beforeDataLimits');
    }
    determineDataLimits() {}
    afterDataLimits() {
        this._callHooks('afterDataLimits');
    }
    beforeBuildTicks() {
        this._callHooks('beforeBuildTicks');
    }
 buildTicks() {
        return [];
    }
    afterBuildTicks() {
        this._callHooks('afterBuildTicks');
    }
    beforeTickToLabelConversion() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.beforeTickToLabelConversion, [
            this
        ]);
    }
 generateTickLabels(ticks) {
        const tickOpts = this.options.ticks;
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; i++){
            tick = ticks[i];
            tick.label = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(tickOpts.callback, [
                tick.value,
                i,
                ticks
            ], this);
        }
    }
    afterTickToLabelConversion() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.afterTickToLabelConversion, [
            this
        ]);
    }
    beforeCalculateLabelRotation() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.beforeCalculateLabelRotation, [
            this
        ]);
    }
    calculateLabelRotation() {
        const options = this.options;
        const tickOpts = options.ticks;
        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
        const minRotation = tickOpts.minRotation || 0;
        const maxRotation = tickOpts.maxRotation;
        let labelRotation = minRotation;
        let tickWidth, maxHeight, maxLabelDiagonal;
        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
            this.labelRotation = minRotation;
            return;
        }
        const labelSizes = this._getLabelSizes();
        const maxLabelWidth = labelSizes.widest.width;
        const maxLabelHeight = labelSizes.highest.height;
        const maxWidth = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(this.chart.width - maxLabelWidth, 0, this.maxWidth);
        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
        if (maxLabelWidth + 6 > tickWidth) {
            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
            labelRotation = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.U)(Math.min(Math.asin((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(maxLabelHeight / maxLabelDiagonal, -1, 1))));
            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
        }
        this.labelRotation = labelRotation;
    }
    afterCalculateLabelRotation() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.afterCalculateLabelRotation, [
            this
        ]);
    }
    afterAutoSkip() {}
    beforeFit() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.beforeFit, [
            this
        ]);
    }
    fit() {
        const minSize = {
            width: 0,
            height: 0
        };
        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;
        const display = this._isVisible();
        const isHorizontal = this.isHorizontal();
        if (display) {
            const titleHeight = getTitleHeight(titleOpts, chart.options.font);
            if (isHorizontal) {
                minSize.width = this.maxWidth;
                minSize.height = getTickMarkLength(gridOpts) + titleHeight;
            } else {
                minSize.height = this.maxHeight;
                minSize.width = getTickMarkLength(gridOpts) + titleHeight;
            }
            if (tickOpts.display && this.ticks.length) {
                const { first , last , widest , highest  } = this._getLabelSizes();
                const tickPadding = tickOpts.padding * 2;
                const angleRadians = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);
                const cos = Math.cos(angleRadians);
                const sin = Math.sin(angleRadians);
                if (isHorizontal) {
                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
                } else {
                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
                }
                this._calculatePadding(first, last, sin, cos);
            }
        }
        this._handleMargins();
        if (isHorizontal) {
            this.width = this._length = chart.width - this._margins.left - this._margins.right;
            this.height = minSize.height;
        } else {
            this.width = minSize.width;
            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
        }
    }
    _calculatePadding(first, last, sin, cos) {
        const { ticks: { align , padding  } , position  } = this.options;
        const isRotated = this.labelRotation !== 0;
        const labelsBelowTicks = position !== 'top' && this.axis === 'x';
        if (this.isHorizontal()) {
            const offsetLeft = this.getPixelForTick(0) - this.left;
            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
            let paddingLeft = 0;
            let paddingRight = 0;
            if (isRotated) {
                if (labelsBelowTicks) {
                    paddingLeft = cos * first.width;
                    paddingRight = sin * last.height;
                } else {
                    paddingLeft = sin * first.height;
                    paddingRight = cos * last.width;
                }
            } else if (align === 'start') {
                paddingRight = last.width;
            } else if (align === 'end') {
                paddingLeft = first.width;
            } else if (align !== 'inner') {
                paddingLeft = first.width / 2;
                paddingRight = last.width / 2;
            }
            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
        } else {
            let paddingTop = last.height / 2;
            let paddingBottom = first.height / 2;
            if (align === 'start') {
                paddingTop = 0;
                paddingBottom = first.height;
            } else if (align === 'end') {
                paddingTop = last.height;
                paddingBottom = 0;
            }
            this.paddingTop = paddingTop + padding;
            this.paddingBottom = paddingBottom + padding;
        }
    }
 _handleMargins() {
        if (this._margins) {
            this._margins.left = Math.max(this.paddingLeft, this._margins.left);
            this._margins.top = Math.max(this.paddingTop, this._margins.top);
            this._margins.right = Math.max(this.paddingRight, this._margins.right);
            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
        }
    }
    afterFit() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.afterFit, [
            this
        ]);
    }
 isHorizontal() {
        const { axis , position  } = this.options;
        return position === 'top' || position === 'bottom' || axis === 'x';
    }
 isFullSize() {
        return this.options.fullSize;
    }
 _convertTicksToLabels(ticks) {
        this.beforeTickToLabelConversion();
        this.generateTickLabels(ticks);
        let i, ilen;
        for(i = 0, ilen = ticks.length; i < ilen; i++){
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(ticks[i].label)) {
                ticks.splice(i, 1);
                ilen--;
                i--;
            }
        }
        this.afterTickToLabelConversion();
    }
 _getLabelSizes() {
        let labelSizes = this._labelSizes;
        if (!labelSizes) {
            const sampleSize = this.options.ticks.sampleSize;
            let ticks = this.ticks;
            if (sampleSize < ticks.length) {
                ticks = sample(ticks, sampleSize);
            }
            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
        }
        return labelSizes;
    }
 _computeLabelSizes(ticks, length, maxTicksLimit) {
        const { ctx , _longestTextCache: caches  } = this;
        const widths = [];
        const heights = [];
        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
        let widestLabelSize = 0;
        let highestLabelSize = 0;
        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
        for(i = 0; i < length; i += increment){
            label = ticks[i].label;
            tickFont = this._resolveTickFontOptions(i);
            ctx.font = fontString = tickFont.string;
            cache = caches[fontString] = caches[fontString] || {
                data: {},
                gc: []
            };
            lineHeight = tickFont.lineHeight;
            width = height = 0;
            if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(label) && !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(label)) {
                width = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.V)(ctx, cache.data, cache.gc, width, label);
                height = lineHeight;
            } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(label)) {
                for(j = 0, jlen = label.length; j < jlen; ++j){
                    nestedLabel =  label[j];
                    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(nestedLabel) && !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(nestedLabel)) {
                        width = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.V)(ctx, cache.data, cache.gc, width, nestedLabel);
                        height += lineHeight;
                    }
                }
            }
            widths.push(width);
            heights.push(height);
            widestLabelSize = Math.max(width, widestLabelSize);
            highestLabelSize = Math.max(height, highestLabelSize);
        }
        garbageCollect(caches, length);
        const widest = widths.indexOf(widestLabelSize);
        const highest = heights.indexOf(highestLabelSize);
        const valueAt = (idx)=>({
                width: widths[idx] || 0,
                height: heights[idx] || 0
            });
        return {
            first: valueAt(0),
            last: valueAt(length - 1),
            widest: valueAt(widest),
            highest: valueAt(highest),
            widths,
            heights
        };
    }
 getLabelForValue(value) {
        return value;
    }
 getPixelForValue(value, index) {
        return NaN;
    }
 getValueForPixel(pixel) {}
 getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) {
            return null;
        }
        return this.getPixelForValue(ticks[index].value);
    }
 getPixelForDecimal(decimal) {
        if (this._reversePixels) {
            decimal = 1 - decimal;
        }
        const pixel = this._startPixel + decimal * this._length;
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.W)(this._alignToPixels ? (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(this.chart, pixel, 0) : pixel);
    }
 getDecimalForPixel(pixel) {
        const decimal = (pixel - this._startPixel) / this._length;
        return this._reversePixels ? 1 - decimal : decimal;
    }
 getBasePixel() {
        return this.getPixelForValue(this.getBaseValue());
    }
 getBaseValue() {
        const { min , max  } = this;
        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
    }
 getContext(index) {
        const ticks = this.ticks || [];
        if (index >= 0 && index < ticks.length) {
            const tick = ticks[index];
            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));
        }
        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
    }
 _tickSize() {
        const optionTicks = this.options.ticks;
        const rot = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);
        const cos = Math.abs(Math.cos(rot));
        const sin = Math.abs(Math.sin(rot));
        const labelSizes = this._getLabelSizes();
        const padding = optionTicks.autoSkipPadding || 0;
        const w = labelSizes ? labelSizes.widest.width + padding : 0;
        const h = labelSizes ? labelSizes.highest.height + padding : 0;
        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
    }
 _isVisible() {
        const display = this.options.display;
        if (display !== 'auto') {
            return !!display;
        }
        return this.getMatchingVisibleMetas().length > 0;
    }
 _computeGridLineItems(chartArea) {
        const axis = this.axis;
        const chart = this.chart;
        const options = this.options;
        const { grid , position , border  } = options;
        const offset = grid.offset;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const ticksLength = ticks.length + (offset ? 1 : 0);
        const tl = getTickMarkLength(grid);
        const items = [];
        const borderOpts = border.setContext(this.getContext());
        const axisWidth = borderOpts.display ? borderOpts.width : 0;
        const axisHalfWidth = axisWidth / 2;
        const alignBorderValue = function(pixel) {
            return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(chart, pixel, axisWidth);
        };
        let borderValue, i, lineValue, alignedLineValue;
        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
        if (position === 'top') {
            borderValue = alignBorderValue(this.bottom);
            ty1 = this.bottom - tl;
            ty2 = borderValue - axisHalfWidth;
            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
            y2 = chartArea.bottom;
        } else if (position === 'bottom') {
            borderValue = alignBorderValue(this.top);
            y1 = chartArea.top;
            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
            ty1 = borderValue + axisHalfWidth;
            ty2 = this.top + tl;
        } else if (position === 'left') {
            borderValue = alignBorderValue(this.right);
            tx1 = this.right - tl;
            tx2 = borderValue - axisHalfWidth;
            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
            x2 = chartArea.right;
        } else if (position === 'right') {
            borderValue = alignBorderValue(this.left);
            x1 = chartArea.left;
            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
            tx1 = borderValue + axisHalfWidth;
            tx2 = this.left + tl;
        } else if (axis === 'x') {
            if (position === 'center') {
                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
            } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            y1 = chartArea.top;
            y2 = chartArea.bottom;
            ty1 = borderValue + axisHalfWidth;
            ty2 = ty1 + tl;
        } else if (axis === 'y') {
            if (position === 'center') {
                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
            } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            tx1 = borderValue - axisHalfWidth;
            tx2 = tx1 - tl;
            x1 = chartArea.left;
            x2 = chartArea.right;
        }
        const limit = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(options.ticks.maxTicksLimit, ticksLength);
        const step = Math.max(1, Math.ceil(ticksLength / limit));
        for(i = 0; i < ticksLength; i += step){
            const context = this.getContext(i);
            const optsAtIndex = grid.setContext(context);
            const optsAtIndexBorder = border.setContext(context);
            const lineWidth = optsAtIndex.lineWidth;
            const lineColor = optsAtIndex.color;
            const borderDash = optsAtIndexBorder.dash || [];
            const borderDashOffset = optsAtIndexBorder.dashOffset;
            const tickWidth = optsAtIndex.tickWidth;
            const tickColor = optsAtIndex.tickColor;
            const tickBorderDash = optsAtIndex.tickBorderDash || [];
            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
            lineValue = getPixelForGridLine(this, i, offset);
            if (lineValue === undefined) {
                continue;
            }
            alignedLineValue = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(chart, lineValue, lineWidth);
            if (isHorizontal) {
                tx1 = tx2 = x1 = x2 = alignedLineValue;
            } else {
                ty1 = ty2 = y1 = y2 = alignedLineValue;
            }
            items.push({
                tx1,
                ty1,
                tx2,
                ty2,
                x1,
                y1,
                x2,
                y2,
                width: lineWidth,
                color: lineColor,
                borderDash,
                borderDashOffset,
                tickWidth,
                tickColor,
                tickBorderDash,
                tickBorderDashOffset
            });
        }
        this._ticksLength = ticksLength;
        this._borderValue = borderValue;
        return items;
    }
 _computeLabelItems(chartArea) {
        const axis = this.axis;
        const options = this.options;
        const { position , ticks: optionTicks  } = options;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const { align , crossAlign , padding , mirror  } = optionTicks;
        const tl = getTickMarkLength(options.grid);
        const tickAndPadding = tl + padding;
        const hTickAndPadding = mirror ? -padding : tickAndPadding;
        const rotation = -(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);
        const items = [];
        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
        let textBaseline = 'middle';
        if (position === 'top') {
            y = this.bottom - hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === 'bottom') {
            y = this.top + hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === 'left') {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (position === 'right') {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (axis === 'x') {
            if (position === 'center') {
                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
            } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
            }
            textAlign = this._getXAxisLabelAlignment();
        } else if (axis === 'y') {
            if (position === 'center') {
                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
            } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                x = this.chart.scales[positionAxisID].getPixelForValue(value);
            }
            textAlign = this._getYAxisLabelAlignment(tl).textAlign;
        }
        if (axis === 'y') {
            if (align === 'start') {
                textBaseline = 'top';
            } else if (align === 'end') {
                textBaseline = 'bottom';
            }
        }
        const labelSizes = this._getLabelSizes();
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            label = tick.label;
            const optsAtIndex = optionTicks.setContext(this.getContext(i));
            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
            font = this._resolveTickFontOptions(i);
            lineHeight = font.lineHeight;
            lineCount = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(label) ? label.length : 1;
            const halfCount = lineCount / 2;
            const color = optsAtIndex.color;
            const strokeColor = optsAtIndex.textStrokeColor;
            const strokeWidth = optsAtIndex.textStrokeWidth;
            let tickTextAlign = textAlign;
            if (isHorizontal) {
                x = pixel;
                if (textAlign === 'inner') {
                    if (i === ilen - 1) {
                        tickTextAlign = !this.options.reverse ? 'right' : 'left';
                    } else if (i === 0) {
                        tickTextAlign = !this.options.reverse ? 'left' : 'right';
                    } else {
                        tickTextAlign = 'center';
                    }
                }
                if (position === 'top') {
                    if (crossAlign === 'near' || rotation !== 0) {
                        textOffset = -lineCount * lineHeight + lineHeight / 2;
                    } else if (crossAlign === 'center') {
                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
                    } else {
                        textOffset = -labelSizes.highest.height + lineHeight / 2;
                    }
                } else {
                    if (crossAlign === 'near' || rotation !== 0) {
                        textOffset = lineHeight / 2;
                    } else if (crossAlign === 'center') {
                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
                    } else {
                        textOffset = labelSizes.highest.height - lineCount * lineHeight;
                    }
                }
                if (mirror) {
                    textOffset *= -1;
                }
                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
                    x += lineHeight / 2 * Math.sin(rotation);
                }
            } else {
                y = pixel;
                textOffset = (1 - lineCount) * lineHeight / 2;
            }
            let backdrop;
            if (optsAtIndex.showLabelBackdrop) {
                const labelPadding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(optsAtIndex.backdropPadding);
                const height = labelSizes.heights[i];
                const width = labelSizes.widths[i];
                let top = textOffset - labelPadding.top;
                let left = 0 - labelPadding.left;
                switch(textBaseline){
                    case 'middle':
                        top -= height / 2;
                        break;
                    case 'bottom':
                        top -= height;
                        break;
                }
                switch(textAlign){
                    case 'center':
                        left -= width / 2;
                        break;
                    case 'right':
                        left -= width;
                        break;
                    case 'inner':
                        if (i === ilen - 1) {
                            left -= width;
                        } else if (i > 0) {
                            left -= width / 2;
                        }
                        break;
                }
                backdrop = {
                    left,
                    top,
                    width: width + labelPadding.width,
                    height: height + labelPadding.height,
                    color: optsAtIndex.backdropColor
                };
            }
            items.push({
                label,
                font,
                textOffset,
                options: {
                    rotation,
                    color,
                    strokeColor,
                    strokeWidth,
                    textAlign: tickTextAlign,
                    textBaseline,
                    translation: [
                        x,
                        y
                    ],
                    backdrop
                }
            });
        }
        return items;
    }
    _getXAxisLabelAlignment() {
        const { position , ticks  } = this.options;
        const rotation = -(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);
        if (rotation) {
            return position === 'top' ? 'left' : 'right';
        }
        let align = 'center';
        if (ticks.align === 'start') {
            align = 'left';
        } else if (ticks.align === 'end') {
            align = 'right';
        } else if (ticks.align === 'inner') {
            align = 'inner';
        }
        return align;
    }
    _getYAxisLabelAlignment(tl) {
        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;
        const labelSizes = this._getLabelSizes();
        const tickAndPadding = tl + padding;
        const widest = labelSizes.widest.width;
        let textAlign;
        let x;
        if (position === 'left') {
            if (mirror) {
                x = this.right + padding;
                if (crossAlign === 'near') {
                    textAlign = 'left';
                } else if (crossAlign === 'center') {
                    textAlign = 'center';
                    x += widest / 2;
                } else {
                    textAlign = 'right';
                    x += widest;
                }
            } else {
                x = this.right - tickAndPadding;
                if (crossAlign === 'near') {
                    textAlign = 'right';
                } else if (crossAlign === 'center') {
                    textAlign = 'center';
                    x -= widest / 2;
                } else {
                    textAlign = 'left';
                    x = this.left;
                }
            }
        } else if (position === 'right') {
            if (mirror) {
                x = this.left + padding;
                if (crossAlign === 'near') {
                    textAlign = 'right';
                } else if (crossAlign === 'center') {
                    textAlign = 'center';
                    x -= widest / 2;
                } else {
                    textAlign = 'left';
                    x -= widest;
                }
            } else {
                x = this.left + tickAndPadding;
                if (crossAlign === 'near') {
                    textAlign = 'left';
                } else if (crossAlign === 'center') {
                    textAlign = 'center';
                    x += widest / 2;
                } else {
                    textAlign = 'right';
                    x = this.right;
                }
            }
        } else {
            textAlign = 'right';
        }
        return {
            textAlign,
            x
        };
    }
 _computeLabelArea() {
        if (this.options.ticks.mirror) {
            return;
        }
        const chart = this.chart;
        const position = this.options.position;
        if (position === 'left' || position === 'right') {
            return {
                top: 0,
                left: this.left,
                bottom: chart.height,
                right: this.right
            };
        }
        if (position === 'top' || position === 'bottom') {
            return {
                top: this.top,
                left: 0,
                bottom: this.bottom,
                right: chart.width
            };
        }
    }
 drawBackground() {
        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;
        if (backgroundColor) {
            ctx.save();
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(left, top, width, height);
            ctx.restore();
        }
    }
    getLineWidthForValue(value) {
        const grid = this.options.grid;
        if (!this._isVisible() || !grid.display) {
            return 0;
        }
        const ticks = this.ticks;
        const index = ticks.findIndex((t)=>t.value === value);
        if (index >= 0) {
            const opts = grid.setContext(this.getContext(index));
            return opts.lineWidth;
        }
        return 0;
    }
 drawGrid(chartArea) {
        const grid = this.options.grid;
        const ctx = this.ctx;
        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
        let i, ilen;
        const drawLine = (p1, p2, style)=>{
            if (!style.width || !style.color) {
                return;
            }
            ctx.save();
            ctx.lineWidth = style.width;
            ctx.strokeStyle = style.color;
            ctx.setLineDash(style.borderDash || []);
            ctx.lineDashOffset = style.borderDashOffset;
            ctx.beginPath();
            ctx.moveTo(p1.x, p1.y);
            ctx.lineTo(p2.x, p2.y);
            ctx.stroke();
            ctx.restore();
        };
        if (grid.display) {
            for(i = 0, ilen = items.length; i < ilen; ++i){
                const item = items[i];
                if (grid.drawOnChartArea) {
                    drawLine({
                        x: item.x1,
                        y: item.y1
                    }, {
                        x: item.x2,
                        y: item.y2
                    }, item);
                }
                if (grid.drawTicks) {
                    drawLine({
                        x: item.tx1,
                        y: item.ty1
                    }, {
                        x: item.tx2,
                        y: item.ty2
                    }, {
                        color: item.tickColor,
                        width: item.tickWidth,
                        borderDash: item.tickBorderDash,
                        borderDashOffset: item.tickBorderDashOffset
                    });
                }
            }
        }
    }
 drawBorder() {
        const { chart , ctx , options: { border , grid  }  } = this;
        const borderOpts = border.setContext(this.getContext());
        const axisWidth = border.display ? borderOpts.width : 0;
        if (!axisWidth) {
            return;
        }
        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
        const borderValue = this._borderValue;
        let x1, x2, y1, y2;
        if (this.isHorizontal()) {
            x1 = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(chart, this.left, axisWidth) - axisWidth / 2;
            x2 = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(chart, this.right, lastLineWidth) + lastLineWidth / 2;
            y1 = y2 = borderValue;
        } else {
            y1 = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(chart, this.top, axisWidth) - axisWidth / 2;
            y2 = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
            x1 = x2 = borderValue;
        }
        ctx.save();
        ctx.lineWidth = borderOpts.width;
        ctx.strokeStyle = borderOpts.color;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        ctx.restore();
    }
 drawLabels(chartArea) {
        const optionTicks = this.options.ticks;
        if (!optionTicks.display) {
            return;
        }
        const ctx = this.ctx;
        const area = this._computeLabelArea();
        if (area) {
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Y)(ctx, area);
        }
        const items = this.getLabelItems(chartArea);
        for (const item of items){
            const renderTextOptions = item.options;
            const tickFont = item.font;
            const label = item.label;
            const y = item.textOffset;
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(ctx, label, 0, y, tickFont, renderTextOptions);
        }
        if (area) {
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.$)(ctx);
        }
    }
 drawTitle() {
        const { ctx , options: { position , title , reverse  }  } = this;
        if (!title.display) {
            return;
        }
        const font = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(title.font);
        const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(title.padding);
        const align = title.align;
        let offset = font.lineHeight / 2;
        if (position === 'bottom' || position === 'center' || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
            offset += padding.bottom;
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(title.text)) {
                offset += font.lineHeight * (title.text.length - 1);
            }
        } else {
            offset += padding.top;
        }
        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(ctx, title.text, 0, 0, font, {
            color: title.color,
            maxWidth,
            rotation,
            textAlign: titleAlign(align, position, reverse),
            textBaseline: 'middle',
            translation: [
                titleX,
                titleY
            ]
        });
    }
    draw(chartArea) {
        if (!this._isVisible()) {
            return;
        }
        this.drawBackground();
        this.drawGrid(chartArea);
        this.drawBorder();
        this.drawTitle();
        this.drawLabels(chartArea);
    }
 _layers() {
        const opts = this.options;
        const tz = opts.ticks && opts.ticks.z || 0;
        const gz = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(opts.grid && opts.grid.z, -1);
        const bz = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(opts.border && opts.border.z, 0);
        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
            return [
                {
                    z: tz,
                    draw: (chartArea)=>{
                        this.draw(chartArea);
                    }
                }
            ];
        }
        return [
            {
                z: gz,
                draw: (chartArea)=>{
                    this.drawBackground();
                    this.drawGrid(chartArea);
                    this.drawTitle();
                }
            },
            {
                z: bz,
                draw: ()=>{
                    this.drawBorder();
                }
            },
            {
                z: tz,
                draw: (chartArea)=>{
                    this.drawLabels(chartArea);
                }
            }
        ];
    }
 getMatchingVisibleMetas(type) {
        const metas = this.chart.getSortedVisibleDatasetMetas();
        const axisID = this.axis + 'AxisID';
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metas.length; i < ilen; ++i){
            const meta = metas[i];
            if (meta[axisID] === this.id && (!type || meta.type === type)) {
                result.push(meta);
            }
        }
        return result;
    }
 _resolveTickFontOptions(index) {
        const opts = this.options.ticks.setContext(this.getContext(index));
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(opts.font);
    }
 _maxDigits() {
        const fontSize = this._resolveTickFontOptions(0).lineHeight;
        return (this.isHorizontal() ? this.width : this.height) / fontSize;
    }
}

class TypedRegistry {
    constructor(type, scope, override){
        this.type = type;
        this.scope = scope;
        this.override = override;
        this.items = Object.create(null);
    }
    isForType(type) {
        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
    }
 register(item) {
        const proto = Object.getPrototypeOf(item);
        let parentScope;
        if (isIChartComponent(proto)) {
            parentScope = this.register(proto);
        }
        const items = this.items;
        const id = item.id;
        const scope = this.scope + '.' + id;
        if (!id) {
            throw new Error('class does not have id: ' + item);
        }
        if (id in items) {
            return scope;
        }
        items[id] = item;
        registerDefaults(item, scope, parentScope);
        if (this.override) {
            _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.override(item.id, item.overrides);
        }
        return scope;
    }
 get(id) {
        return this.items[id];
    }
 unregister(item) {
        const items = this.items;
        const id = item.id;
        const scope = this.scope;
        if (id in items) {
            delete items[id];
        }
        if (scope && id in _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d[scope]) {
            delete _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d[scope][id];
            if (this.override) {
                delete _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a3[id];
            }
        }
    }
}
function registerDefaults(item, scope, parentScope) {
    const itemDefaults = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a4)(Object.create(null), [
        parentScope ? _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.get(parentScope) : {},
        _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.get(scope),
        item.defaults
    ]);
    _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.set(scope, itemDefaults);
    if (item.defaultRoutes) {
        routeDefaults(scope, item.defaultRoutes);
    }
    if (item.descriptors) {
        _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.describe(scope, item.descriptors);
    }
}
function routeDefaults(scope, routes) {
    Object.keys(routes).forEach((property)=>{
        const propertyParts = property.split('.');
        const sourceName = propertyParts.pop();
        const sourceScope = [
            scope
        ].concat(propertyParts).join('.');
        const parts = routes[property].split('.');
        const targetName = parts.pop();
        const targetScope = parts.join('.');
        _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.route(sourceScope, sourceName, targetScope, targetName);
    });
}
function isIChartComponent(proto) {
    return 'id' in proto && 'defaults' in proto;
}

class Registry {
    constructor(){
        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);
        this.elements = new TypedRegistry(Element, 'elements');
        this.plugins = new TypedRegistry(Object, 'plugins');
        this.scales = new TypedRegistry(Scale, 'scales');
        this._typedRegistries = [
            this.controllers,
            this.scales,
            this.elements
        ];
    }
 add(...args) {
        this._each('register', args);
    }
    remove(...args) {
        this._each('unregister', args);
    }
 addControllers(...args) {
        this._each('register', args, this.controllers);
    }
 addElements(...args) {
        this._each('register', args, this.elements);
    }
 addPlugins(...args) {
        this._each('register', args, this.plugins);
    }
 addScales(...args) {
        this._each('register', args, this.scales);
    }
 getController(id) {
        return this._get(id, this.controllers, 'controller');
    }
 getElement(id) {
        return this._get(id, this.elements, 'element');
    }
 getPlugin(id) {
        return this._get(id, this.plugins, 'plugin');
    }
 getScale(id) {
        return this._get(id, this.scales, 'scale');
    }
 removeControllers(...args) {
        this._each('unregister', args, this.controllers);
    }
 removeElements(...args) {
        this._each('unregister', args, this.elements);
    }
 removePlugins(...args) {
        this._each('unregister', args, this.plugins);
    }
 removeScales(...args) {
        this._each('unregister', args, this.scales);
    }
 _each(method, args, typedRegistry) {
        [
            ...args
        ].forEach((arg)=>{
            const reg = typedRegistry || this._getRegistryForType(arg);
            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
                this._exec(method, reg, arg);
            } else {
                (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(arg, (item)=>{
                    const itemReg = typedRegistry || this._getRegistryForType(item);
                    this._exec(method, itemReg, item);
                });
            }
        });
    }
 _exec(method, registry, component) {
        const camelMethod = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a5)(method);
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(component['before' + camelMethod], [], component);
        registry[method](component);
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(component['after' + camelMethod], [], component);
    }
 _getRegistryForType(type) {
        for(let i = 0; i < this._typedRegistries.length; i++){
            const reg = this._typedRegistries[i];
            if (reg.isForType(type)) {
                return reg;
            }
        }
        return this.plugins;
    }
 _get(id, typedRegistry, type) {
        const item = typedRegistry.get(id);
        if (item === undefined) {
            throw new Error('"' + id + '" is not a registered ' + type + '.');
        }
        return item;
    }
}
var registry = /* #__PURE__ */ new Registry();

class PluginService {
    constructor(){
        this._init = [];
    }
 notify(chart, hook, args, filter) {
        if (hook === 'beforeInit') {
            this._init = this._createDescriptors(chart, true);
            this._notify(this._init, chart, 'install');
        }
        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
        const result = this._notify(descriptors, chart, hook, args);
        if (hook === 'afterDestroy') {
            this._notify(descriptors, chart, 'stop');
            this._notify(this._init, chart, 'uninstall');
        }
        return result;
    }
 _notify(descriptors, chart, hook, args) {
        args = args || {};
        for (const descriptor of descriptors){
            const plugin = descriptor.plugin;
            const method = plugin[hook];
            const params = [
                chart,
                args,
                descriptor.options
            ];
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(method, params, plugin) === false && args.cancelable) {
                return false;
            }
        }
        return true;
    }
    invalidate() {
        if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(this._cache)) {
            this._oldCache = this._cache;
            this._cache = undefined;
        }
    }
 _descriptors(chart) {
        if (this._cache) {
            return this._cache;
        }
        const descriptors = this._cache = this._createDescriptors(chart);
        this._notifyStateChanges(chart);
        return descriptors;
    }
    _createDescriptors(chart, all) {
        const config = chart && chart.config;
        const options = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(config.options && config.options.plugins, {});
        const plugins = allPlugins(config);
        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
    }
 _notifyStateChanges(chart) {
        const previousDescriptors = this._oldCache || [];
        const descriptors = this._cache;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));
        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');
        this._notify(diff(descriptors, previousDescriptors), chart, 'start');
    }
}
 function allPlugins(config) {
    const localIds = {};
    const plugins = [];
    const keys = Object.keys(registry.plugins.items);
    for(let i = 0; i < keys.length; i++){
        plugins.push(registry.getPlugin(keys[i]));
    }
    const local = config.plugins || [];
    for(let i = 0; i < local.length; i++){
        const plugin = local[i];
        if (plugins.indexOf(plugin) === -1) {
            plugins.push(plugin);
            localIds[plugin.id] = true;
        }
    }
    return {
        plugins,
        localIds
    };
}
function getOpts(options, all) {
    if (!all && options === false) {
        return null;
    }
    if (options === true) {
        return {};
    }
    return options;
}
function createDescriptors(chart, { plugins , localIds  }, options, all) {
    const result = [];
    const context = chart.getContext();
    for (const plugin of plugins){
        const id = plugin.id;
        const opts = getOpts(options[id], all);
        if (opts === null) {
            continue;
        }
        result.push({
            plugin,
            options: pluginOpts(chart.config, {
                plugin,
                local: localIds[id]
            }, opts, context)
        });
    }
    return result;
}
function pluginOpts(config, { plugin , local  }, opts, context) {
    const keys = config.pluginScopeKeys(plugin);
    const scopes = config.getOptionScopes(opts, keys);
    if (local && plugin.defaults) {
        scopes.push(plugin.defaults);
    }
    return config.createResolver(scopes, context, [
        ''
    ], {
        scriptable: false,
        indexable: false,
        allKeys: true
    });
}

function getIndexAxis(type, options) {
    const datasetDefaults = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type] || {};
    const datasetOptions = (options.datasets || {})[type] || {};
    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';
}
function getAxisFromDefaultScaleID(id, indexAxis) {
    let axis = id;
    if (id === '_index_') {
        axis = indexAxis;
    } else if (id === '_value_') {
        axis = indexAxis === 'x' ? 'y' : 'x';
    }
    return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
    return axis === indexAxis ? '_index_' : '_value_';
}
function idMatchesAxis(id) {
    if (id === 'x' || id === 'y' || id === 'r') {
        return id;
    }
}
function axisFromPosition(position) {
    if (position === 'top' || position === 'bottom') {
        return 'x';
    }
    if (position === 'left' || position === 'right') {
        return 'y';
    }
}
function determineAxis(id, ...scaleOptions) {
    if (idMatchesAxis(id)) {
        return id;
    }
    for (const opts of scaleOptions){
        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());
        if (axis) {
            return axis;
        }
    }
    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);
}
function getAxisFromDataset(id, axis, dataset) {
    if (dataset[axis + 'AxisID'] === id) {
        return {
            axis
        };
    }
}
function retrieveAxisFromDatasets(id, config) {
    if (config.data && config.data.datasets) {
        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);
        if (boundDs.length) {
            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);
        }
    }
    return {};
}
function mergeScaleConfig(config, options) {
    const chartDefaults = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a3[config.type] || {
        scales: {}
    };
    const configScales = options.scales || {};
    const chartIndexAxis = getIndexAxis(config.type, options);
    const scales = Object.create(null);
    Object.keys(configScales).forEach((id)=>{
        const scaleConf = configScales[id];
        if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(scaleConf)) {
            return console.error(`Invalid scale configuration for scale: ${id}`);
        }
        if (scaleConf._proxy) {
            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
        }
        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.scales[scaleConf.type]);
        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
        const defaultScaleOptions = chartDefaults.scales || {};
        scales[id] = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ab)(Object.create(null), [
            {
                axis
            },
            scaleConf,
            defaultScaleOptions[axis],
            defaultScaleOptions[defaultId]
        ]);
    });
    config.data.datasets.forEach((dataset)=>{
        const type = dataset.type || config.type;
        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
        const datasetDefaults = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a3[type] || {};
        const defaultScaleOptions = datasetDefaults.scales || {};
        Object.keys(defaultScaleOptions).forEach((defaultID)=>{
            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
            const id = dataset[axis + 'AxisID'] || axis;
            scales[id] = scales[id] || Object.create(null);
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ab)(scales[id], [
                {
                    axis
                },
                configScales[id],
                defaultScaleOptions[defaultID]
            ]);
        });
    });
    Object.keys(scales).forEach((key)=>{
        const scale = scales[key];
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ab)(scale, [
            _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.scales[scale.type],
            _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.scale
        ]);
    });
    return scales;
}
function initOptions(config) {
    const options = config.options || (config.options = {});
    options.plugins = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(options.plugins, {});
    options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
    data = data || {};
    data.datasets = data.datasets || [];
    data.labels = data.labels || [];
    return data;
}
function initConfig(config) {
    config = config || {};
    config.data = initData(config.data);
    initOptions(config);
    return config;
}
const keyCache = new Map();
const keysCached = new Set();
function cachedKeys(cacheKey, generate) {
    let keys = keyCache.get(cacheKey);
    if (!keys) {
        keys = generate();
        keyCache.set(cacheKey, keys);
        keysCached.add(keys);
    }
    return keys;
}
const addIfFound = (set, obj, key)=>{
    const opts = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(obj, key);
    if (opts !== undefined) {
        set.add(opts);
    }
};
class Config {
    constructor(config){
        this._config = initConfig(config);
        this._scopeCache = new Map();
        this._resolverCache = new Map();
    }
    get platform() {
        return this._config.platform;
    }
    get type() {
        return this._config.type;
    }
    set type(type) {
        this._config.type = type;
    }
    get data() {
        return this._config.data;
    }
    set data(data) {
        this._config.data = initData(data);
    }
    get options() {
        return this._config.options;
    }
    set options(options) {
        this._config.options = options;
    }
    get plugins() {
        return this._config.plugins;
    }
    update() {
        const config = this._config;
        this.clearCache();
        initOptions(config);
    }
    clearCache() {
        this._scopeCache.clear();
        this._resolverCache.clear();
    }
 datasetScopeKeys(datasetType) {
        return cachedKeys(datasetType, ()=>[
                [
                    `datasets.${datasetType}`,
                    ''
                ]
            ]);
    }
 datasetAnimationScopeKeys(datasetType, transition) {
        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[
                [
                    `datasets.${datasetType}.transitions.${transition}`,
                    `transitions.${transition}`
                ],
                [
                    `datasets.${datasetType}`,
                    ''
                ]
            ]);
    }
 datasetElementScopeKeys(datasetType, elementType) {
        return cachedKeys(`${datasetType}-${elementType}`, ()=>[
                [
                    `datasets.${datasetType}.elements.${elementType}`,
                    `datasets.${datasetType}`,
                    `elements.${elementType}`,
                    ''
                ]
            ]);
    }
 pluginScopeKeys(plugin) {
        const id = plugin.id;
        const type = this.type;
        return cachedKeys(`${type}-plugin-${id}`, ()=>[
                [
                    `plugins.${id}`,
                    ...plugin.additionalOptionScopes || []
                ]
            ]);
    }
 _cachedScopes(mainScope, resetCache) {
        const _scopeCache = this._scopeCache;
        let cache = _scopeCache.get(mainScope);
        if (!cache || resetCache) {
            cache = new Map();
            _scopeCache.set(mainScope, cache);
        }
        return cache;
    }
 getOptionScopes(mainScope, keyLists, resetCache) {
        const { options , type  } = this;
        const cache = this._cachedScopes(mainScope, resetCache);
        const cached = cache.get(keyLists);
        if (cached) {
            return cached;
        }
        const scopes = new Set();
        keyLists.forEach((keys)=>{
            if (mainScope) {
                scopes.add(mainScope);
                keys.forEach((key)=>addIfFound(scopes, mainScope, key));
            }
            keys.forEach((key)=>addIfFound(scopes, options, key));
            keys.forEach((key)=>addIfFound(scopes, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a3[type] || {}, key));
            keys.forEach((key)=>addIfFound(scopes, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d, key));
            keys.forEach((key)=>addIfFound(scopes, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a6, key));
        });
        const array = Array.from(scopes);
        if (array.length === 0) {
            array.push(Object.create(null));
        }
        if (keysCached.has(keyLists)) {
            cache.set(keyLists, array);
        }
        return array;
    }
 chartOptionScopes() {
        const { options , type  } = this;
        return [
            options,
            _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a3[type] || {},
            _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type] || {},
            {
                type
            },
            _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d,
            _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a6
        ];
    }
 resolveNamedOptions(scopes, names, context, prefixes = [
        ''
    ]) {
        const result = {
            $shared: true
        };
        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);
        let options = resolver;
        if (needContext(resolver, names)) {
            result.$shared = false;
            context = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a7)(context) ? context() : context;
            const subResolver = this.createResolver(scopes, context, subPrefixes);
            options = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a8)(resolver, context, subResolver);
        }
        for (const prop of names){
            result[prop] = options[prop];
        }
        return result;
    }
 createResolver(scopes, context, prefixes = [
        ''
    ], descriptorDefaults) {
        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(context) ? (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a8)(resolver, context, undefined, descriptorDefaults) : resolver;
    }
}
function getResolver(resolverCache, scopes, prefixes) {
    let cache = resolverCache.get(scopes);
    if (!cache) {
        cache = new Map();
        resolverCache.set(scopes, cache);
    }
    const cacheKey = prefixes.join();
    let cached = cache.get(cacheKey);
    if (!cached) {
        const resolver = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a9)(scopes, prefixes);
        cached = {
            resolver,
            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))
        };
        cache.set(cacheKey, cached);
    }
    return cached;
}
const hasFunction = (value)=>(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(value) && Object.getOwnPropertyNames(value).some((key)=>(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a7)(value[key]));
function needContext(proxy, names) {
    const { isScriptable , isIndexable  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aa)(proxy);
    for (const prop of names){
        const scriptable = isScriptable(prop);
        const indexable = isIndexable(prop);
        const value = (indexable || scriptable) && proxy[prop];
        if (scriptable && ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a7)(value) || hasFunction(value)) || indexable && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(value)) {
            return true;
        }
    }
    return false;
}

var version = "4.4.3";

const KNOWN_POSITIONS = [
    'top',
    'bottom',
    'left',
    'right',
    'chartArea'
];
function positionIsHorizontal(position, axis) {
    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';
}
function compare2Level(l1, l2) {
    return function(a, b) {
        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
    };
}
function onAnimationsComplete(context) {
    const chart = context.chart;
    const animationOptions = chart.options.animation;
    chart.notifyPlugins('afterRender');
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(animationOptions && animationOptions.onComplete, [
        context
    ], chart);
}
function onAnimationProgress(context) {
    const chart = context.chart;
    const animationOptions = chart.options.animation;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(animationOptions && animationOptions.onProgress, [
        context
    ], chart);
}
 function getCanvas(item) {
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)() && typeof item === 'string') {
        item = document.getElementById(item);
    } else if (item && item.length) {
        item = item[0];
    }
    if (item && item.canvas) {
        item = item.canvas;
    }
    return item;
}
const instances = {};
const getChart = (key)=>{
    const canvas = getCanvas(key);
    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
    const keys = Object.keys(obj);
    for (const key of keys){
        const intKey = +key;
        if (intKey >= start) {
            const value = obj[key];
            delete obj[key];
            if (move > 0 || intKey > start) {
                obj[intKey + move] = value;
            }
        }
    }
}
 function determineLastEvent(e, lastEvent, inChartArea, isClick) {
    if (!inChartArea || e.type === 'mouseout') {
        return null;
    }
    if (isClick) {
        return lastEvent;
    }
    return e;
}
function getSizeForArea(scale, chartArea, field) {
    return scale.options.clip ? scale[field] : chartArea[field];
}
function getDatasetArea(meta, chartArea) {
    const { xScale , yScale  } = meta;
    if (xScale && yScale) {
        return {
            left: getSizeForArea(xScale, chartArea, 'left'),
            right: getSizeForArea(xScale, chartArea, 'right'),
            top: getSizeForArea(yScale, chartArea, 'top'),
            bottom: getSizeForArea(yScale, chartArea, 'bottom')
        };
    }
    return chartArea;
}
class Chart {
    static defaults = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d;
    static instances = instances;
    static overrides = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a3;
    static registry = registry;
    static version = version;
    static getChart = getChart;
    static register(...items) {
        registry.add(...items);
        invalidatePlugins();
    }
    static unregister(...items) {
        registry.remove(...items);
        invalidatePlugins();
    }
    constructor(item, userConfig){
        const config = this.config = new Config(userConfig);
        const initialCanvas = getCanvas(item);
        const existingChart = getChart(initialCanvas);
        if (existingChart) {
            throw new Error('Canvas is already in use. Chart with ID \'' + existingChart.id + '\'' + ' must be destroyed before the canvas with ID \'' + existingChart.canvas.id + '\' can be reused.');
        }
        const options = config.createResolver(config.chartOptionScopes(), this.getContext());
        this.platform = new (config.platform || _detectPlatform(initialCanvas))();
        this.platform.updateConfig(config);
        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
        const canvas = context && context.canvas;
        const height = canvas && canvas.height;
        const width = canvas && canvas.width;
        this.id = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ac)();
        this.ctx = context;
        this.canvas = canvas;
        this.width = width;
        this.height = height;
        this._options = options;
        this._aspectRatio = this.aspectRatio;
        this._layers = [];
        this._metasets = [];
        this._stacks = undefined;
        this.boxes = [];
        this.currentDevicePixelRatio = undefined;
        this.chartArea = undefined;
        this._active = [];
        this._lastEvent = undefined;
        this._listeners = {};
         this._responsiveListeners = undefined;
        this._sortedMetasets = [];
        this.scales = {};
        this._plugins = new PluginService();
        this.$proxies = {};
        this._hiddenIndices = {};
        this.attached = false;
        this._animationsDisabled = undefined;
        this.$context = undefined;
        this._doResize = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ad)((mode)=>this.update(mode), options.resizeDelay || 0);
        this._dataChanges = [];
        instances[this.id] = this;
        if (!context || !canvas) {
            console.error("Failed to create chart: can't acquire context from the given item");
            return;
        }
        animator.listen(this, 'complete', onAnimationsComplete);
        animator.listen(this, 'progress', onAnimationProgress);
        this._initialize();
        if (this.attached) {
            this.update();
        }
    }
    get aspectRatio() {
        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;
        if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(aspectRatio)) {
            return aspectRatio;
        }
        if (maintainAspectRatio && _aspectRatio) {
            return _aspectRatio;
        }
        return height ? width / height : null;
    }
    get data() {
        return this.config.data;
    }
    set data(data) {
        this.config.data = data;
    }
    get options() {
        return this._options;
    }
    set options(options) {
        this.config.options = options;
    }
    get registry() {
        return registry;
    }
 _initialize() {
        this.notifyPlugins('beforeInit');
        if (this.options.responsive) {
            this.resize();
        } else {
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ae)(this, this.options.devicePixelRatio);
        }
        this.bindEvents();
        this.notifyPlugins('afterInit');
        return this;
    }
    clear() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.af)(this.canvas, this.ctx);
        return this;
    }
    stop() {
        animator.stop(this);
        return this;
    }
 resize(width, height) {
        if (!animator.running(this)) {
            this._resize(width, height);
        } else {
            this._resizeBeforeDraw = {
                width,
                height
            };
        }
    }
    _resize(width, height) {
        const options = this.options;
        const canvas = this.canvas;
        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
        const mode = this.width ? 'resize' : 'attach';
        this.width = newSize.width;
        this.height = newSize.height;
        this._aspectRatio = this.aspectRatio;
        if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ae)(this, newRatio, true)) {
            return;
        }
        this.notifyPlugins('resize', {
            size: newSize
        });
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(options.onResize, [
            this,
            newSize
        ], this);
        if (this.attached) {
            if (this._doResize(mode)) {
                this.render();
            }
        }
    }
    ensureScalesHaveIDs() {
        const options = this.options;
        const scalesOptions = options.scales || {};
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(scalesOptions, (axisOptions, axisID)=>{
            axisOptions.id = axisID;
        });
    }
 buildOrUpdateScales() {
        const options = this.options;
        const scaleOpts = options.scales;
        const scales = this.scales;
        const updated = Object.keys(scales).reduce((obj, id)=>{
            obj[id] = false;
            return obj;
        }, {});
        let items = [];
        if (scaleOpts) {
            items = items.concat(Object.keys(scaleOpts).map((id)=>{
                const scaleOptions = scaleOpts[id];
                const axis = determineAxis(id, scaleOptions);
                const isRadial = axis === 'r';
                const isHorizontal = axis === 'x';
                return {
                    options: scaleOptions,
                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
                };
            }));
        }
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(items, (item)=>{
            const scaleOptions = item.options;
            const id = scaleOptions.id;
            const axis = determineAxis(id, scaleOptions);
            const scaleType = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(scaleOptions.type, item.dtype);
            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
                scaleOptions.position = item.dposition;
            }
            updated[id] = true;
            let scale = null;
            if (id in scales && scales[id].type === scaleType) {
                scale = scales[id];
            } else {
                const scaleClass = registry.getScale(scaleType);
                scale = new scaleClass({
                    id,
                    type: scaleType,
                    ctx: this.ctx,
                    chart: this
                });
                scales[scale.id] = scale;
            }
            scale.init(scaleOptions, options);
        });
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(updated, (hasUpdated, id)=>{
            if (!hasUpdated) {
                delete scales[id];
            }
        });
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(scales, (scale)=>{
            layouts.configure(this, scale, scale.options);
            layouts.addBox(this, scale);
        });
    }
 _updateMetasets() {
        const metasets = this._metasets;
        const numData = this.data.datasets.length;
        const numMeta = metasets.length;
        metasets.sort((a, b)=>a.index - b.index);
        if (numMeta > numData) {
            for(let i = numData; i < numMeta; ++i){
                this._destroyDatasetMeta(i);
            }
            metasets.splice(numData, numMeta - numData);
        }
        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
    }
 _removeUnreferencedMetasets() {
        const { _metasets: metasets , data: { datasets  }  } = this;
        if (metasets.length > datasets.length) {
            delete this._stacks;
        }
        metasets.forEach((meta, index)=>{
            if (datasets.filter((x)=>x === meta._dataset).length === 0) {
                this._destroyDatasetMeta(index);
            }
        });
    }
    buildOrUpdateControllers() {
        const newControllers = [];
        const datasets = this.data.datasets;
        let i, ilen;
        this._removeUnreferencedMetasets();
        for(i = 0, ilen = datasets.length; i < ilen; i++){
            const dataset = datasets[i];
            let meta = this.getDatasetMeta(i);
            const type = dataset.type || this.config.type;
            if (meta.type && meta.type !== type) {
                this._destroyDatasetMeta(i);
                meta = this.getDatasetMeta(i);
            }
            meta.type = type;
            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
            meta.order = dataset.order || 0;
            meta.index = i;
            meta.label = '' + dataset.label;
            meta.visible = this.isDatasetVisible(i);
            if (meta.controller) {
                meta.controller.updateIndex(i);
                meta.controller.linkScales();
            } else {
                const ControllerClass = registry.getController(type);
                const { datasetElementType , dataElementType  } = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type];
                Object.assign(ControllerClass, {
                    dataElementType: registry.getElement(dataElementType),
                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)
                });
                meta.controller = new ControllerClass(this, i);
                newControllers.push(meta.controller);
            }
        }
        this._updateMetasets();
        return newControllers;
    }
 _resetElements() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(this.data.datasets, (dataset, datasetIndex)=>{
            this.getDatasetMeta(datasetIndex).controller.reset();
        }, this);
    }
 reset() {
        this._resetElements();
        this.notifyPlugins('reset');
    }
    update(mode) {
        const config = this.config;
        config.update();
        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
        const animsDisabled = this._animationsDisabled = !options.animation;
        this._updateScales();
        this._checkEventBindings();
        this._updateHiddenIndices();
        this._plugins.invalidate();
        if (this.notifyPlugins('beforeUpdate', {
            mode,
            cancelable: true
        }) === false) {
            return;
        }
        const newControllers = this.buildOrUpdateControllers();
        this.notifyPlugins('beforeElementsUpdate');
        let minPadding = 0;
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){
            const { controller  } = this.getDatasetMeta(i);
            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
            controller.buildOrUpdateElements(reset);
            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
        }
        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
        this._updateLayout(minPadding);
        if (!animsDisabled) {
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(newControllers, (controller)=>{
                controller.reset();
            });
        }
        this._updateDatasets(mode);
        this.notifyPlugins('afterUpdate', {
            mode
        });
        this._layers.sort(compare2Level('z', '_idx'));
        const { _active , _lastEvent  } = this;
        if (_lastEvent) {
            this._eventHandler(_lastEvent, true);
        } else if (_active.length) {
            this._updateHoverStyles(_active, _active, true);
        }
        this.render();
    }
 _updateScales() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(this.scales, (scale)=>{
            layouts.removeBox(this, scale);
        });
        this.ensureScalesHaveIDs();
        this.buildOrUpdateScales();
    }
 _checkEventBindings() {
        const options = this.options;
        const existingEvents = new Set(Object.keys(this._listeners));
        const newEvents = new Set(options.events);
        if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ag)(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
            this.unbindEvents();
            this.bindEvents();
        }
    }
 _updateHiddenIndices() {
        const { _hiddenIndices  } = this;
        const changes = this._getUniformDataChanges() || [];
        for (const { method , start , count  } of changes){
            const move = method === '_removeElements' ? -count : count;
            moveNumericKeys(_hiddenIndices, start, move);
        }
    }
 _getUniformDataChanges() {
        const _dataChanges = this._dataChanges;
        if (!_dataChanges || !_dataChanges.length) {
            return;
        }
        this._dataChanges = [];
        const datasetCount = this.data.datasets.length;
        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));
        const changeSet = makeSet(0);
        for(let i = 1; i < datasetCount; i++){
            if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ag)(changeSet, makeSet(i))) {
                return;
            }
        }
        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({
                method: a[1],
                start: +a[2],
                count: +a[3]
            }));
    }
 _updateLayout(minPadding) {
        if (this.notifyPlugins('beforeLayout', {
            cancelable: true
        }) === false) {
            return;
        }
        layouts.update(this, this.width, this.height, minPadding);
        const area = this.chartArea;
        const noArea = area.width <= 0 || area.height <= 0;
        this._layers = [];
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(this.boxes, (box)=>{
            if (noArea && box.position === 'chartArea') {
                return;
            }
            if (box.configure) {
                box.configure();
            }
            this._layers.push(...box._layers());
        }, this);
        this._layers.forEach((item, index)=>{
            item._idx = index;
        });
        this.notifyPlugins('afterLayout');
    }
 _updateDatasets(mode) {
        if (this.notifyPlugins('beforeDatasetsUpdate', {
            mode,
            cancelable: true
        }) === false) {
            return;
        }
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
            this.getDatasetMeta(i).controller.configure();
        }
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
            this._updateDataset(i, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a7)(mode) ? mode({
                datasetIndex: i
            }) : mode);
        }
        this.notifyPlugins('afterDatasetsUpdate', {
            mode
        });
    }
 _updateDataset(index, mode) {
        const meta = this.getDatasetMeta(index);
        const args = {
            meta,
            index,
            mode,
            cancelable: true
        };
        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {
            return;
        }
        meta.controller._update(mode);
        args.cancelable = false;
        this.notifyPlugins('afterDatasetUpdate', args);
    }
    render() {
        if (this.notifyPlugins('beforeRender', {
            cancelable: true
        }) === false) {
            return;
        }
        if (animator.has(this)) {
            if (this.attached && !animator.running(this)) {
                animator.start(this);
            }
        } else {
            this.draw();
            onAnimationsComplete({
                chart: this
            });
        }
    }
    draw() {
        let i;
        if (this._resizeBeforeDraw) {
            const { width , height  } = this._resizeBeforeDraw;
            this._resize(width, height);
            this._resizeBeforeDraw = null;
        }
        this.clear();
        if (this.width <= 0 || this.height <= 0) {
            return;
        }
        if (this.notifyPlugins('beforeDraw', {
            cancelable: true
        }) === false) {
            return;
        }
        const layers = this._layers;
        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){
            layers[i].draw(this.chartArea);
        }
        this._drawDatasets();
        for(; i < layers.length; ++i){
            layers[i].draw(this.chartArea);
        }
        this.notifyPlugins('afterDraw');
    }
 _getSortedDatasetMetas(filterVisible) {
        const metasets = this._sortedMetasets;
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metasets.length; i < ilen; ++i){
            const meta = metasets[i];
            if (!filterVisible || meta.visible) {
                result.push(meta);
            }
        }
        return result;
    }
 getSortedVisibleDatasetMetas() {
        return this._getSortedDatasetMetas(true);
    }
 _drawDatasets() {
        if (this.notifyPlugins('beforeDatasetsDraw', {
            cancelable: true
        }) === false) {
            return;
        }
        const metasets = this.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i){
            this._drawDataset(metasets[i]);
        }
        this.notifyPlugins('afterDatasetsDraw');
    }
 _drawDataset(meta) {
        const ctx = this.ctx;
        const clip = meta._clip;
        const useClip = !clip.disabled;
        const area = getDatasetArea(meta, this.chartArea);
        const args = {
            meta,
            index: meta.index,
            cancelable: true
        };
        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {
            return;
        }
        if (useClip) {
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Y)(ctx, {
                left: clip.left === false ? 0 : area.left - clip.left,
                right: clip.right === false ? this.width : area.right + clip.right,
                top: clip.top === false ? 0 : area.top - clip.top,
                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
            });
        }
        meta.controller.draw();
        if (useClip) {
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.$)(ctx);
        }
        args.cancelable = false;
        this.notifyPlugins('afterDatasetDraw', args);
    }
 isPointInArea(point) {
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.C)(point, this.chartArea, this._minPadding);
    }
    getElementsAtEventForMode(e, mode, options, useFinalPosition) {
        const method = Interaction.modes[mode];
        if (typeof method === 'function') {
            return method(this, e, options, useFinalPosition);
        }
        return [];
    }
    getDatasetMeta(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        const metasets = this._metasets;
        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();
        if (!meta) {
            meta = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                xAxisID: null,
                yAxisID: null,
                order: dataset && dataset.order || 0,
                index: datasetIndex,
                _dataset: dataset,
                _parsed: [],
                _sorted: false
            };
            metasets.push(meta);
        }
        return meta;
    }
    getContext() {
        return this.$context || (this.$context = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(null, {
            chart: this,
            type: 'chart'
        }));
    }
    getVisibleDatasetCount() {
        return this.getSortedVisibleDatasetMetas().length;
    }
    isDatasetVisible(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        if (!dataset) {
            return false;
        }
        const meta = this.getDatasetMeta(datasetIndex);
        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;
    }
    setDatasetVisibility(datasetIndex, visible) {
        const meta = this.getDatasetMeta(datasetIndex);
        meta.hidden = !visible;
    }
    toggleDataVisibility(index) {
        this._hiddenIndices[index] = !this._hiddenIndices[index];
    }
    getDataVisibility(index) {
        return !this._hiddenIndices[index];
    }
 _updateVisibility(datasetIndex, dataIndex, visible) {
        const mode = visible ? 'show' : 'hide';
        const meta = this.getDatasetMeta(datasetIndex);
        const anims = meta.controller._resolveAnimations(undefined, mode);
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.h)(dataIndex)) {
            meta.data[dataIndex].hidden = !visible;
            this.update();
        } else {
            this.setDatasetVisibility(datasetIndex, visible);
            anims.update(meta, {
                visible
            });
            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);
        }
    }
    hide(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, false);
    }
    show(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, true);
    }
 _destroyDatasetMeta(datasetIndex) {
        const meta = this._metasets[datasetIndex];
        if (meta && meta.controller) {
            meta.controller._destroy();
        }
        delete this._metasets[datasetIndex];
    }
    _stop() {
        let i, ilen;
        this.stop();
        animator.remove(this);
        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
            this._destroyDatasetMeta(i);
        }
    }
    destroy() {
        this.notifyPlugins('beforeDestroy');
        const { canvas , ctx  } = this;
        this._stop();
        this.config.clearCache();
        if (canvas) {
            this.unbindEvents();
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.af)(canvas, ctx);
            this.platform.releaseContext(ctx);
            this.canvas = null;
            this.ctx = null;
        }
        delete instances[this.id];
        this.notifyPlugins('afterDestroy');
    }
    toBase64Image(...args) {
        return this.canvas.toDataURL(...args);
    }
 bindEvents() {
        this.bindUserEvents();
        if (this.options.responsive) {
            this.bindResponsiveEvents();
        } else {
            this.attached = true;
        }
    }
 bindUserEvents() {
        const listeners = this._listeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const listener = (e, x, y)=>{
            e.offsetX = x;
            e.offsetY = y;
            this._eventHandler(e);
        };
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(this.options.events, (type)=>_add(type, listener));
    }
 bindResponsiveEvents() {
        if (!this._responsiveListeners) {
            this._responsiveListeners = {};
        }
        const listeners = this._responsiveListeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const _remove = (type, listener)=>{
            if (listeners[type]) {
                platform.removeEventListener(this, type, listener);
                delete listeners[type];
            }
        };
        const listener = (width, height)=>{
            if (this.canvas) {
                this.resize(width, height);
            }
        };
        let detached;
        const attached = ()=>{
            _remove('attach', attached);
            this.attached = true;
            this.resize();
            _add('resize', listener);
            _add('detach', detached);
        };
        detached = ()=>{
            this.attached = false;
            _remove('resize', listener);
            this._stop();
            this._resize(0, 0);
            _add('attach', attached);
        };
        if (platform.isAttached(this.canvas)) {
            attached();
        } else {
            detached();
        }
    }
 unbindEvents() {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(this._listeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._listeners = {};
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(this._responsiveListeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._responsiveListeners = undefined;
    }
    updateHoverStyle(items, mode, enabled) {
        const prefix = enabled ? 'set' : 'remove';
        let meta, item, i, ilen;
        if (mode === 'dataset') {
            meta = this.getDatasetMeta(items[0].datasetIndex);
            meta.controller['_' + prefix + 'DatasetHoverStyle']();
        }
        for(i = 0, ilen = items.length; i < ilen; ++i){
            item = items[i];
            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
            if (controller) {
                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
            }
        }
    }
 getActiveElements() {
        return this._active || [];
    }
 setActiveElements(activeElements) {
        const lastActive = this._active || [];
        const active = activeElements.map(({ datasetIndex , index  })=>{
            const meta = this.getDatasetMeta(datasetIndex);
            if (!meta) {
                throw new Error('No dataset found at index ' + datasetIndex);
            }
            return {
                datasetIndex,
                element: meta.data[index],
                index
            };
        });
        const changed = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ah)(active, lastActive);
        if (changed) {
            this._active = active;
            this._lastEvent = null;
            this._updateHoverStyles(active, lastActive);
        }
    }
 notifyPlugins(hook, args, filter) {
        return this._plugins.notify(this, hook, args, filter);
    }
 isPluginEnabled(pluginId) {
        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;
    }
 _updateHoverStyles(active, lastActive, replay) {
        const hoverOptions = this.options.hover;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));
        const deactivated = diff(lastActive, active);
        const activated = replay ? active : diff(active, lastActive);
        if (deactivated.length) {
            this.updateHoverStyle(deactivated, hoverOptions.mode, false);
        }
        if (activated.length && hoverOptions.mode) {
            this.updateHoverStyle(activated, hoverOptions.mode, true);
        }
    }
 _eventHandler(e, replay) {
        const args = {
            event: e,
            replay,
            cancelable: true,
            inChartArea: this.isPointInArea(e)
        };
        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);
        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {
            return;
        }
        const changed = this._handleEvent(e, replay, args.inChartArea);
        args.cancelable = false;
        this.notifyPlugins('afterEvent', args, eventFilter);
        if (changed || args.changed) {
            this.render();
        }
        return this;
    }
 _handleEvent(e, replay, inChartArea) {
        const { _active: lastActive = [] , options  } = this;
        const useFinalPosition = replay;
        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
        const isClick = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ai)(e);
        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
        if (inChartArea) {
            this._lastEvent = null;
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(options.onHover, [
                e,
                active,
                this
            ], this);
            if (isClick) {
                (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(options.onClick, [
                    e,
                    active,
                    this
                ], this);
            }
        }
        const changed = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ah)(active, lastActive);
        if (changed || replay) {
            this._active = active;
            this._updateHoverStyles(active, lastActive, replay);
        }
        this._lastEvent = lastEvent;
        return changed;
    }
 _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
        if (e.type === 'mouseout') {
            return [];
        }
        if (!inChartArea) {
            return lastActive;
        }
        const hoverOptions = this.options.hover;
        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
    }
}
function invalidatePlugins() {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(Chart.instances, (chart)=>chart._plugins.invalidate());
}

function clipArc(ctx, element, endAngle) {
    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;
    let angleMargin = pixelMargin / outerRadius;
    // Draw an inner border by clipping the arc and drawing a double-width border
    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
    ctx.beginPath();
    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
    if (innerRadius > pixelMargin) {
        angleMargin = pixelMargin / innerRadius;
        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
    } else {
        ctx.arc(x, y, pixelMargin, endAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H, startAngle - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H);
    }
    ctx.closePath();
    ctx.clip();
}
function toRadiusCorners(value) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ak)(value, [
        'outerStart',
        'outerEnd',
        'innerStart',
        'innerEnd'
    ]);
}
/**
 * Parse border radius from the provided options
 */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
    const o = toRadiusCorners(arc.options.borderRadius);
    const halfThickness = (outerRadius - innerRadius) / 2;
    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
    // Outer limits are complicated. We want to compute the available angular distance at
    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.
    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.
    //
    // If the borderRadius is large, that value can become negative.
    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius
    // we know that the thickness term will dominate and compute the limits at that point
    const computeOuterLimit = (val)=>{
        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(val, 0, Math.min(halfThickness, outerArcLimit));
    };
    return {
        outerStart: computeOuterLimit(o.outerStart),
        outerEnd: computeOuterLimit(o.outerEnd),
        innerStart: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(o.innerStart, 0, innerLimit),
        innerEnd: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(o.innerEnd, 0, innerLimit)
    };
}
/**
 * Convert (r, 𝜃) to (x, y)
 */ function rThetaToXY(r, theta, x, y) {
    return {
        x: x + r * Math.cos(theta),
        y: y + r * Math.sin(theta)
    };
}
/**
 * Path the arc, respecting border radius by separating into left and right halves.
 *
 *   Start      End
 *
 *    1--->a--->2    Outer
 *   /           \
 *   8           3
 *   |           |
 *   |           |
 *   7           4
 *   \           /
 *    6<---b<---5    Inner
 */ function pathArc(ctx, element, offset, spacing, end, circular) {
    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;
    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
    let spacingOffset = 0;
    const alpha = end - start;
    if (spacing) {
        // When spacing is present, it is the same for all items
        // So we adjust the start and end angle of the arc such that
        // the distance is the same as it would be without the spacing
        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
        spacingOffset = (alpha - adjustedAngle) / 2;
    }
    const beta = Math.max(0.001, alpha * outerRadius - offset / _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P) / outerRadius;
    const angleOffset = (alpha - beta) / 2;
    const startAngle = start + angleOffset + spacingOffset;
    const endAngle = end - angleOffset - spacingOffset;
    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
    const outerStartAdjustedRadius = outerRadius - outerStart;
    const outerEndAdjustedRadius = outerRadius - outerEnd;
    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
    const innerStartAdjustedRadius = innerRadius + innerStart;
    const innerEndAdjustedRadius = innerRadius + innerEnd;
    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
    ctx.beginPath();
    if (circular) {
        // The first arc segments from point 1 to point a to point 2
        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
        // The corner segment from point 2 to point 3
        if (outerEnd > 0) {
            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H);
        }
        // The line from point 3 to point 4
        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
        ctx.lineTo(p4.x, p4.y);
        // The corner segment from point 4 to point 5
        if (innerEnd > 0) {
            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H, innerEndAdjustedAngle + Math.PI);
        }
        // The inner arc from point 5 to point b to point 6
        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
        // The corner segment from point 6 to point 7
        if (innerStart > 0) {
            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H);
        }
        // The line from point 7 to point 8
        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
        ctx.lineTo(p8.x, p8.y);
        // The corner segment from point 8 to point 1
        if (outerStart > 0) {
            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H, outerStartAdjustedAngle);
        }
    } else {
        ctx.moveTo(x, y);
        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;
        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;
        ctx.lineTo(outerStartX, outerStartY);
        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;
        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;
        ctx.lineTo(outerEndX, outerEndY);
    }
    ctx.closePath();
}
function drawArc(ctx, element, offset, spacing, circular) {
    const { fullCircles , startAngle , circumference  } = element;
    let endAngle = element.endAngle;
    if (fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        for(let i = 0; i < fullCircles; ++i){
            ctx.fill();
        }
        if (!isNaN(circumference)) {
            endAngle = startAngle + (circumference % _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T || _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T);
        }
    }
    pathArc(ctx, element, offset, spacing, endAngle, circular);
    ctx.fill();
    return endAngle;
}
function drawBorder(ctx, element, offset, spacing, circular) {
    const { fullCircles , startAngle , circumference , options  } = element;
    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;
    const inner = options.borderAlign === 'inner';
    if (!borderWidth) {
        return;
    }
    ctx.setLineDash(borderDash || []);
    ctx.lineDashOffset = borderDashOffset;
    if (inner) {
        ctx.lineWidth = borderWidth * 2;
        ctx.lineJoin = borderJoinStyle || 'round';
    } else {
        ctx.lineWidth = borderWidth;
        ctx.lineJoin = borderJoinStyle || 'bevel';
    }
    let endAngle = element.endAngle;
    if (fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        for(let i = 0; i < fullCircles; ++i){
            ctx.stroke();
        }
        if (!isNaN(circumference)) {
            endAngle = startAngle + (circumference % _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T || _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T);
        }
    }
    if (inner) {
        clipArc(ctx, element, endAngle);
    }
    if (!fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        ctx.stroke();
    }
}
class ArcElement extends Element {
    static id = 'arc';
    static defaults = {
        borderAlign: 'center',
        borderColor: '#fff',
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: undefined,
        borderRadius: 0,
        borderWidth: 2,
        offset: 0,
        spacing: 0,
        angle: undefined,
        circular: true
    };
    static defaultRoutes = {
        backgroundColor: 'backgroundColor'
    };
    static descriptors = {
        _scriptable: true,
        _indexable: (name)=>name !== 'borderDash'
    };
    circumference;
    endAngle;
    fullCircles;
    innerRadius;
    outerRadius;
    pixelMargin;
    startAngle;
    constructor(cfg){
        super();
        this.options = undefined;
        this.circumference = undefined;
        this.startAngle = undefined;
        this.endAngle = undefined;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.pixelMargin = 0;
        this.fullCircles = 0;
        if (cfg) {
            Object.assign(this, cfg);
        }
    }
    inRange(chartX, chartY, useFinalPosition) {
        const point = this.getProps([
            'x',
            'y'
        ], useFinalPosition);
        const { angle , distance  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.D)(point, {
            x: chartX,
            y: chartY
        });
        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([
            'startAngle',
            'endAngle',
            'innerRadius',
            'outerRadius',
            'circumference'
        ], useFinalPosition);
        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
        const _circumference = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(circumference, endAngle - startAngle);
        const betweenAngles = _circumference >= _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle);
        const withinRadius = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aj)(distance, innerRadius + rAdjust, outerRadius + rAdjust);
        return betweenAngles && withinRadius;
    }
    getCenterPoint(useFinalPosition) {
        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([
            'x',
            'y',
            'startAngle',
            'endAngle',
            'innerRadius',
            'outerRadius'
        ], useFinalPosition);
        const { offset , spacing  } = this.options;
        const halfAngle = (startAngle + endAngle) / 2;
        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
        return {
            x: x + Math.cos(halfAngle) * halfRadius,
            y: y + Math.sin(halfAngle) * halfRadius
        };
    }
    tooltipPosition(useFinalPosition) {
        return this.getCenterPoint(useFinalPosition);
    }
    draw(ctx) {
        const { options , circumference  } = this;
        const offset = (options.offset || 0) / 4;
        const spacing = (options.spacing || 0) / 2;
        const circular = options.circular;
        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;
        this.fullCircles = circumference > _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T ? Math.floor(circumference / _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T) : 0;
        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
            return;
        }
        ctx.save();
        const halfAngle = (this.startAngle + this.endAngle) / 2;
        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
        const fix = 1 - Math.sin(Math.min(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P, circumference || 0));
        const radiusOffset = offset * fix;
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        drawArc(ctx, this, radiusOffset, spacing, circular);
        drawBorder(ctx, this, radiusOffset, spacing, circular);
        ctx.restore();
    }
}

function setStyle(ctx, options, style = options) {
    ctx.lineCap = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderCapStyle, options.borderCapStyle);
    ctx.setLineDash((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderDash, options.borderDash));
    ctx.lineDashOffset = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderDashOffset, options.borderDashOffset);
    ctx.lineJoin = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderJoinStyle, options.borderJoinStyle);
    ctx.lineWidth = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderWidth, options.borderWidth);
    ctx.strokeStyle = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
    ctx.lineTo(target.x, target.y);
}
 function getLineMethod(options) {
    if (options.stepped) {
        return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ar;
    }
    if (options.tension || options.cubicInterpolationMode === 'monotone') {
        return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.as;
    }
    return lineTo;
}
function pathVars(points, segment, params = {}) {
    const count = points.length;
    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;
    const { start: segmentStart , end: segmentEnd  } = segment;
    const start = Math.max(paramsStart, segmentStart);
    const end = Math.min(paramsEnd, segmentEnd);
    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
    return {
        count,
        start,
        loop: segment.loop,
        ilen: end < start && !outside ? count + end - start : end - start
    };
}
 function pathSegment(ctx, line, segment, params) {
    const { points , options  } = line;
    const { count , start , loop , ilen  } = pathVars(points, segment, params);
    const lineMethod = getLineMethod(options);
    let { move =true , reverse  } = params || {};
    let i, point, prev;
    for(i = 0; i <= ilen; ++i){
        point = points[(start + (reverse ? ilen - i : i)) % count];
        if (point.skip) {
            continue;
        } else if (move) {
            ctx.moveTo(point.x, point.y);
            move = false;
        } else {
            lineMethod(ctx, prev, point, reverse, options.stepped);
        }
        prev = point;
    }
    if (loop) {
        point = points[(start + (reverse ? ilen : 0)) % count];
        lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    return !!loop;
}
 function fastPathSegment(ctx, line, segment, params) {
    const points = line.points;
    const { count , start , ilen  } = pathVars(points, segment, params);
    const { move =true , reverse  } = params || {};
    let avgX = 0;
    let countX = 0;
    let i, point, prevX, minY, maxY, lastY;
    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;
    const drawX = ()=>{
        if (minY !== maxY) {
            ctx.lineTo(avgX, maxY);
            ctx.lineTo(avgX, minY);
            ctx.lineTo(avgX, lastY);
        }
    };
    if (move) {
        point = points[pointIndex(0)];
        ctx.moveTo(point.x, point.y);
    }
    for(i = 0; i <= ilen; ++i){
        point = points[pointIndex(i)];
        if (point.skip) {
            continue;
        }
        const x = point.x;
        const y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) {
                minY = y;
            } else if (y > maxY) {
                maxY = y;
            }
            avgX = (countX * avgX + x) / ++countX;
        } else {
            drawX();
            ctx.lineTo(x, y);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
        }
        lastY = y;
    }
    drawX();
}
 function _getSegmentMethod(line) {
    const opts = line.options;
    const borderDash = opts.borderDash && opts.borderDash.length;
    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;
    return useFastPath ? fastPathSegment : pathSegment;
}
 function _getInterpolationMethod(options) {
    if (options.stepped) {
        return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ao;
    }
    if (options.tension || options.cubicInterpolationMode === 'monotone') {
        return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ap;
    }
    return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aq;
}
function strokePathWithCache(ctx, line, start, count) {
    let path = line._path;
    if (!path) {
        path = line._path = new Path2D();
        if (line.path(path, start, count)) {
            path.closePath();
        }
    }
    setStyle(ctx, line.options);
    ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
    const { segments , options  } = line;
    const segmentMethod = _getSegmentMethod(line);
    for (const segment of segments){
        setStyle(ctx, options, segment.style);
        ctx.beginPath();
        if (segmentMethod(ctx, line, segment, {
            start,
            end: start + count - 1
        })) {
            ctx.closePath();
        }
        ctx.stroke();
    }
}
const usePath2D = typeof Path2D === 'function';
function draw(ctx, line, start, count) {
    if (usePath2D && !line.options.segment) {
        strokePathWithCache(ctx, line, start, count);
    } else {
        strokePathDirect(ctx, line, start, count);
    }
}
class LineElement extends Element {
    static id = 'line';
 static defaults = {
        borderCapStyle: 'butt',
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: 'miter',
        borderWidth: 3,
        capBezierPoints: true,
        cubicInterpolationMode: 'default',
        fill: false,
        spanGaps: false,
        stepped: false,
        tension: 0
    };
 static defaultRoutes = {
        backgroundColor: 'backgroundColor',
        borderColor: 'borderColor'
    };
    static descriptors = {
        _scriptable: true,
        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'
    };
    constructor(cfg){
        super();
        this.animated = true;
        this.options = undefined;
        this._chart = undefined;
        this._loop = undefined;
        this._fullLoop = undefined;
        this._path = undefined;
        this._points = undefined;
        this._segments = undefined;
        this._decimated = false;
        this._pointsUpdated = false;
        this._datasetIndex = undefined;
        if (cfg) {
            Object.assign(this, cfg);
        }
    }
    updateControlPoints(chartArea, indexAxis) {
        const options = this.options;
        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {
            const loop = options.spanGaps ? this._loop : this._fullLoop;
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.al)(this._points, options, chartArea, loop, indexAxis);
            this._pointsUpdated = true;
        }
    }
    set points(points) {
        this._points = points;
        delete this._segments;
        delete this._path;
        this._pointsUpdated = false;
    }
    get points() {
        return this._points;
    }
    get segments() {
        return this._segments || (this._segments = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.am)(this, this.options.segment));
    }
 first() {
        const segments = this.segments;
        const points = this.points;
        return segments.length && points[segments[0].start];
    }
 last() {
        const segments = this.segments;
        const points = this.points;
        const count = segments.length;
        return count && points[segments[count - 1].end];
    }
 interpolate(point, property) {
        const options = this.options;
        const value = point[property];
        const points = this.points;
        const segments = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.an)(this, {
            property,
            start: value,
            end: value
        });
        if (!segments.length) {
            return;
        }
        const result = [];
        const _interpolate = _getInterpolationMethod(options);
        let i, ilen;
        for(i = 0, ilen = segments.length; i < ilen; ++i){
            const { start , end  } = segments[i];
            const p1 = points[start];
            const p2 = points[end];
            if (p1 === p2) {
                result.push(p1);
                continue;
            }
            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
            const interpolated = _interpolate(p1, p2, t, options.stepped);
            interpolated[property] = point[property];
            result.push(interpolated);
        }
        return result.length === 1 ? result[0] : result;
    }
 pathSegment(ctx, segment, params) {
        const segmentMethod = _getSegmentMethod(this);
        return segmentMethod(ctx, this, segment, params);
    }
 path(ctx, start, count) {
        const segments = this.segments;
        const segmentMethod = _getSegmentMethod(this);
        let loop = this._loop;
        start = start || 0;
        count = count || this.points.length - start;
        for (const segment of segments){
            loop &= segmentMethod(ctx, this, segment, {
                start,
                end: start + count - 1
            });
        }
        return !!loop;
    }
 draw(ctx, chartArea, start, count) {
        const options = this.options || {};
        const points = this.points || [];
        if (points.length && options.borderWidth) {
            ctx.save();
            draw(ctx, this, start, count);
            ctx.restore();
        }
        if (this.animated) {
            this._pointsUpdated = false;
            this._path = undefined;
        }
    }
}

function inRange$1(el, pos, axis, useFinalPosition) {
    const options = el.options;
    const { [axis]: value  } = el.getProps([
        axis
    ], useFinalPosition);
    return Math.abs(pos - value) < options.radius + options.hitRadius;
}
class PointElement extends Element {
    static id = 'point';
    parsed;
    skip;
    stop;
    /**
   * @type {any}
   */ static defaults = {
        borderWidth: 1,
        hitRadius: 1,
        hoverBorderWidth: 1,
        hoverRadius: 4,
        pointStyle: 'circle',
        radius: 3,
        rotation: 0
    };
    /**
   * @type {any}
   */ static defaultRoutes = {
        backgroundColor: 'backgroundColor',
        borderColor: 'borderColor'
    };
    constructor(cfg){
        super();
        this.options = undefined;
        this.parsed = undefined;
        this.skip = undefined;
        this.stop = undefined;
        if (cfg) {
            Object.assign(this, cfg);
        }
    }
    inRange(mouseX, mouseY, useFinalPosition) {
        const options = this.options;
        const { x , y  } = this.getProps([
            'x',
            'y'
        ], useFinalPosition);
        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
    }
    inXRange(mouseX, useFinalPosition) {
        return inRange$1(this, mouseX, 'x', useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return inRange$1(this, mouseY, 'y', useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x , y  } = this.getProps([
            'x',
            'y'
        ], useFinalPosition);
        return {
            x,
            y
        };
    }
    size(options) {
        options = options || this.options || {};
        let radius = options.radius || 0;
        radius = Math.max(radius, radius && options.hoverRadius || 0);
        const borderWidth = radius && options.borderWidth || 0;
        return (radius + borderWidth) * 2;
    }
    draw(ctx, area) {
        const options = this.options;
        if (this.skip || options.radius < 0.1 || !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.C)(this, area, this.size(options) / 2)) {
            return;
        }
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.fillStyle = options.backgroundColor;
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.at)(ctx, options, this.x, this.y);
    }
    getRange() {
        const options = this.options || {};
        // @ts-expect-error Fallbacks should never be hit in practice
        return options.radius + options.hitRadius;
    }
}

function getBarBounds(bar, useFinalPosition) {
    const { x , y , base , width , height  } =  bar.getProps([
        'x',
        'y',
        'base',
        'width',
        'height'
    ], useFinalPosition);
    let left, right, top, bottom, half;
    if (bar.horizontal) {
        half = height / 2;
        left = Math.min(x, base);
        right = Math.max(x, base);
        top = y - half;
        bottom = y + half;
    } else {
        half = width / 2;
        left = x - half;
        right = x + half;
        top = Math.min(y, base);
        bottom = Math.max(y, base);
    }
    return {
        left,
        top,
        right,
        bottom
    };
}
function skipOrLimit(skip, value, min, max) {
    return skip ? 0 : (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
    const value = bar.options.borderWidth;
    const skip = bar.borderSkipped;
    const o = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.av)(value);
    return {
        t: skipOrLimit(skip.top, o.top, 0, maxH),
        r: skipOrLimit(skip.right, o.right, 0, maxW),
        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
        l: skipOrLimit(skip.left, o.left, 0, maxW)
    };
}
function parseBorderRadius(bar, maxW, maxH) {
    const { enableBorderRadius  } = bar.getProps([
        'enableBorderRadius'
    ]);
    const value = bar.options.borderRadius;
    const o = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aw)(value);
    const maxR = Math.min(maxW, maxH);
    const skip = bar.borderSkipped;
    const enableBorder = enableBorderRadius || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(value);
    return {
        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
    };
}
function boundingRects(bar) {
    const bounds = getBarBounds(bar);
    const width = bounds.right - bounds.left;
    const height = bounds.bottom - bounds.top;
    const border = parseBorderWidth(bar, width / 2, height / 2);
    const radius = parseBorderRadius(bar, width / 2, height / 2);
    return {
        outer: {
            x: bounds.left,
            y: bounds.top,
            w: width,
            h: height,
            radius
        },
        inner: {
            x: bounds.left + border.l,
            y: bounds.top + border.t,
            w: width - border.l - border.r,
            h: height - border.t - border.b,
            radius: {
                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
            }
        }
    };
}
function inRange(bar, x, y, useFinalPosition) {
    const skipX = x === null;
    const skipY = y === null;
    const skipBoth = skipX && skipY;
    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
    return bounds && (skipX || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aj)(x, bounds.left, bounds.right)) && (skipY || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aj)(y, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
 function addNormalRectPath(ctx, rect) {
    ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
    const x = rect.x !== refRect.x ? -amount : 0;
    const y = rect.y !== refRect.y ? -amount : 0;
    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
    return {
        x: rect.x + x,
        y: rect.y + y,
        w: rect.w + w,
        h: rect.h + h,
        radius: rect.radius
    };
}
class BarElement extends Element {
    static id = 'bar';
 static defaults = {
        borderSkipped: 'start',
        borderWidth: 0,
        borderRadius: 0,
        inflateAmount: 'auto',
        pointStyle: undefined
    };
 static defaultRoutes = {
        backgroundColor: 'backgroundColor',
        borderColor: 'borderColor'
    };
    constructor(cfg){
        super();
        this.options = undefined;
        this.horizontal = undefined;
        this.base = undefined;
        this.width = undefined;
        this.height = undefined;
        this.inflateAmount = undefined;
        if (cfg) {
            Object.assign(this, cfg);
        }
    }
    draw(ctx) {
        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;
        const { inner , outer  } = boundingRects(this);
        const addRectPath = hasRadius(outer.radius) ? _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au : addNormalRectPath;
        ctx.save();
        if (outer.w !== inner.w || outer.h !== inner.h) {
            ctx.beginPath();
            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
            ctx.clip();
            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
            ctx.fillStyle = borderColor;
            ctx.fill('evenodd');
        }
        ctx.beginPath();
        addRectPath(ctx, inflateRect(inner, inflateAmount));
        ctx.fillStyle = backgroundColor;
        ctx.fill();
        ctx.restore();
    }
    inRange(mouseX, mouseY, useFinalPosition) {
        return inRange(this, mouseX, mouseY, useFinalPosition);
    }
    inXRange(mouseX, useFinalPosition) {
        return inRange(this, mouseX, null, useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return inRange(this, null, mouseY, useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x , y , base , horizontal  } =  this.getProps([
            'x',
            'y',
            'base',
            'horizontal'
        ], useFinalPosition);
        return {
            x: horizontal ? (x + base) / 2 : x,
            y: horizontal ? y : (y + base) / 2
        };
    }
    getRange(axis) {
        return axis === 'x' ? this.width / 2 : this.height / 2;
    }
}

var elements = /*#__PURE__*/Object.freeze({
__proto__: null,
ArcElement: ArcElement,
BarElement: BarElement,
LineElement: LineElement,
PointElement: PointElement
});

const BORDER_COLORS = [
    'rgb(54, 162, 235)',
    'rgb(255, 99, 132)',
    'rgb(255, 159, 64)',
    'rgb(255, 205, 86)',
    'rgb(75, 192, 192)',
    'rgb(153, 102, 255)',
    'rgb(201, 203, 207)' // grey
];
// Border colors with 50% transparency
const BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));
function getBorderColor(i) {
    return BORDER_COLORS[i % BORDER_COLORS.length];
}
function getBackgroundColor(i) {
    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];
}
function colorizeDefaultDataset(dataset, i) {
    dataset.borderColor = getBorderColor(i);
    dataset.backgroundColor = getBackgroundColor(i);
    return ++i;
}
function colorizeDoughnutDataset(dataset, i) {
    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));
    return i;
}
function colorizePolarAreaDataset(dataset, i) {
    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));
    return i;
}
function getColorizer(chart) {
    let i = 0;
    return (dataset, datasetIndex)=>{
        const controller = chart.getDatasetMeta(datasetIndex).controller;
        if (controller instanceof DoughnutController) {
            i = colorizeDoughnutDataset(dataset, i);
        } else if (controller instanceof PolarAreaController) {
            i = colorizePolarAreaDataset(dataset, i);
        } else if (controller) {
            i = colorizeDefaultDataset(dataset, i);
        }
    };
}
function containsColorsDefinitions(descriptors) {
    let k;
    for(k in descriptors){
        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {
            return true;
        }
    }
    return false;
}
function containsColorsDefinition(descriptor) {
    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);
}
var plugin_colors = {
    id: 'colors',
    defaults: {
        enabled: true,
        forceOverride: false
    },
    beforeLayout (chart, _args, options) {
        if (!options.enabled) {
            return;
        }
        const { data: { datasets  } , options: chartOptions  } = chart.config;
        const { elements  } = chartOptions;
        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {
            return;
        }
        const colorizer = getColorizer(chart);
        datasets.forEach(colorizer);
    }
};

function lttbDecimation(data, start, count, availableWidth, options) {
 const samples = options.samples || availableWidth;
    if (samples >= count) {
        return data.slice(start, start + count);
    }
    const decimated = [];
    const bucketWidth = (count - 2) / (samples - 2);
    let sampledIndex = 0;
    const endIndex = start + count - 1;
    let a = start;
    let i, maxAreaPoint, maxArea, area, nextA;
    decimated[sampledIndex++] = data[a];
    for(i = 0; i < samples - 2; i++){
        let avgX = 0;
        let avgY = 0;
        let j;
        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
        const avgRangeLength = avgRangeEnd - avgRangeStart;
        for(j = avgRangeStart; j < avgRangeEnd; j++){
            avgX += data[j].x;
            avgY += data[j].y;
        }
        avgX /= avgRangeLength;
        avgY /= avgRangeLength;
        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
        const { x: pointAx , y: pointAy  } = data[a];
        maxArea = area = -1;
        for(j = rangeOffs; j < rangeTo; j++){
            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
            if (area > maxArea) {
                maxArea = area;
                maxAreaPoint = data[j];
                nextA = j;
            }
        }
        decimated[sampledIndex++] = maxAreaPoint;
        a = nextA;
    }
    decimated[sampledIndex++] = data[endIndex];
    return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
    let avgX = 0;
    let countX = 0;
    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
    const decimated = [];
    const endIndex = start + count - 1;
    const xMin = data[start].x;
    const xMax = data[endIndex].x;
    const dx = xMax - xMin;
    for(i = start; i < start + count; ++i){
        point = data[i];
        x = (point.x - xMin) / dx * availableWidth;
        y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) {
                minY = y;
                minIndex = i;
            } else if (y > maxY) {
                maxY = y;
                maxIndex = i;
            }
            avgX = (countX * avgX + point.x) / ++countX;
        } else {
            const lastIndex = i - 1;
            if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(minIndex) && !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(maxIndex)) {
                const intermediateIndex1 = Math.min(minIndex, maxIndex);
                const intermediateIndex2 = Math.max(minIndex, maxIndex);
                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
                    decimated.push({
                        ...data[intermediateIndex1],
                        x: avgX
                    });
                }
                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
                    decimated.push({
                        ...data[intermediateIndex2],
                        x: avgX
                    });
                }
            }
            if (i > 0 && lastIndex !== startIndex) {
                decimated.push(data[lastIndex]);
            }
            decimated.push(point);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
            minIndex = maxIndex = startIndex = i;
        }
    }
    return decimated;
}
function cleanDecimatedDataset(dataset) {
    if (dataset._decimated) {
        const data = dataset._data;
        delete dataset._decimated;
        delete dataset._data;
        Object.defineProperty(dataset, 'data', {
            configurable: true,
            enumerable: true,
            writable: true,
            value: data
        });
    }
}
function cleanDecimatedData(chart) {
    chart.data.datasets.forEach((dataset)=>{
        cleanDecimatedDataset(dataset);
    });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
    const pointCount = points.length;
    let start = 0;
    let count;
    const { iScale  } = meta;
    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();
    if (minDefined) {
        start = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(points, iScale.axis, min).lo, 0, pointCount - 1);
    }
    if (maxDefined) {
        count = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(points, iScale.axis, max).hi + 1, start, pointCount) - start;
    } else {
        count = pointCount - start;
    }
    return {
        start,
        count
    };
}
var plugin_decimation = {
    id: 'decimation',
    defaults: {
        algorithm: 'min-max',
        enabled: false
    },
    beforeElementsUpdate: (chart, args, options)=>{
        if (!options.enabled) {
            cleanDecimatedData(chart);
            return;
        }
        const availableWidth = chart.width;
        chart.data.datasets.forEach((dataset, datasetIndex)=>{
            const { _data , indexAxis  } = dataset;
            const meta = chart.getDatasetMeta(datasetIndex);
            const data = _data || dataset.data;
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a)([
                indexAxis,
                chart.options.indexAxis
            ]) === 'y') {
                return;
            }
            if (!meta.controller.supportsDecimation) {
                return;
            }
            const xAxis = chart.scales[meta.xAxisID];
            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {
                return;
            }
            if (chart.options.parsing) {
                return;
            }
            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);
            const threshold = options.threshold || 4 * availableWidth;
            if (count <= threshold) {
                cleanDecimatedDataset(dataset);
                return;
            }
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(_data)) {
                dataset._data = data;
                delete dataset.data;
                Object.defineProperty(dataset, 'data', {
                    configurable: true,
                    enumerable: true,
                    get: function() {
                        return this._decimated;
                    },
                    set: function(d) {
                        this._data = d;
                    }
                });
            }
            let decimated;
            switch(options.algorithm){
                case 'lttb':
                    decimated = lttbDecimation(data, start, count, availableWidth, options);
                    break;
                case 'min-max':
                    decimated = minMaxDecimation(data, start, count, availableWidth);
                    break;
                default:
                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
            }
            dataset._decimated = decimated;
        });
    },
    destroy (chart) {
        cleanDecimatedData(chart);
    }
};

function _segments(line, target, property) {
    const segments = line.segments;
    const points = line.points;
    const tpoints = target.points;
    const parts = [];
    for (const segment of segments){
        let { start , end  } = segment;
        end = _findSegmentEnd(start, end, points);
        const bounds = _getBounds(property, points[start], points[end], segment.loop);
        if (!target.segments) {
            parts.push({
                source: segment,
                target: bounds,
                start: points[start],
                end: points[end]
            });
            continue;
        }
        const targetSegments = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.an)(target, bounds);
        for (const tgt of targetSegments){
            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
            const fillSources = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ax)(segment, points, subBounds);
            for (const fillSource of fillSources){
                parts.push({
                    source: fillSource,
                    target: tgt,
                    start: {
                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)
                    },
                    end: {
                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)
                    }
                });
            }
        }
    }
    return parts;
}
function _getBounds(property, first, last, loop) {
    if (loop) {
        return;
    }
    let start = first[property];
    let end = last[property];
    if (property === 'angle') {
        start = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay)(start);
        end = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay)(end);
    }
    return {
        property,
        start,
        end
    };
}
function _pointsFromSegments(boundary, line) {
    const { x =null , y =null  } = boundary || {};
    const linePoints = line.points;
    const points = [];
    line.segments.forEach(({ start , end  })=>{
        end = _findSegmentEnd(start, end, linePoints);
        const first = linePoints[start];
        const last = linePoints[end];
        if (y !== null) {
            points.push({
                x: first.x,
                y
            });
            points.push({
                x: last.x,
                y
            });
        } else if (x !== null) {
            points.push({
                x,
                y: first.y
            });
            points.push({
                x,
                y: last.y
            });
        }
    });
    return points;
}
function _findSegmentEnd(start, end, points) {
    for(; end > start; end--){
        const point = points[end];
        if (!isNaN(point.x) && !isNaN(point.y)) {
            break;
        }
    }
    return end;
}
function _getEdge(a, b, prop, fn) {
    if (a && b) {
        return fn(a[prop], b[prop]);
    }
    return a ? a[prop] : b ? b[prop] : 0;
}

function _createBoundaryLine(boundary, line) {
    let points = [];
    let _loop = false;
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(boundary)) {
        _loop = true;
        points = boundary;
    } else {
        points = _pointsFromSegments(boundary, line);
    }
    return points.length ? new LineElement({
        points,
        options: {
            tension: 0
        },
        _loop,
        _fullLoop: _loop
    }) : null;
}
function _shouldApplyFill(source) {
    return source && source.fill !== false;
}

function _resolveTarget(sources, index, propagate) {
    const source = sources[index];
    let fill = source.fill;
    const visited = [
        index
    ];
    let target;
    if (!propagate) {
        return fill;
    }
    while(fill !== false && visited.indexOf(fill) === -1){
        if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(fill)) {
            return fill;
        }
        target = sources[fill];
        if (!target) {
            return false;
        }
        if (target.visible) {
            return fill;
        }
        visited.push(fill);
        fill = target.fill;
    }
    return false;
}
 function _decodeFill(line, index, count) {
     const fill = parseFillOption(line);
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {
        return isNaN(fill.value) ? false : fill;
    }
    let target = parseFloat(fill);
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(target) && Math.floor(target) === target) {
        return decodeTargetIndex(fill[0], index, target, count);
    }
    return [
        'origin',
        'start',
        'end',
        'stack',
        'shape'
    ].indexOf(fill) >= 0 && fill;
}
function decodeTargetIndex(firstCh, index, target, count) {
    if (firstCh === '-' || firstCh === '+') {
        target = index + target;
    }
    if (target === index || target < 0 || target >= count) {
        return false;
    }
    return target;
}
 function _getTargetPixel(fill, scale) {
    let pixel = null;
    if (fill === 'start') {
        pixel = scale.bottom;
    } else if (fill === 'end') {
        pixel = scale.top;
    } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {
        pixel = scale.getPixelForValue(fill.value);
    } else if (scale.getBasePixel) {
        pixel = scale.getBasePixel();
    }
    return pixel;
}
 function _getTargetValue(fill, scale, startValue) {
    let value;
    if (fill === 'start') {
        value = startValue;
    } else if (fill === 'end') {
        value = scale.options.reverse ? scale.min : scale.max;
    } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {
        value = fill.value;
    } else {
        value = scale.getBaseValue();
    }
    return value;
}
 function parseFillOption(line) {
    const options = line.options;
    const fillOption = options.fill;
    let fill = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(fillOption && fillOption.target, fillOption);
    if (fill === undefined) {
        fill = !!options.backgroundColor;
    }
    if (fill === false || fill === null) {
        return false;
    }
    if (fill === true) {
        return 'origin';
    }
    return fill;
}

function _buildStackLine(source) {
    const { scale , index , line  } = source;
    const points = [];
    const segments = line.segments;
    const sourcePoints = line.points;
    const linesBelow = getLinesBelow(scale, index);
    linesBelow.push(_createBoundaryLine({
        x: null,
        y: scale.bottom
    }, line));
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        for(let j = segment.start; j <= segment.end; j++){
            addPointsBelow(points, sourcePoints[j], linesBelow);
        }
    }
    return new LineElement({
        points,
        options: {}
    });
}
 function getLinesBelow(scale, index) {
    const below = [];
    const metas = scale.getMatchingVisibleMetas('line');
    for(let i = 0; i < metas.length; i++){
        const meta = metas[i];
        if (meta.index === index) {
            break;
        }
        if (!meta.hidden) {
            below.unshift(meta.dataset);
        }
    }
    return below;
}
 function addPointsBelow(points, sourcePoint, linesBelow) {
    const postponed = [];
    for(let j = 0; j < linesBelow.length; j++){
        const line = linesBelow[j];
        const { first , last , point  } = findPoint(line, sourcePoint, 'x');
        if (!point || first && last) {
            continue;
        }
        if (first) {
            postponed.unshift(point);
        } else {
            points.push(point);
            if (!last) {
                break;
            }
        }
    }
    points.push(...postponed);
}
 function findPoint(line, sourcePoint, property) {
    const point = line.interpolate(sourcePoint, property);
    if (!point) {
        return {};
    }
    const pointValue = point[property];
    const segments = line.segments;
    const linePoints = line.points;
    let first = false;
    let last = false;
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        const firstValue = linePoints[segment.start][property];
        const lastValue = linePoints[segment.end][property];
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aj)(pointValue, firstValue, lastValue)) {
            first = pointValue === firstValue;
            last = pointValue === lastValue;
            break;
        }
    }
    return {
        first,
        last,
        point
    };
}

class simpleArc {
    constructor(opts){
        this.x = opts.x;
        this.y = opts.y;
        this.radius = opts.radius;
    }
    pathSegment(ctx, bounds, opts) {
        const { x , y , radius  } = this;
        bounds = bounds || {
            start: 0,
            end: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T
        };
        ctx.arc(x, y, radius, bounds.end, bounds.start, true);
        return !opts.bounds;
    }
    interpolate(point) {
        const { x , y , radius  } = this;
        const angle = point.angle;
        return {
            x: x + Math.cos(angle) * radius,
            y: y + Math.sin(angle) * radius,
            angle
        };
    }
}

function _getTarget(source) {
    const { chart , fill , line  } = source;
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(fill)) {
        return getLineByIndex(chart, fill);
    }
    if (fill === 'stack') {
        return _buildStackLine(source);
    }
    if (fill === 'shape') {
        return true;
    }
    const boundary = computeBoundary(source);
    if (boundary instanceof simpleArc) {
        return boundary;
    }
    return _createBoundaryLine(boundary, line);
}
 function getLineByIndex(chart, index) {
    const meta = chart.getDatasetMeta(index);
    const visible = meta && chart.isDatasetVisible(index);
    return visible ? meta.dataset : null;
}
function computeBoundary(source) {
    const scale = source.scale || {};
    if (scale.getPointPositionForValue) {
        return computeCircularBoundary(source);
    }
    return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
    const { scale ={} , fill  } = source;
    const pixel = _getTargetPixel(fill, scale);
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(pixel)) {
        const horizontal = scale.isHorizontal();
        return {
            x: horizontal ? pixel : null,
            y: horizontal ? null : pixel
        };
    }
    return null;
}
function computeCircularBoundary(source) {
    const { scale , fill  } = source;
    const options = scale.options;
    const length = scale.getLabels().length;
    const start = options.reverse ? scale.max : scale.min;
    const value = _getTargetValue(fill, scale, start);
    const target = [];
    if (options.grid.circular) {
        const center = scale.getPointPositionForValue(0, start);
        return new simpleArc({
            x: center.x,
            y: center.y,
            radius: scale.getDistanceFromCenterForValue(value)
        });
    }
    for(let i = 0; i < length; ++i){
        target.push(scale.getPointPositionForValue(i, value));
    }
    return target;
}

function _drawfill(ctx, source, area) {
    const target = _getTarget(source);
    const { line , scale , axis  } = source;
    const lineOpts = line.options;
    const fillOption = lineOpts.fill;
    const color = lineOpts.backgroundColor;
    const { above =color , below =color  } = fillOption || {};
    if (target && line.points.length) {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Y)(ctx, area);
        doFill(ctx, {
            line,
            target,
            above,
            below,
            area,
            scale,
            axis
        });
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.$)(ctx);
    }
}
function doFill(ctx, cfg) {
    const { line , target , above , below , area , scale  } = cfg;
    const property = line._loop ? 'angle' : cfg.axis;
    ctx.save();
    if (property === 'x' && below !== above) {
        clipVertical(ctx, target, area.top);
        fill(ctx, {
            line,
            target,
            color: above,
            scale,
            property
        });
        ctx.restore();
        ctx.save();
        clipVertical(ctx, target, area.bottom);
    }
    fill(ctx, {
        line,
        target,
        color: below,
        scale,
        property
    });
    ctx.restore();
}
function clipVertical(ctx, target, clipY) {
    const { segments , points  } = target;
    let first = true;
    let lineLoop = false;
    ctx.beginPath();
    for (const segment of segments){
        const { start , end  } = segment;
        const firstPoint = points[start];
        const lastPoint = points[_findSegmentEnd(start, end, points)];
        if (first) {
            ctx.moveTo(firstPoint.x, firstPoint.y);
            first = false;
        } else {
            ctx.lineTo(firstPoint.x, clipY);
            ctx.lineTo(firstPoint.x, firstPoint.y);
        }
        lineLoop = !!target.pathSegment(ctx, segment, {
            move: lineLoop
        });
        if (lineLoop) {
            ctx.closePath();
        } else {
            ctx.lineTo(lastPoint.x, clipY);
        }
    }
    ctx.lineTo(target.first().x, clipY);
    ctx.closePath();
    ctx.clip();
}
function fill(ctx, cfg) {
    const { line , target , property , color , scale  } = cfg;
    const segments = _segments(line, target, property);
    for (const { source: src , target: tgt , start , end  } of segments){
        const { style: { backgroundColor =color  } = {}  } = src;
        const notShape = target !== true;
        ctx.save();
        ctx.fillStyle = backgroundColor;
        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));
        ctx.beginPath();
        const lineLoop = !!line.pathSegment(ctx, src);
        let loop;
        if (notShape) {
            if (lineLoop) {
                ctx.closePath();
            } else {
                interpolatedLineTo(ctx, target, end, property);
            }
            const targetLoop = !!target.pathSegment(ctx, tgt, {
                move: lineLoop,
                reverse: true
            });
            loop = lineLoop && targetLoop;
            if (!loop) {
                interpolatedLineTo(ctx, target, start, property);
            }
        }
        ctx.closePath();
        ctx.fill(loop ? 'evenodd' : 'nonzero');
        ctx.restore();
    }
}
function clipBounds(ctx, scale, bounds) {
    const { top , bottom  } = scale.chart.chartArea;
    const { property , start , end  } = bounds || {};
    if (property === 'x') {
        ctx.beginPath();
        ctx.rect(start, top, end - start, bottom - top);
        ctx.clip();
    }
}
function interpolatedLineTo(ctx, target, point, property) {
    const interpolatedPoint = target.interpolate(point, property);
    if (interpolatedPoint) {
        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
    }
}

var index = {
    id: 'filler',
    afterDatasetsUpdate (chart, _args, options) {
        const count = (chart.data.datasets || []).length;
        const sources = [];
        let meta, i, line, source;
        for(i = 0; i < count; ++i){
            meta = chart.getDatasetMeta(i);
            line = meta.dataset;
            source = null;
            if (line && line.options && line instanceof LineElement) {
                source = {
                    visible: chart.isDatasetVisible(i),
                    index: i,
                    fill: _decodeFill(line, i, count),
                    chart,
                    axis: meta.controller.options.indexAxis,
                    scale: meta.vScale,
                    line
                };
            }
            meta.$filler = source;
            sources.push(source);
        }
        for(i = 0; i < count; ++i){
            source = sources[i];
            if (!source || source.fill === false) {
                continue;
            }
            source.fill = _resolveTarget(sources, i, options.propagate);
        }
    },
    beforeDraw (chart, _args, options) {
        const draw = options.drawTime === 'beforeDraw';
        const metasets = chart.getSortedVisibleDatasetMetas();
        const area = chart.chartArea;
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (!source) {
                continue;
            }
            source.line.updateControlPoints(area, source.axis);
            if (draw && source.fill) {
                _drawfill(chart.ctx, source, area);
            }
        }
    },
    beforeDatasetsDraw (chart, _args, options) {
        if (options.drawTime !== 'beforeDatasetsDraw') {
            return;
        }
        const metasets = chart.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (_shouldApplyFill(source)) {
                _drawfill(chart.ctx, source, chart.chartArea);
            }
        }
    },
    beforeDatasetDraw (chart, args, options) {
        const source = args.meta.$filler;
        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {
            return;
        }
        _drawfill(chart.ctx, source, chart.chartArea);
    },
    defaults: {
        propagate: true,
        drawTime: 'beforeDatasetDraw'
    }
};

const getBoxSize = (labelOpts, fontSize)=>{
    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;
    if (labelOpts.usePointStyle) {
        boxHeight = Math.min(boxHeight, fontSize);
        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
    }
    return {
        boxWidth,
        boxHeight,
        itemHeight: Math.max(fontSize, boxHeight)
    };
};
const itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
class Legend extends Element {
 constructor(config){
        super();
        this._added = false;
        this.legendHitBoxes = [];
 this._hoveredItem = null;
        this.doughnutMode = false;
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this.legendItems = undefined;
        this.columnSizes = undefined;
        this.lineWidths = undefined;
        this.maxHeight = undefined;
        this.maxWidth = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.height = undefined;
        this.width = undefined;
        this._margins = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
    update(maxWidth, maxHeight, margins) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins;
        this.setDimensions();
        this.buildLabels();
        this.fit();
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = this._margins.left;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = this._margins.top;
            this.bottom = this.height;
        }
    }
    buildLabels() {
        const labelOpts = this.options.labels || {};
        let legendItems = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(labelOpts.generateLabels, [
            this.chart
        ], this) || [];
        if (labelOpts.filter) {
            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));
        }
        if (labelOpts.sort) {
            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));
        }
        if (this.options.reverse) {
            legendItems.reverse();
        }
        this.legendItems = legendItems;
    }
    fit() {
        const { options , ctx  } = this;
        if (!options.display) {
            this.width = this.height = 0;
            return;
        }
        const labelOpts = options.labels;
        const labelFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(labelOpts.font);
        const fontSize = labelFont.size;
        const titleHeight = this._computeTitleHeight();
        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);
        let width, height;
        ctx.font = labelFont.string;
        if (this.isHorizontal()) {
            width = this.maxWidth;
            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        } else {
            height = this.maxHeight;
            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
        }
        this.width = Math.min(width, options.maxWidth || this.maxWidth);
        this.height = Math.min(height, options.maxHeight || this.maxHeight);
    }
 _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;
        const hitboxes = this.legendHitBoxes = [];
        const lineWidths = this.lineWidths = [
            0
        ];
        const lineHeight = itemHeight + padding;
        let totalHeight = titleHeight;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'middle';
        let row = -1;
        let top = -lineHeight;
        this.legendItems.forEach((legendItem, i)=>{
            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
                totalHeight += lineHeight;
                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
                top += lineHeight;
                row++;
            }
            hitboxes[i] = {
                left: 0,
                top,
                row,
                width: itemWidth,
                height: itemHeight
            };
            lineWidths[lineWidths.length - 1] += itemWidth + padding;
        });
        return totalHeight;
    }
    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;
        const hitboxes = this.legendHitBoxes = [];
        const columnSizes = this.columnSizes = [];
        const heightLimit = maxHeight - titleHeight;
        let totalWidth = padding;
        let currentColWidth = 0;
        let currentColHeight = 0;
        let left = 0;
        let col = 0;
        this.legendItems.forEach((legendItem, i)=>{
            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
                totalWidth += currentColWidth + padding;
                columnSizes.push({
                    width: currentColWidth,
                    height: currentColHeight
                });
                left += currentColWidth + padding;
                col++;
                currentColWidth = currentColHeight = 0;
            }
            hitboxes[i] = {
                left,
                top: currentColHeight,
                col,
                width: itemWidth,
                height: itemHeight
            };
            currentColWidth = Math.max(currentColWidth, itemWidth);
            currentColHeight += itemHeight + padding;
        });
        totalWidth += currentColWidth;
        columnSizes.push({
            width: currentColWidth,
            height: currentColHeight
        });
        return totalWidth;
    }
    adjustHitBoxes() {
        if (!this.options.display) {
            return;
        }
        const titleHeight = this._computeTitleHeight();
        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;
        const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.az)(rtl, this.left, this.width);
        if (this.isHorizontal()) {
            let row = 0;
            let left = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, this.left + padding, this.right - this.lineWidths[row]);
            for (const hitbox of hitboxes){
                if (row !== hitbox.row) {
                    row = hitbox.row;
                    left = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, this.left + padding, this.right - this.lineWidths[row]);
                }
                hitbox.top += this.top + titleHeight + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
                left += hitbox.width + padding;
            }
        } else {
            let col = 0;
            let top = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
            for (const hitbox of hitboxes){
                if (hitbox.col !== col) {
                    col = hitbox.col;
                    top = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
                }
                hitbox.top = top;
                hitbox.left += this.left + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
                top += hitbox.height + padding;
            }
        }
    }
    isHorizontal() {
        return this.options.position === 'top' || this.options.position === 'bottom';
    }
    draw() {
        if (this.options.display) {
            const ctx = this.ctx;
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Y)(ctx, this);
            this._draw();
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.$)(ctx);
        }
    }
 _draw() {
        const { options: opts , columnSizes , lineWidths , ctx  } = this;
        const { align , labels: labelOpts  } = opts;
        const defaultColor = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.color;
        const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.az)(opts.rtl, this.left, this.width);
        const labelFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(labelOpts.font);
        const { padding  } = labelOpts;
        const fontSize = labelFont.size;
        const halfFontSize = fontSize / 2;
        let cursor;
        this.drawTitle();
        ctx.textAlign = rtlHelper.textAlign('left');
        ctx.textBaseline = 'middle';
        ctx.lineWidth = 0.5;
        ctx.font = labelFont.string;
        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);
        const drawLegendBox = function(x, y, legendItem) {
            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
                return;
            }
            ctx.save();
            const lineWidth = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineWidth, 1);
            ctx.fillStyle = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.fillStyle, defaultColor);
            ctx.lineCap = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineCap, 'butt');
            ctx.lineDashOffset = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineDashOffset, 0);
            ctx.lineJoin = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineJoin, 'miter');
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.strokeStyle, defaultColor);
            ctx.setLineDash((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineDash, []));
            if (labelOpts.usePointStyle) {
                const drawOptions = {
                    radius: boxHeight * Math.SQRT2 / 2,
                    pointStyle: legendItem.pointStyle,
                    rotation: legendItem.rotation,
                    borderWidth: lineWidth
                };
                const centerX = rtlHelper.xPlus(x, boxWidth / 2);
                const centerY = y + halfFontSize;
                (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aD)(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
            } else {
                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
                const borderRadius = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aw)(legendItem.borderRadius);
                ctx.beginPath();
                if (Object.values(borderRadius).some((v)=>v !== 0)) {
                    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au)(ctx, {
                        x: xBoxLeft,
                        y: yBoxTop,
                        w: boxWidth,
                        h: boxHeight,
                        radius: borderRadius
                    });
                } else {
                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
                }
                ctx.fill();
                if (lineWidth !== 0) {
                    ctx.stroke();
                }
            }
            ctx.restore();
        };
        const fillText = function(x, y, legendItem) {
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
                strikethrough: legendItem.hidden,
                textAlign: rtlHelper.textAlign(legendItem.textAlign)
            });
        };
        const isHorizontal = this.isHorizontal();
        const titleHeight = this._computeTitleHeight();
        if (isHorizontal) {
            cursor = {
                x: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, this.left + padding, this.right - lineWidths[0]),
                y: this.top + padding + titleHeight,
                line: 0
            };
        } else {
            cursor = {
                x: this.left + padding,
                y: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
                line: 0
            };
        }
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aA)(this.ctx, opts.textDirection);
        const lineHeight = itemHeight + padding;
        this.legendItems.forEach((legendItem, i)=>{
            ctx.strokeStyle = legendItem.fontColor;
            ctx.fillStyle = legendItem.fontColor;
            const textWidth = ctx.measureText(legendItem.text).width;
            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
            const width = boxWidth + halfFontSize + textWidth;
            let x = cursor.x;
            let y = cursor.y;
            rtlHelper.setWidth(this.width);
            if (isHorizontal) {
                if (i > 0 && x + width + padding > this.right) {
                    y = cursor.y += lineHeight;
                    cursor.line++;
                    x = cursor.x = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, this.left + padding, this.right - lineWidths[cursor.line]);
                }
            } else if (i > 0 && y + lineHeight > this.bottom) {
                x = cursor.x = x + columnSizes[cursor.line].width + padding;
                cursor.line++;
                y = cursor.y = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
            }
            const realX = rtlHelper.x(x);
            drawLegendBox(realX, y, legendItem);
            x = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aB)(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
            fillText(rtlHelper.x(x), y, legendItem);
            if (isHorizontal) {
                cursor.x += width + padding;
            } else if (typeof legendItem.text !== 'string') {
                const fontLineHeight = labelFont.lineHeight;
                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
            } else {
                cursor.y += lineHeight;
            }
        });
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aC)(this.ctx, opts.textDirection);
    }
 drawTitle() {
        const opts = this.options;
        const titleOpts = opts.title;
        const titleFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(titleOpts.font);
        const titlePadding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(titleOpts.padding);
        if (!titleOpts.display) {
            return;
        }
        const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.az)(opts.rtl, this.left, this.width);
        const ctx = this.ctx;
        const position = titleOpts.position;
        const halfFontSize = titleFont.size / 2;
        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
        let y;
        let left = this.left;
        let maxWidth = this.width;
        if (this.isHorizontal()) {
            maxWidth = Math.max(...this.lineWidths);
            y = this.top + topPaddingPlusHalfFontSize;
            left = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(opts.align, left, this.right - maxWidth);
        } else {
            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);
            y = topPaddingPlusHalfFontSize + (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
        }
        const x = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(position, left, left + maxWidth);
        ctx.textAlign = rtlHelper.textAlign((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a1)(position));
        ctx.textBaseline = 'middle';
        ctx.strokeStyle = titleOpts.color;
        ctx.fillStyle = titleOpts.color;
        ctx.font = titleFont.string;
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(ctx, titleOpts.text, x, y, titleFont);
    }
 _computeTitleHeight() {
        const titleOpts = this.options.title;
        const titleFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(titleOpts.font);
        const titlePadding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(titleOpts.padding);
        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
    }
 _getLegendItemAt(x, y) {
        let i, hitBox, lh;
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aj)(x, this.left, this.right) && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aj)(y, this.top, this.bottom)) {
            lh = this.legendHitBoxes;
            for(i = 0; i < lh.length; ++i){
                hitBox = lh[i];
                if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aj)(x, hitBox.left, hitBox.left + hitBox.width) && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aj)(y, hitBox.top, hitBox.top + hitBox.height)) {
                    return this.legendItems[i];
                }
            }
        }
        return null;
    }
 handleEvent(e) {
        const opts = this.options;
        if (!isListened(e.type, opts)) {
            return;
        }
        const hoveredItem = this._getLegendItemAt(e.x, e.y);
        if (e.type === 'mousemove' || e.type === 'mouseout') {
            const previous = this._hoveredItem;
            const sameItem = itemsEqual(previous, hoveredItem);
            if (previous && !sameItem) {
                (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(opts.onLeave, [
                    e,
                    previous,
                    this
                ], this);
            }
            this._hoveredItem = hoveredItem;
            if (hoveredItem && !sameItem) {
                (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(opts.onHover, [
                    e,
                    hoveredItem,
                    this
                ], this);
            }
        } else if (hoveredItem) {
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(opts.onClick, [
                e,
                hoveredItem,
                this
            ], this);
        }
    }
}
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
    return {
        itemWidth,
        itemHeight
    };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
    let legendItemText = legendItem.text;
    if (legendItemText && typeof legendItemText !== 'string') {
        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);
    }
    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
    let itemHeight = _itemHeight;
    if (typeof legendItem.text !== 'string') {
        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
    }
    return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
    const labelHeight = legendItem.text ? legendItem.text.length : 0;
    return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {
        return true;
    }
    if (opts.onClick && (type === 'click' || type === 'mouseup')) {
        return true;
    }
    return false;
}
var plugin_legend = {
    id: 'legend',
 _element: Legend,
    start (chart, _args, options) {
        const legend = chart.legend = new Legend({
            ctx: chart.ctx,
            options,
            chart
        });
        layouts.configure(chart, legend, options);
        layouts.addBox(chart, legend);
    },
    stop (chart) {
        layouts.removeBox(chart, chart.legend);
        delete chart.legend;
    },
    beforeUpdate (chart, _args, options) {
        const legend = chart.legend;
        layouts.configure(chart, legend, options);
        legend.options = options;
    },
    afterUpdate (chart) {
        const legend = chart.legend;
        legend.buildLabels();
        legend.adjustHitBoxes();
    },
    afterEvent (chart, args) {
        if (!args.replay) {
            chart.legend.handleEvent(args.event);
        }
    },
    defaults: {
        display: true,
        position: 'top',
        align: 'center',
        fullSize: true,
        reverse: false,
        weight: 1000,
        onClick (e, legendItem, legend) {
            const index = legendItem.datasetIndex;
            const ci = legend.chart;
            if (ci.isDatasetVisible(index)) {
                ci.hide(index);
                legendItem.hidden = true;
            } else {
                ci.show(index);
                legendItem.hidden = false;
            }
        },
        onHover: null,
        onLeave: null,
        labels: {
            color: (ctx)=>ctx.chart.options.color,
            boxWidth: 40,
            padding: 10,
            generateLabels (chart) {
                const datasets = chart.data.datasets;
                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;
                return chart._getSortedDatasetMetas().map((meta)=>{
                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
                    const borderWidth = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(style.borderWidth);
                    return {
                        text: datasets[meta.index].label,
                        fillStyle: style.backgroundColor,
                        fontColor: color,
                        hidden: !meta.visible,
                        lineCap: style.borderCapStyle,
                        lineDash: style.borderDash,
                        lineDashOffset: style.borderDashOffset,
                        lineJoin: style.borderJoinStyle,
                        lineWidth: (borderWidth.width + borderWidth.height) / 4,
                        strokeStyle: style.borderColor,
                        pointStyle: pointStyle || style.pointStyle,
                        rotation: style.rotation,
                        textAlign: textAlign || style.textAlign,
                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
                        datasetIndex: meta.index
                    };
                }, this);
            }
        },
        title: {
            color: (ctx)=>ctx.chart.options.color,
            display: false,
            position: 'center',
            text: ''
        }
    },
    descriptors: {
        _scriptable: (name)=>!name.startsWith('on'),
        labels: {
            _scriptable: (name)=>![
                    'generateLabels',
                    'filter',
                    'sort'
                ].includes(name)
        }
    }
};

class Title extends Element {
 constructor(config){
        super();
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this._padding = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
    update(maxWidth, maxHeight) {
        const opts = this.options;
        this.left = 0;
        this.top = 0;
        if (!opts.display) {
            this.width = this.height = this.right = this.bottom = 0;
            return;
        }
        this.width = this.right = maxWidth;
        this.height = this.bottom = maxHeight;
        const lineCount = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(opts.text) ? opts.text.length : 1;
        this._padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(opts.padding);
        const textSize = lineCount * (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(opts.font).lineHeight + this._padding.height;
        if (this.isHorizontal()) {
            this.height = textSize;
        } else {
            this.width = textSize;
        }
    }
    isHorizontal() {
        const pos = this.options.position;
        return pos === 'top' || pos === 'bottom';
    }
    _drawArgs(offset) {
        const { top , left , bottom , right , options  } = this;
        const align = options.align;
        let rotation = 0;
        let maxWidth, titleX, titleY;
        if (this.isHorizontal()) {
            titleX = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, left, right);
            titleY = top + offset;
            maxWidth = right - left;
        } else {
            if (options.position === 'left') {
                titleX = left + offset;
                titleY = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, bottom, top);
                rotation = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P * -0.5;
            } else {
                titleX = right - offset;
                titleY = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2)(align, top, bottom);
                rotation = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P * 0.5;
            }
            maxWidth = bottom - top;
        }
        return {
            titleX,
            titleY,
            maxWidth,
            rotation
        };
    }
    draw() {
        const ctx = this.ctx;
        const opts = this.options;
        if (!opts.display) {
            return;
        }
        const fontOpts = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(opts.font);
        const lineHeight = fontOpts.lineHeight;
        const offset = lineHeight / 2 + this._padding.top;
        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(ctx, opts.text, 0, 0, fontOpts, {
            color: opts.color,
            maxWidth,
            rotation,
            textAlign: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a1)(opts.align),
            textBaseline: 'middle',
            translation: [
                titleX,
                titleY
            ]
        });
    }
}
function createTitle(chart, titleOpts) {
    const title = new Title({
        ctx: chart.ctx,
        options: titleOpts,
        chart
    });
    layouts.configure(chart, title, titleOpts);
    layouts.addBox(chart, title);
    chart.titleBlock = title;
}
var plugin_title = {
    id: 'title',
 _element: Title,
    start (chart, _args, options) {
        createTitle(chart, options);
    },
    stop (chart) {
        const titleBlock = chart.titleBlock;
        layouts.removeBox(chart, titleBlock);
        delete chart.titleBlock;
    },
    beforeUpdate (chart, _args, options) {
        const title = chart.titleBlock;
        layouts.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: 'center',
        display: false,
        font: {
            weight: 'bold'
        },
        fullSize: true,
        padding: 10,
        position: 'top',
        text: '',
        weight: 2000
    },
    defaultRoutes: {
        color: 'color'
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};

const map = new WeakMap();
var plugin_subtitle = {
    id: 'subtitle',
    start (chart, _args, options) {
        const title = new Title({
            ctx: chart.ctx,
            options,
            chart
        });
        layouts.configure(chart, title, options);
        layouts.addBox(chart, title);
        map.set(chart, title);
    },
    stop (chart) {
        layouts.removeBox(chart, map.get(chart));
        map.delete(chart);
    },
    beforeUpdate (chart, _args, options) {
        const title = map.get(chart);
        layouts.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: 'center',
        display: false,
        font: {
            weight: 'normal'
        },
        fullSize: true,
        padding: 0,
        position: 'top',
        text: '',
        weight: 1500
    },
    defaultRoutes: {
        color: 'color'
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};

const positioners = {
 average (items) {
        if (!items.length) {
            return false;
        }
        let i, len;
        let xSet = new Set();
        let y = 0;
        let count = 0;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const pos = el.tooltipPosition();
                xSet.add(pos.x);
                y += pos.y;
                ++count;
            }
        }
        const xAverage = [
            ...xSet
        ].reduce((a, b)=>a + b) / xSet.size;
        return {
            x: xAverage,
            y: y / count
        };
    },
 nearest (items, eventPosition) {
        if (!items.length) {
            return false;
        }
        let x = eventPosition.x;
        let y = eventPosition.y;
        let minDistance = Number.POSITIVE_INFINITY;
        let i, len, nearestElement;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const center = el.getCenterPoint();
                const d = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aE)(eventPosition, center);
                if (d < minDistance) {
                    minDistance = d;
                    nearestElement = el;
                }
            }
        }
        if (nearestElement) {
            const tp = nearestElement.tooltipPosition();
            x = tp.x;
            y = tp.y;
        }
        return {
            x,
            y
        };
    }
};
function pushOrConcat(base, toPush) {
    if (toPush) {
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(toPush)) {
            Array.prototype.push.apply(base, toPush);
        } else {
            base.push(toPush);
        }
    }
    return base;
}
 function splitNewlines(str) {
    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
        return str.split('\n');
    }
    return str;
}
 function createTooltipItem(chart, item) {
    const { element , datasetIndex , index  } = item;
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    const { label , value  } = controller.getLabelAndValue(index);
    return {
        chart,
        label,
        parsed: controller.getParsed(index),
        raw: chart.data.datasets[datasetIndex].data[index],
        formattedValue: value,
        dataset: controller.getDataset(),
        dataIndex: index,
        datasetIndex,
        element
    };
}
 function getTooltipSize(tooltip, options) {
    const ctx = tooltip.chart.ctx;
    const { body , footer , title  } = tooltip;
    const { boxWidth , boxHeight  } = options;
    const bodyFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(options.bodyFont);
    const titleFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(options.titleFont);
    const footerFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(options.footerFont);
    const titleLineCount = title.length;
    const footerLineCount = footer.length;
    const bodyLineItemCount = body.length;
    const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(options.padding);
    let height = padding.height;
    let width = 0;
    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
    if (titleLineCount) {
        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
    }
    if (combinedBodyLength) {
        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
    }
    if (footerLineCount) {
        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
    }
    let widthPadding = 0;
    const maxLineWidth = function(line) {
        width = Math.max(width, ctx.measureText(line).width + widthPadding);
    };
    ctx.save();
    ctx.font = titleFont.string;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(tooltip.title, maxLineWidth);
    ctx.font = bodyFont.string;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(body, (bodyItem)=>{
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(bodyItem.before, maxLineWidth);
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(bodyItem.lines, maxLineWidth);
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(bodyItem.after, maxLineWidth);
    });
    widthPadding = 0;
    ctx.font = footerFont.string;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(tooltip.footer, maxLineWidth);
    ctx.restore();
    width += padding.width;
    return {
        width,
        height
    };
}
function determineYAlign(chart, size) {
    const { y , height  } = size;
    if (y < height / 2) {
        return 'top';
    } else if (y > chart.height - height / 2) {
        return 'bottom';
    }
    return 'center';
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
    const { x , width  } = size;
    const caret = options.caretSize + options.caretPadding;
    if (xAlign === 'left' && x + width + caret > chart.width) {
        return true;
    }
    if (xAlign === 'right' && x - width - caret < 0) {
        return true;
    }
}
function determineXAlign(chart, options, size, yAlign) {
    const { x , width  } = size;
    const { width: chartWidth , chartArea: { left , right  }  } = chart;
    let xAlign = 'center';
    if (yAlign === 'center') {
        xAlign = x <= (left + right) / 2 ? 'left' : 'right';
    } else if (x <= width / 2) {
        xAlign = 'left';
    } else if (x >= chartWidth - width / 2) {
        xAlign = 'right';
    }
    if (doesNotFitWithAlign(xAlign, chart, options, size)) {
        xAlign = 'center';
    }
    return xAlign;
}
 function determineAlignment(chart, options, size) {
    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
    return {
        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
        yAlign
    };
}
function alignX(size, xAlign) {
    let { x , width  } = size;
    if (xAlign === 'right') {
        x -= width;
    } else if (xAlign === 'center') {
        x -= width / 2;
    }
    return x;
}
function alignY(size, yAlign, paddingAndSize) {
    let { y , height  } = size;
    if (yAlign === 'top') {
        y += paddingAndSize;
    } else if (yAlign === 'bottom') {
        y -= height + paddingAndSize;
    } else {
        y -= height / 2;
    }
    return y;
}
 function getBackgroundPoint(options, size, alignment, chart) {
    const { caretSize , caretPadding , cornerRadius  } = options;
    const { xAlign , yAlign  } = alignment;
    const paddingAndSize = caretSize + caretPadding;
    const { topLeft , topRight , bottomLeft , bottomRight  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aw)(cornerRadius);
    let x = alignX(size, xAlign);
    const y = alignY(size, yAlign, paddingAndSize);
    if (yAlign === 'center') {
        if (xAlign === 'left') {
            x += paddingAndSize;
        } else if (xAlign === 'right') {
            x -= paddingAndSize;
        }
    } else if (xAlign === 'left') {
        x -= Math.max(topLeft, bottomLeft) + caretSize;
    } else if (xAlign === 'right') {
        x += Math.max(topRight, bottomRight) + caretSize;
    }
    return {
        x: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(x, 0, chart.width - size.width),
        y: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(y, 0, chart.height - size.height)
    };
}
function getAlignedX(tooltip, align, options) {
    const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(options.padding);
    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
 function getBeforeAfterBodyLines(callback) {
    return pushOrConcat([], splitNewlines(callback));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(parent, {
        tooltip,
        tooltipItems,
        type: 'tooltip'
    });
}
function overrideCallbacks(callbacks, context) {
    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
    return override ? callbacks.override(override) : callbacks;
}
const defaultCallbacks = {
    beforeTitle: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aF,
    title (tooltipItems) {
        if (tooltipItems.length > 0) {
            const item = tooltipItems[0];
            const labels = item.chart.data.labels;
            const labelCount = labels ? labels.length : 0;
            if (this && this.options && this.options.mode === 'dataset') {
                return item.dataset.label || '';
            } else if (item.label) {
                return item.label;
            } else if (labelCount > 0 && item.dataIndex < labelCount) {
                return labels[item.dataIndex];
            }
        }
        return '';
    },
    afterTitle: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aF,
    beforeBody: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aF,
    beforeLabel: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aF,
    label (tooltipItem) {
        if (this && this.options && this.options.mode === 'dataset') {
            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;
        }
        let label = tooltipItem.dataset.label || '';
        if (label) {
            label += ': ';
        }
        const value = tooltipItem.formattedValue;
        if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(value)) {
            label += value;
        }
        return label;
    },
    labelColor (tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
            borderColor: options.borderColor,
            backgroundColor: options.backgroundColor,
            borderWidth: options.borderWidth,
            borderDash: options.borderDash,
            borderDashOffset: options.borderDashOffset,
            borderRadius: 0
        };
    },
    labelTextColor () {
        return this.options.bodyColor;
    },
    labelPointStyle (tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
            pointStyle: options.pointStyle,
            rotation: options.rotation
        };
    },
    afterLabel: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aF,
    afterBody: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aF,
    beforeFooter: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aF,
    footer: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aF,
    afterFooter: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aF
};
 function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
    const result = callbacks[name].call(ctx, arg);
    if (typeof result === 'undefined') {
        return defaultCallbacks[name].call(ctx, arg);
    }
    return result;
}
class Tooltip extends Element {
 static positioners = positioners;
    constructor(config){
        super();
        this.opacity = 0;
        this._active = [];
        this._eventPosition = undefined;
        this._size = undefined;
        this._cachedAnimations = undefined;
        this._tooltipItems = [];
        this.$animations = undefined;
        this.$context = undefined;
        this.chart = config.chart;
        this.options = config.options;
        this.dataPoints = undefined;
        this.title = undefined;
        this.beforeBody = undefined;
        this.body = undefined;
        this.afterBody = undefined;
        this.footer = undefined;
        this.xAlign = undefined;
        this.yAlign = undefined;
        this.x = undefined;
        this.y = undefined;
        this.height = undefined;
        this.width = undefined;
        this.caretX = undefined;
        this.caretY = undefined;
        this.labelColors = undefined;
        this.labelPointStyles = undefined;
        this.labelTextColors = undefined;
    }
    initialize(options) {
        this.options = options;
        this._cachedAnimations = undefined;
        this.$context = undefined;
    }
 _resolveAnimations() {
        const cached = this._cachedAnimations;
        if (cached) {
            return cached;
        }
        const chart = this.chart;
        const options = this.options.setContext(this.getContext());
        const opts = options.enabled && chart.options.animation && options.animations;
        const animations = new Animations(this.chart, opts);
        if (opts._cacheable) {
            this._cachedAnimations = Object.freeze(animations);
        }
        return animations;
    }
 getContext() {
        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
    }
    getTitle(context, options) {
        const { callbacks  } = options;
        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);
        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);
        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
        lines = pushOrConcat(lines, splitNewlines(title));
        lines = pushOrConcat(lines, splitNewlines(afterTitle));
        return lines;
    }
    getBeforeBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));
    }
    getBody(tooltipItems, options) {
        const { callbacks  } = options;
        const bodyItems = [];
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(tooltipItems, (context)=>{
            const bodyItem = {
                before: [],
                lines: [],
                after: []
            };
            const scoped = overrideCallbacks(callbacks, context);
            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));
            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));
            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));
            bodyItems.push(bodyItem);
        });
        return bodyItems;
    }
    getAfterBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));
    }
    getFooter(tooltipItems, options) {
        const { callbacks  } = options;
        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);
        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);
        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
        lines = pushOrConcat(lines, splitNewlines(footer));
        lines = pushOrConcat(lines, splitNewlines(afterFooter));
        return lines;
    }
 _createItems(options) {
        const active = this._active;
        const data = this.chart.data;
        const labelColors = [];
        const labelPointStyles = [];
        const labelTextColors = [];
        let tooltipItems = [];
        let i, len;
        for(i = 0, len = active.length; i < len; ++i){
            tooltipItems.push(createTooltipItem(this.chart, active[i]));
        }
        if (options.filter) {
            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));
        }
        if (options.itemSort) {
            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));
        }
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(tooltipItems, (context)=>{
            const scoped = overrideCallbacks(options.callbacks, context);
            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));
            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));
            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));
        });
        this.labelColors = labelColors;
        this.labelPointStyles = labelPointStyles;
        this.labelTextColors = labelTextColors;
        this.dataPoints = tooltipItems;
        return tooltipItems;
    }
    update(changed, replay) {
        const options = this.options.setContext(this.getContext());
        const active = this._active;
        let properties;
        let tooltipItems = [];
        if (!active.length) {
            if (this.opacity !== 0) {
                properties = {
                    opacity: 0
                };
            }
        } else {
            const position = positioners[options.position].call(this, active, this._eventPosition);
            tooltipItems = this._createItems(options);
            this.title = this.getTitle(tooltipItems, options);
            this.beforeBody = this.getBeforeBody(tooltipItems, options);
            this.body = this.getBody(tooltipItems, options);
            this.afterBody = this.getAfterBody(tooltipItems, options);
            this.footer = this.getFooter(tooltipItems, options);
            const size = this._size = getTooltipSize(this, options);
            const positionAndSize = Object.assign({}, position, size);
            const alignment = determineAlignment(this.chart, options, positionAndSize);
            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
            this.xAlign = alignment.xAlign;
            this.yAlign = alignment.yAlign;
            properties = {
                opacity: 1,
                x: backgroundPoint.x,
                y: backgroundPoint.y,
                width: size.width,
                height: size.height,
                caretX: position.x,
                caretY: position.y
            };
        }
        this._tooltipItems = tooltipItems;
        this.$context = undefined;
        if (properties) {
            this._resolveAnimations().update(this, properties);
        }
        if (changed && options.external) {
            options.external.call(this, {
                chart: this.chart,
                tooltip: this,
                replay
            });
        }
    }
    drawCaret(tooltipPoint, ctx, size, options) {
        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
        ctx.lineTo(caretPosition.x1, caretPosition.y1);
        ctx.lineTo(caretPosition.x2, caretPosition.y2);
        ctx.lineTo(caretPosition.x3, caretPosition.y3);
    }
    getCaretPosition(tooltipPoint, size, options) {
        const { xAlign , yAlign  } = this;
        const { caretSize , cornerRadius  } = options;
        const { topLeft , topRight , bottomLeft , bottomRight  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aw)(cornerRadius);
        const { x: ptX , y: ptY  } = tooltipPoint;
        const { width , height  } = size;
        let x1, x2, x3, y1, y2, y3;
        if (yAlign === 'center') {
            y2 = ptY + height / 2;
            if (xAlign === 'left') {
                x1 = ptX;
                x2 = x1 - caretSize;
                y1 = y2 + caretSize;
                y3 = y2 - caretSize;
            } else {
                x1 = ptX + width;
                x2 = x1 + caretSize;
                y1 = y2 - caretSize;
                y3 = y2 + caretSize;
            }
            x3 = x1;
        } else {
            if (xAlign === 'left') {
                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
            } else if (xAlign === 'right') {
                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
            } else {
                x2 = this.caretX;
            }
            if (yAlign === 'top') {
                y1 = ptY;
                y2 = y1 - caretSize;
                x1 = x2 - caretSize;
                x3 = x2 + caretSize;
            } else {
                y1 = ptY + height;
                y2 = y1 + caretSize;
                x1 = x2 + caretSize;
                x3 = x2 - caretSize;
            }
            y3 = y1;
        }
        return {
            x1,
            x2,
            x3,
            y1,
            y2,
            y3
        };
    }
    drawTitle(pt, ctx, options) {
        const title = this.title;
        const length = title.length;
        let titleFont, titleSpacing, i;
        if (length) {
            const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.az)(options.rtl, this.x, this.width);
            pt.x = getAlignedX(this, options.titleAlign, options);
            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
            ctx.textBaseline = 'middle';
            titleFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(options.titleFont);
            titleSpacing = options.titleSpacing;
            ctx.fillStyle = options.titleColor;
            ctx.font = titleFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
                pt.y += titleFont.lineHeight + titleSpacing;
                if (i + 1 === length) {
                    pt.y += options.titleMarginBottom - titleSpacing;
                }
            }
        }
    }
 _drawColorBox(ctx, pt, i, rtlHelper, options) {
        const labelColor = this.labelColors[i];
        const labelPointStyle = this.labelPointStyles[i];
        const { boxHeight , boxWidth  } = options;
        const bodyFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(options.bodyFont);
        const colorX = getAlignedX(this, 'left', options);
        const rtlColorX = rtlHelper.x(colorX);
        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
        const colorY = pt.y + yOffSet;
        if (options.usePointStyle) {
            const drawOptions = {
                radius: Math.min(boxWidth, boxHeight) / 2,
                pointStyle: labelPointStyle.pointStyle,
                rotation: labelPointStyle.rotation,
                borderWidth: 1
            };
            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
            const centerY = colorY + boxHeight / 2;
            ctx.strokeStyle = options.multiKeyBackground;
            ctx.fillStyle = options.multiKeyBackground;
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.at)(ctx, drawOptions, centerX, centerY);
            ctx.strokeStyle = labelColor.borderColor;
            ctx.fillStyle = labelColor.backgroundColor;
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.at)(ctx, drawOptions, centerX, centerY);
        } else {
            ctx.lineWidth = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
            ctx.strokeStyle = labelColor.borderColor;
            ctx.setLineDash(labelColor.borderDash || []);
            ctx.lineDashOffset = labelColor.borderDashOffset || 0;
            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
            const borderRadius = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aw)(labelColor.borderRadius);
            if (Object.values(borderRadius).some((v)=>v !== 0)) {
                ctx.beginPath();
                ctx.fillStyle = options.multiKeyBackground;
                (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au)(ctx, {
                    x: outerX,
                    y: colorY,
                    w: boxWidth,
                    h: boxHeight,
                    radius: borderRadius
                });
                ctx.fill();
                ctx.stroke();
                ctx.fillStyle = labelColor.backgroundColor;
                ctx.beginPath();
                (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au)(ctx, {
                    x: innerX,
                    y: colorY + 1,
                    w: boxWidth - 2,
                    h: boxHeight - 2,
                    radius: borderRadius
                });
                ctx.fill();
            } else {
                ctx.fillStyle = options.multiKeyBackground;
                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
                ctx.fillStyle = labelColor.backgroundColor;
                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
            }
        }
        ctx.fillStyle = this.labelTextColors[i];
    }
    drawBody(pt, ctx, options) {
        const { body  } = this;
        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;
        const bodyFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(options.bodyFont);
        let bodyLineHeight = bodyFont.lineHeight;
        let xLinePadding = 0;
        const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.az)(options.rtl, this.x, this.width);
        const fillLineOfText = function(line) {
            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
            pt.y += bodyLineHeight + bodySpacing;
        };
        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
        let bodyItem, textColor, lines, i, j, ilen, jlen;
        ctx.textAlign = bodyAlign;
        ctx.textBaseline = 'middle';
        ctx.font = bodyFont.string;
        pt.x = getAlignedX(this, bodyAlignForCalculation, options);
        ctx.fillStyle = options.bodyColor;
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(this.beforeBody, fillLineOfText);
        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
        for(i = 0, ilen = body.length; i < ilen; ++i){
            bodyItem = body[i];
            textColor = this.labelTextColors[i];
            ctx.fillStyle = textColor;
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(bodyItem.before, fillLineOfText);
            lines = bodyItem.lines;
            if (displayColors && lines.length) {
                this._drawColorBox(ctx, pt, i, rtlHelper, options);
                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
            }
            for(j = 0, jlen = lines.length; j < jlen; ++j){
                fillLineOfText(lines[j]);
                bodyLineHeight = bodyFont.lineHeight;
            }
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(bodyItem.after, fillLineOfText);
        }
        xLinePadding = 0;
        bodyLineHeight = bodyFont.lineHeight;
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)(this.afterBody, fillLineOfText);
        pt.y -= bodySpacing;
    }
    drawFooter(pt, ctx, options) {
        const footer = this.footer;
        const length = footer.length;
        let footerFont, i;
        if (length) {
            const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.az)(options.rtl, this.x, this.width);
            pt.x = getAlignedX(this, options.footerAlign, options);
            pt.y += options.footerMarginTop;
            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
            ctx.textBaseline = 'middle';
            footerFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(options.footerFont);
            ctx.fillStyle = options.footerColor;
            ctx.font = footerFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
                pt.y += footerFont.lineHeight + options.footerSpacing;
            }
        }
    }
    drawBackground(pt, ctx, tooltipSize, options) {
        const { xAlign , yAlign  } = this;
        const { x , y  } = pt;
        const { width , height  } = tooltipSize;
        const { topLeft , topRight , bottomLeft , bottomRight  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aw)(options.cornerRadius);
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.beginPath();
        ctx.moveTo(x + topLeft, y);
        if (yAlign === 'top') {
            this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x + width - topRight, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
        if (yAlign === 'center' && xAlign === 'right') {
            this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x + width, y + height - bottomRight);
        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
        if (yAlign === 'bottom') {
            this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x + bottomLeft, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
        if (yAlign === 'center' && xAlign === 'left') {
            this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x, y + topLeft);
        ctx.quadraticCurveTo(x, y, x + topLeft, y);
        ctx.closePath();
        ctx.fill();
        if (options.borderWidth > 0) {
            ctx.stroke();
        }
    }
 _updateAnimationTarget(options) {
        const chart = this.chart;
        const anims = this.$animations;
        const animX = anims && anims.x;
        const animY = anims && anims.y;
        if (animX || animY) {
            const position = positioners[options.position].call(this, this._active, this._eventPosition);
            if (!position) {
                return;
            }
            const size = this._size = getTooltipSize(this, options);
            const positionAndSize = Object.assign({}, position, this._size);
            const alignment = determineAlignment(chart, options, positionAndSize);
            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
            if (animX._to !== point.x || animY._to !== point.y) {
                this.xAlign = alignment.xAlign;
                this.yAlign = alignment.yAlign;
                this.width = size.width;
                this.height = size.height;
                this.caretX = position.x;
                this.caretY = position.y;
                this._resolveAnimations().update(this, point);
            }
        }
    }
 _willRender() {
        return !!this.opacity;
    }
    draw(ctx) {
        const options = this.options.setContext(this.getContext());
        let opacity = this.opacity;
        if (!opacity) {
            return;
        }
        this._updateAnimationTarget(options);
        const tooltipSize = {
            width: this.width,
            height: this.height
        };
        const pt = {
            x: this.x,
            y: this.y
        };
        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
        const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(options.padding);
        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
        if (options.enabled && hasTooltipContent) {
            ctx.save();
            ctx.globalAlpha = opacity;
            this.drawBackground(pt, ctx, tooltipSize, options);
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aA)(ctx, options.textDirection);
            pt.y += padding.top;
            this.drawTitle(pt, ctx, options);
            this.drawBody(pt, ctx, options);
            this.drawFooter(pt, ctx, options);
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aC)(ctx, options.textDirection);
            ctx.restore();
        }
    }
 getActiveElements() {
        return this._active || [];
    }
 setActiveElements(activeElements, eventPosition) {
        const lastActive = this._active;
        const active = activeElements.map(({ datasetIndex , index  })=>{
            const meta = this.chart.getDatasetMeta(datasetIndex);
            if (!meta) {
                throw new Error('Cannot find a dataset at index ' + datasetIndex);
            }
            return {
                datasetIndex,
                element: meta.data[index],
                index
            };
        });
        const changed = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ah)(lastActive, active);
        const positionChanged = this._positionChanged(active, eventPosition);
        if (changed || positionChanged) {
            this._active = active;
            this._eventPosition = eventPosition;
            this._ignoreReplayEvents = true;
            this.update(true);
        }
    }
 handleEvent(e, replay, inChartArea = true) {
        if (replay && this._ignoreReplayEvents) {
            return false;
        }
        this._ignoreReplayEvents = false;
        const options = this.options;
        const lastActive = this._active || [];
        const active = this._getActiveElements(e, lastActive, replay, inChartArea);
        const positionChanged = this._positionChanged(active, e);
        const changed = replay || !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ah)(active, lastActive) || positionChanged;
        if (changed) {
            this._active = active;
            if (options.enabled || options.external) {
                this._eventPosition = {
                    x: e.x,
                    y: e.y
                };
                this.update(true, replay);
            }
        }
        return changed;
    }
 _getActiveElements(e, lastActive, replay, inChartArea) {
        const options = this.options;
        if (e.type === 'mouseout') {
            return [];
        }
        if (!inChartArea) {
            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);
        }
        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
        if (options.reverse) {
            active.reverse();
        }
        return active;
    }
 _positionChanged(active, e) {
        const { caretX , caretY , options  } = this;
        const position = positioners[options.position].call(this, active, e);
        return position !== false && (caretX !== position.x || caretY !== position.y);
    }
}
var plugin_tooltip = {
    id: 'tooltip',
    _element: Tooltip,
    positioners,
    afterInit (chart, _args, options) {
        if (options) {
            chart.tooltip = new Tooltip({
                chart,
                options
            });
        }
    },
    beforeUpdate (chart, _args, options) {
        if (chart.tooltip) {
            chart.tooltip.initialize(options);
        }
    },
    reset (chart, _args, options) {
        if (chart.tooltip) {
            chart.tooltip.initialize(options);
        }
    },
    afterDraw (chart) {
        const tooltip = chart.tooltip;
        if (tooltip && tooltip._willRender()) {
            const args = {
                tooltip
            };
            if (chart.notifyPlugins('beforeTooltipDraw', {
                ...args,
                cancelable: true
            }) === false) {
                return;
            }
            tooltip.draw(chart.ctx);
            chart.notifyPlugins('afterTooltipDraw', args);
        }
    },
    afterEvent (chart, args) {
        if (chart.tooltip) {
            const useFinalPosition = args.replay;
            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
                args.changed = true;
            }
        }
    },
    defaults: {
        enabled: true,
        external: null,
        position: 'average',
        backgroundColor: 'rgba(0,0,0,0.8)',
        titleColor: '#fff',
        titleFont: {
            weight: 'bold'
        },
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleAlign: 'left',
        bodyColor: '#fff',
        bodySpacing: 2,
        bodyFont: {},
        bodyAlign: 'left',
        footerColor: '#fff',
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFont: {
            weight: 'bold'
        },
        footerAlign: 'left',
        padding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        boxHeight: (ctx, opts)=>opts.bodyFont.size,
        boxWidth: (ctx, opts)=>opts.bodyFont.size,
        multiKeyBackground: '#fff',
        displayColors: true,
        boxPadding: 0,
        borderColor: 'rgba(0,0,0,0)',
        borderWidth: 0,
        animation: {
            duration: 400,
            easing: 'easeOutQuart'
        },
        animations: {
            numbers: {
                type: 'number',
                properties: [
                    'x',
                    'y',
                    'width',
                    'height',
                    'caretX',
                    'caretY'
                ]
            },
            opacity: {
                easing: 'linear',
                duration: 200
            }
        },
        callbacks: defaultCallbacks
    },
    defaultRoutes: {
        bodyFont: 'font',
        footerFont: 'font',
        titleFont: 'font'
    },
    descriptors: {
        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',
        _indexable: false,
        callbacks: {
            _scriptable: false,
            _indexable: false
        },
        animation: {
            _fallback: false
        },
        animations: {
            _fallback: 'animation'
        }
    },
    additionalOptionScopes: [
        'interaction'
    ]
};

var plugins = /*#__PURE__*/Object.freeze({
__proto__: null,
Colors: plugin_colors,
Decimation: plugin_decimation,
Filler: index,
Legend: plugin_legend,
SubTitle: plugin_subtitle,
Title: plugin_title,
Tooltip: plugin_tooltip
});

const addIfString = (labels, raw, index, addedLabels)=>{
    if (typeof raw === 'string') {
        index = labels.push(raw) - 1;
        addedLabels.unshift({
            index,
            label: raw
        });
    } else if (isNaN(raw)) {
        index = null;
    }
    return index;
};
function findOrAddLabel(labels, raw, index, addedLabels) {
    const first = labels.indexOf(raw);
    if (first === -1) {
        return addIfString(labels, raw, index, addedLabels);
    }
    const last = labels.lastIndexOf(raw);
    return first !== last ? index : first;
}
const validIndex = (index, max)=>index === null ? null : (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(Math.round(index), 0, max);
function _getLabelForValue(value) {
    const labels = this.getLabels();
    if (value >= 0 && value < labels.length) {
        return labels[value];
    }
    return value;
}
class CategoryScale extends Scale {
    static id = 'category';
 static defaults = {
        ticks: {
            callback: _getLabelForValue
        }
    };
    constructor(cfg){
        super(cfg);
         this._startValue = undefined;
        this._valueRange = 0;
        this._addedLabels = [];
    }
    init(scaleOptions) {
        const added = this._addedLabels;
        if (added.length) {
            const labels = this.getLabels();
            for (const { index , label  } of added){
                if (labels[index] === label) {
                    labels.splice(index, 1);
                }
            }
            this._addedLabels = [];
        }
        super.init(scaleOptions);
    }
    parse(raw, index) {
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(raw)) {
            return null;
        }
        const labels = this.getLabels();
        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(index, raw), this._addedLabels);
        return validIndex(index, labels.length - 1);
    }
    determineDataLimits() {
        const { minDefined , maxDefined  } = this.getUserBounds();
        let { min , max  } = this.getMinMax(true);
        if (this.options.bounds === 'ticks') {
            if (!minDefined) {
                min = 0;
            }
            if (!maxDefined) {
                max = this.getLabels().length - 1;
            }
        }
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const min = this.min;
        const max = this.max;
        const offset = this.options.offset;
        const ticks = [];
        let labels = this.getLabels();
        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
        this._startValue = this.min - (offset ? 0.5 : 0);
        for(let value = min; value <= max; value++){
            ticks.push({
                value
            });
        }
        return ticks;
    }
    getLabelForValue(value) {
        return _getLabelForValue.call(this, value);
    }
 configure() {
        super.configure();
        if (!this.isHorizontal()) {
            this._reversePixels = !this._reversePixels;
        }
    }
    getPixelForValue(value) {
        if (typeof value !== 'number') {
            value = this.parse(value);
        }
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) {
            return null;
        }
        return this.getPixelForValue(ticks[index].value);
    }
    getValueForPixel(pixel) {
        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
    }
    getBasePixel() {
        return this.bottom;
    }
}

function generateTicks$1(generationOptions, dataRange) {
    const ticks = [];
    const MIN_SPACING = 1e-14;
    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;
    const unit = step || 1;
    const maxSpaces = maxTicks - 1;
    const { min: rmin , max: rmax  } = dataRange;
    const minDefined = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(min);
    const maxDefined = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(max);
    const countDefined = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(count);
    const minSpacing = (rmax - rmin) / (maxDigits + 1);
    let spacing = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aH)((rmax - rmin) / maxSpaces / unit) * unit;
    let factor, niceMin, niceMax, numSpaces;
    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
        return [
            {
                value: rmin
            },
            {
                value: rmax
            }
        ];
    }
    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
    if (numSpaces > maxSpaces) {
        spacing = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aH)(numSpaces * spacing / maxSpaces / unit) * unit;
    }
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(precision)) {
        factor = Math.pow(10, precision);
        spacing = Math.ceil(spacing * factor) / factor;
    }
    if (bounds === 'ticks') {
        niceMin = Math.floor(rmin / spacing) * spacing;
        niceMax = Math.ceil(rmax / spacing) * spacing;
    } else {
        niceMin = rmin;
        niceMax = rmax;
    }
    if (minDefined && maxDefined && step && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aI)((max - min) / step, spacing / 1000)) {
        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
        spacing = (max - min) / numSpaces;
        niceMin = min;
        niceMax = max;
    } else if (countDefined) {
        niceMin = minDefined ? min : niceMin;
        niceMax = maxDefined ? max : niceMax;
        numSpaces = count - 1;
        spacing = (niceMax - niceMin) / numSpaces;
    } else {
        numSpaces = (niceMax - niceMin) / spacing;
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aJ)(numSpaces, Math.round(numSpaces), spacing / 1000)) {
            numSpaces = Math.round(numSpaces);
        } else {
            numSpaces = Math.ceil(numSpaces);
        }
    }
    const decimalPlaces = Math.max((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aK)(spacing), (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aK)(niceMin));
    factor = Math.pow(10, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(precision) ? decimalPlaces : precision);
    niceMin = Math.round(niceMin * factor) / factor;
    niceMax = Math.round(niceMax * factor) / factor;
    let j = 0;
    if (minDefined) {
        if (includeBounds && niceMin !== min) {
            ticks.push({
                value: min
            });
            if (niceMin < min) {
                j++;
            }
            if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aJ)(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
                j++;
            }
        } else if (niceMin < min) {
            j++;
        }
    }
    for(; j < numSpaces; ++j){
        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;
        if (maxDefined && tickValue > max) {
            break;
        }
        ticks.push({
            value: tickValue
        });
    }
    if (maxDefined && includeBounds && niceMax !== max) {
        if (ticks.length && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aJ)(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
            ticks[ticks.length - 1].value = max;
        } else {
            ticks.push({
                value: max
            });
        }
    } else if (!maxDefined || niceMax === max) {
        ticks.push({
            value: niceMax
        });
    }
    return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {
    const rad = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(minRotation);
    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
    const length = 0.75 * minSpacing * ('' + value).length;
    return Math.min(minSpacing / ratio, length);
}
class LinearScaleBase extends Scale {
    constructor(cfg){
        super(cfg);
         this.start = undefined;
         this.end = undefined;
         this._startValue = undefined;
         this._endValue = undefined;
        this._valueRange = 0;
    }
    parse(raw, index) {
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(raw)) {
            return null;
        }
        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {
            return null;
        }
        return +raw;
    }
    handleTickRangeOptions() {
        const { beginAtZero  } = this.options;
        const { minDefined , maxDefined  } = this.getUserBounds();
        let { min , max  } = this;
        const setMin = (v)=>min = minDefined ? min : v;
        const setMax = (v)=>max = maxDefined ? max : v;
        if (beginAtZero) {
            const minSign = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(min);
            const maxSign = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(max);
            if (minSign < 0 && maxSign < 0) {
                setMax(0);
            } else if (minSign > 0 && maxSign > 0) {
                setMin(0);
            }
        }
        if (min === max) {
            let offset = max === 0 ? 1 : Math.abs(max * 0.05);
            setMax(max + offset);
            if (!beginAtZero) {
                setMin(min - offset);
            }
        }
        this.min = min;
        this.max = max;
    }
    getTickLimit() {
        const tickOpts = this.options.ticks;
        let { maxTicksLimit , stepSize  } = tickOpts;
        let maxTicks;
        if (stepSize) {
            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
            if (maxTicks > 1000) {
                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
                maxTicks = 1000;
            }
        } else {
            maxTicks = this.computeTickLimit();
            maxTicksLimit = maxTicksLimit || 11;
        }
        if (maxTicksLimit) {
            maxTicks = Math.min(maxTicksLimit, maxTicks);
        }
        return maxTicks;
    }
 computeTickLimit() {
        return Number.POSITIVE_INFINITY;
    }
    buildTicks() {
        const opts = this.options;
        const tickOpts = opts.ticks;
        let maxTicks = this.getTickLimit();
        maxTicks = Math.max(2, maxTicks);
        const numericGeneratorOptions = {
            maxTicks,
            bounds: opts.bounds,
            min: opts.min,
            max: opts.max,
            precision: tickOpts.precision,
            step: tickOpts.stepSize,
            count: tickOpts.count,
            maxDigits: this._maxDigits(),
            horizontal: this.isHorizontal(),
            minRotation: tickOpts.minRotation || 0,
            includeBounds: tickOpts.includeBounds !== false
        };
        const dataRange = this._range || this;
        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
        if (opts.bounds === 'ticks') {
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aG)(ticks, this, 'value');
        }
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
 configure() {
        const ticks = this.ticks;
        let start = this.min;
        let end = this.max;
        super.configure();
        if (this.options.offset && ticks.length) {
            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
            start -= offset;
            end += offset;
        }
        this._startValue = start;
        this._endValue = end;
        this._valueRange = end - start;
    }
    getLabelForValue(value) {
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.o)(value, this.chart.options.locale, this.options.ticks.format);
    }
}

class LinearScale extends LinearScaleBase {
    static id = 'linear';
 static defaults = {
        ticks: {
            callback: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aL.formatters.numeric
        }
    };
    determineDataLimits() {
        const { min , max  } = this.getMinMax(true);
        this.min = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(min) ? min : 0;
        this.max = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(max) ? max : 1;
        this.handleTickRangeOptions();
    }
 computeTickLimit() {
        const horizontal = this.isHorizontal();
        const length = horizontal ? this.width : this.height;
        const minRotation = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.options.ticks.minRotation);
        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
        const tickFont = this._resolveTickFontOptions(0);
        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
    }
    getPixelForValue(value) {
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
    }
}

const log10Floor = (v)=>Math.floor((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aM)(v));
const changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);
function isMajor(tickVal) {
    const remain = tickVal / Math.pow(10, log10Floor(tickVal));
    return remain === 1;
}
function steps(min, max, rangeExp) {
    const rangeStep = Math.pow(10, rangeExp);
    const start = Math.floor(min / rangeStep);
    const end = Math.ceil(max / rangeStep);
    return end - start;
}
function startExp(min, max) {
    const range = max - min;
    let rangeExp = log10Floor(range);
    while(steps(min, max, rangeExp) > 10){
        rangeExp++;
    }
    while(steps(min, max, rangeExp) < 10){
        rangeExp--;
    }
    return Math.min(rangeExp, log10Floor(min));
}
 function generateTicks(generationOptions, { min , max  }) {
    min = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(generationOptions.min, min);
    const ticks = [];
    const minExp = log10Floor(min);
    let exp = startExp(min, max);
    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
    const stepSize = Math.pow(10, exp);
    const base = minExp > exp ? Math.pow(10, minExp) : 0;
    const start = Math.round((min - base) * precision) / precision;
    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;
    let significand = Math.floor((start - offset) / Math.pow(10, exp));
    let value = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);
    while(value < max){
        ticks.push({
            value,
            major: isMajor(value),
            significand
        });
        if (significand >= 10) {
            significand = significand < 15 ? 15 : 20;
        } else {
            significand++;
        }
        if (significand >= 20) {
            exp++;
            significand = 2;
            precision = exp >= 0 ? 1 : precision;
        }
        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;
    }
    const lastTick = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(generationOptions.max, value);
    ticks.push({
        value: lastTick,
        major: isMajor(lastTick),
        significand
    });
    return ticks;
}
class LogarithmicScale extends Scale {
    static id = 'logarithmic';
 static defaults = {
        ticks: {
            callback: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aL.formatters.logarithmic,
            major: {
                enabled: true
            }
        }
    };
    constructor(cfg){
        super(cfg);
         this.start = undefined;
         this.end = undefined;
         this._startValue = undefined;
        this._valueRange = 0;
    }
    parse(raw, index) {
        const value = LinearScaleBase.prototype.parse.apply(this, [
            raw,
            index
        ]);
        if (value === 0) {
            this._zero = true;
            return undefined;
        }
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(value) && value > 0 ? value : null;
    }
    determineDataLimits() {
        const { min , max  } = this.getMinMax(true);
        this.min = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(min) ? Math.max(0, min) : null;
        this.max = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(max) ? Math.max(0, max) : null;
        if (this.options.beginAtZero) {
            this._zero = true;
        }
        if (this._zero && this.min !== this._suggestedMin && !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(this._userMin)) {
            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
        }
        this.handleTickRangeOptions();
    }
    handleTickRangeOptions() {
        const { minDefined , maxDefined  } = this.getUserBounds();
        let min = this.min;
        let max = this.max;
        const setMin = (v)=>min = minDefined ? min : v;
        const setMax = (v)=>max = maxDefined ? max : v;
        if (min === max) {
            if (min <= 0) {
                setMin(1);
                setMax(10);
            } else {
                setMin(changeExponent(min, -1));
                setMax(changeExponent(max, +1));
            }
        }
        if (min <= 0) {
            setMin(changeExponent(max, -1));
        }
        if (max <= 0) {
            setMax(changeExponent(min, +1));
        }
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const opts = this.options;
        const generationOptions = {
            min: this._userMin,
            max: this._userMax
        };
        const ticks = generateTicks(generationOptions, this);
        if (opts.bounds === 'ticks') {
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aG)(ticks, this, 'value');
        }
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
 getLabelForValue(value) {
        return value === undefined ? '0' : (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.o)(value, this.chart.options.locale, this.options.ticks.format);
    }
 configure() {
        const start = this.min;
        super.configure();
        this._startValue = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aM)(start);
        this._valueRange = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aM)(this.max) - (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aM)(start);
    }
    getPixelForValue(value) {
        if (value === undefined || value === 0) {
            value = this.min;
        }
        if (value === null || isNaN(value)) {
            return NaN;
        }
        return this.getPixelForDecimal(value === this.min ? 0 : ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aM)(value) - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        const decimal = this.getDecimalForPixel(pixel);
        return Math.pow(10, this._startValue + decimal * this._valueRange);
    }
}

function getTickBackdropHeight(opts) {
    const tickOpts = opts.ticks;
    if (tickOpts.display && opts.display) {
        const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(tickOpts.backdropPadding);
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(tickOpts.font && tickOpts.font.size, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.font.size) + padding.height;
    }
    return 0;
}
function measureLabelSize(ctx, font, label) {
    label = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(label) ? label : [
        label
    ];
    return {
        w: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aN)(ctx, font.string, label),
        h: label.length * font.lineHeight
    };
}
function determineLimits(angle, pos, size, min, max) {
    if (angle === min || angle === max) {
        return {
            start: pos - size / 2,
            end: pos + size / 2
        };
    } else if (angle < min || angle > max) {
        return {
            start: pos - size,
            end: pos
        };
    }
    return {
        start: pos,
        end: pos + size
    };
}
 function fitWithPointLabels(scale) {
    const orig = {
        l: scale.left + scale._padding.left,
        r: scale.right - scale._padding.right,
        t: scale.top + scale._padding.top,
        b: scale.bottom - scale._padding.bottom
    };
    const limits = Object.assign({}, orig);
    const labelSizes = [];
    const padding = [];
    const valueCount = scale._pointLabels.length;
    const pointLabelOpts = scale.options.pointLabels;
    const additionalAngle = pointLabelOpts.centerPointLabels ? _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P / valueCount : 0;
    for(let i = 0; i < valueCount; i++){
        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
        padding[i] = opts.padding;
        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
        const plFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(opts.font);
        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
        labelSizes[i] = textSize;
        const angleRadians = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay)(scale.getIndexAngle(i) + additionalAngle);
        const angle = Math.round((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.U)(angleRadians));
        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
        updateLimits(limits, orig, angleRadians, hLimits, vLimits);
    }
    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
    const sin = Math.abs(Math.sin(angle));
    const cos = Math.abs(Math.cos(angle));
    let x = 0;
    let y = 0;
    if (hLimits.start < orig.l) {
        x = (orig.l - hLimits.start) / sin;
        limits.l = Math.min(limits.l, orig.l - x);
    } else if (hLimits.end > orig.r) {
        x = (hLimits.end - orig.r) / sin;
        limits.r = Math.max(limits.r, orig.r + x);
    }
    if (vLimits.start < orig.t) {
        y = (orig.t - vLimits.start) / cos;
        limits.t = Math.min(limits.t, orig.t - y);
    } else if (vLimits.end > orig.b) {
        y = (vLimits.end - orig.b) / cos;
        limits.b = Math.max(limits.b, orig.b + y);
    }
}
function createPointLabelItem(scale, index, itemOpts) {
    const outerDistance = scale.drawingArea;
    const { extra , additionalAngle , padding , size  } = itemOpts;
    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);
    const angle = Math.round((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.U)((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay)(pointLabelPosition.angle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H)));
    const y = yForAngle(pointLabelPosition.y, size.h, angle);
    const textAlign = getTextAlignForAngle(angle);
    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
    return {
        visible: true,
        x: pointLabelPosition.x,
        y,
        textAlign,
        left,
        top: y,
        right: left + size.w,
        bottom: y + size.h
    };
}
function isNotOverlapped(item, area) {
    if (!area) {
        return true;
    }
    const { left , top , right , bottom  } = item;
    const apexesInArea = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.C)({
        x: left,
        y: top
    }, area) || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.C)({
        x: left,
        y: bottom
    }, area) || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.C)({
        x: right,
        y: top
    }, area) || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.C)({
        x: right,
        y: bottom
    }, area);
    return !apexesInArea;
}
function buildPointLabelItems(scale, labelSizes, padding) {
    const items = [];
    const valueCount = scale._pointLabels.length;
    const opts = scale.options;
    const { centerPointLabels , display  } = opts.pointLabels;
    const itemOpts = {
        extra: getTickBackdropHeight(opts) / 2,
        additionalAngle: centerPointLabels ? _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P / valueCount : 0
    };
    let area;
    for(let i = 0; i < valueCount; i++){
        itemOpts.padding = padding[i];
        itemOpts.size = labelSizes[i];
        const item = createPointLabelItem(scale, i, itemOpts);
        items.push(item);
        if (display === 'auto') {
            item.visible = isNotOverlapped(item, area);
            if (item.visible) {
                area = item;
            }
        }
    }
    return items;
}
function getTextAlignForAngle(angle) {
    if (angle === 0 || angle === 180) {
        return 'center';
    } else if (angle < 180) {
        return 'left';
    }
    return 'right';
}
function leftForTextAlign(x, w, align) {
    if (align === 'right') {
        x -= w;
    } else if (align === 'center') {
        x -= w / 2;
    }
    return x;
}
function yForAngle(y, h, angle) {
    if (angle === 90 || angle === 270) {
        y -= h / 2;
    } else if (angle > 270 || angle < 90) {
        y -= h;
    }
    return y;
}
function drawPointLabelBox(ctx, opts, item) {
    const { left , top , right , bottom  } = item;
    const { backdropColor  } = opts;
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(backdropColor)) {
        const borderRadius = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aw)(opts.borderRadius);
        const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(opts.backdropPadding);
        ctx.fillStyle = backdropColor;
        const backdropLeft = left - padding.left;
        const backdropTop = top - padding.top;
        const backdropWidth = right - left + padding.width;
        const backdropHeight = bottom - top + padding.height;
        if (Object.values(borderRadius).some((v)=>v !== 0)) {
            ctx.beginPath();
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au)(ctx, {
                x: backdropLeft,
                y: backdropTop,
                w: backdropWidth,
                h: backdropHeight,
                radius: borderRadius
            });
            ctx.fill();
        } else {
            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
        }
    }
}
function drawPointLabels(scale, labelCount) {
    const { ctx , options: { pointLabels  }  } = scale;
    for(let i = labelCount - 1; i >= 0; i--){
        const item = scale._pointLabelItems[i];
        if (!item.visible) {
            continue;
        }
        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
        drawPointLabelBox(ctx, optsAtIndex, item);
        const plFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(optsAtIndex.font);
        const { x , y , textAlign  } = item;
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
            color: optsAtIndex.color,
            textAlign: textAlign,
            textBaseline: 'middle'
        });
    }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
    const { ctx  } = scale;
    if (circular) {
        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T);
    } else {
        let pointPosition = scale.getPointPosition(0, radius);
        ctx.moveTo(pointPosition.x, pointPosition.y);
        for(let i = 1; i < labelCount; i++){
            pointPosition = scale.getPointPosition(i, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
        }
    }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
    const ctx = scale.ctx;
    const circular = gridLineOpts.circular;
    const { color , lineWidth  } = gridLineOpts;
    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {
        return;
    }
    ctx.save();
    ctx.strokeStyle = color;
    ctx.lineWidth = lineWidth;
    ctx.setLineDash(borderOpts.dash);
    ctx.lineDashOffset = borderOpts.dashOffset;
    ctx.beginPath();
    pathRadiusLine(scale, radius, circular, labelCount);
    ctx.closePath();
    ctx.stroke();
    ctx.restore();
}
function createPointLabelContext(parent, index, label) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(parent, {
        label,
        index,
        type: 'pointLabel'
    });
}
class RadialLinearScale extends LinearScaleBase {
    static id = 'radialLinear';
 static defaults = {
        display: true,
        animate: true,
        position: 'chartArea',
        angleLines: {
            display: true,
            lineWidth: 1,
            borderDash: [],
            borderDashOffset: 0.0
        },
        grid: {
            circular: false
        },
        startAngle: 0,
        ticks: {
            showLabelBackdrop: true,
            callback: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aL.formatters.numeric
        },
        pointLabels: {
            backdropColor: undefined,
            backdropPadding: 2,
            display: true,
            font: {
                size: 10
            },
            callback (label) {
                return label;
            },
            padding: 5,
            centerPointLabels: false
        }
    };
    static defaultRoutes = {
        'angleLines.color': 'borderColor',
        'pointLabels.color': 'color',
        'ticks.color': 'color'
    };
    static descriptors = {
        angleLines: {
            _fallback: 'grid'
        }
    };
    constructor(cfg){
        super(cfg);
         this.xCenter = undefined;
         this.yCenter = undefined;
         this.drawingArea = undefined;
         this._pointLabels = [];
        this._pointLabelItems = [];
    }
    setDimensions() {
        const padding = this._padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(getTickBackdropHeight(this.options) / 2);
        const w = this.width = this.maxWidth - padding.width;
        const h = this.height = this.maxHeight - padding.height;
        this.xCenter = Math.floor(this.left + w / 2 + padding.left);
        this.yCenter = Math.floor(this.top + h / 2 + padding.top);
        this.drawingArea = Math.floor(Math.min(w, h) / 2);
    }
    determineDataLimits() {
        const { min , max  } = this.getMinMax(false);
        this.min = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(min) && !isNaN(min) ? min : 0;
        this.max = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(max) && !isNaN(max) ? max : 0;
        this.handleTickRangeOptions();
    }
 computeTickLimit() {
        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    }
    generateTickLabels(ticks) {
        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
        this._pointLabels = this.getLabels().map((value, index)=>{
            const label = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.pointLabels.callback, [
                value,
                index
            ], this);
            return label || label === 0 ? label : '';
        }).filter((v, i)=>this.chart.getDataVisibility(i));
    }
    fit() {
        const opts = this.options;
        if (opts.display && opts.pointLabels.display) {
            fitWithPointLabels(this);
        } else {
            this.setCenterPoint(0, 0, 0, 0);
        }
    }
    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
    }
    getIndexAngle(index) {
        const angleMultiplier = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T / (this._pointLabels.length || 1);
        const startAngle = this.options.startAngle || 0;
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay)(index * angleMultiplier + (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(startAngle));
    }
    getDistanceFromCenterForValue(value) {
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(value)) {
            return NaN;
        }
        const scalingFactor = this.drawingArea / (this.max - this.min);
        if (this.options.reverse) {
            return (this.max - value) * scalingFactor;
        }
        return (value - this.min) * scalingFactor;
    }
    getValueForDistanceFromCenter(distance) {
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(distance)) {
            return NaN;
        }
        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
    }
    getPointLabelContext(index) {
        const pointLabels = this._pointLabels || [];
        if (index >= 0 && index < pointLabels.length) {
            const pointLabel = pointLabels[index];
            return createPointLabelContext(this.getContext(), index, pointLabel);
        }
    }
    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {
        const angle = this.getIndexAngle(index) - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H + additionalAngle;
        return {
            x: Math.cos(angle) * distanceFromCenter + this.xCenter,
            y: Math.sin(angle) * distanceFromCenter + this.yCenter,
            angle
        };
    }
    getPointPositionForValue(index, value) {
        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    }
    getBasePosition(index) {
        return this.getPointPositionForValue(index || 0, this.getBaseValue());
    }
    getPointLabelPosition(index) {
        const { left , top , right , bottom  } = this._pointLabelItems[index];
        return {
            left,
            top,
            right,
            bottom
        };
    }
 drawBackground() {
        const { backgroundColor , grid: { circular  }  } = this.options;
        if (backgroundColor) {
            const ctx = this.ctx;
            ctx.save();
            ctx.beginPath();
            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
            ctx.closePath();
            ctx.fillStyle = backgroundColor;
            ctx.fill();
            ctx.restore();
        }
    }
 drawGrid() {
        const ctx = this.ctx;
        const opts = this.options;
        const { angleLines , grid , border  } = opts;
        const labelCount = this._pointLabels.length;
        let i, offset, position;
        if (opts.pointLabels.display) {
            drawPointLabels(this, labelCount);
        }
        if (grid.display) {
            this.ticks.forEach((tick, index)=>{
                if (index !== 0 || index === 0 && this.min < 0) {
                    offset = this.getDistanceFromCenterForValue(tick.value);
                    const context = this.getContext(index);
                    const optsAtIndex = grid.setContext(context);
                    const optsAtIndexBorder = border.setContext(context);
                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
                }
            });
        }
        if (angleLines.display) {
            ctx.save();
            for(i = labelCount - 1; i >= 0; i--){
                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
                const { color , lineWidth  } = optsAtIndex;
                if (!lineWidth || !color) {
                    continue;
                }
                ctx.lineWidth = lineWidth;
                ctx.strokeStyle = color;
                ctx.setLineDash(optsAtIndex.borderDash);
                ctx.lineDashOffset = optsAtIndex.borderDashOffset;
                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
                position = this.getPointPosition(i, offset);
                ctx.beginPath();
                ctx.moveTo(this.xCenter, this.yCenter);
                ctx.lineTo(position.x, position.y);
                ctx.stroke();
            }
            ctx.restore();
        }
    }
 drawBorder() {}
 drawLabels() {
        const ctx = this.ctx;
        const opts = this.options;
        const tickOpts = opts.ticks;
        if (!tickOpts.display) {
            return;
        }
        const startAngle = this.getIndexAngle(0);
        let offset, width;
        ctx.save();
        ctx.translate(this.xCenter, this.yCenter);
        ctx.rotate(startAngle);
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        this.ticks.forEach((tick, index)=>{
            if (index === 0 && this.min >= 0 && !opts.reverse) {
                return;
            }
            const optsAtIndex = tickOpts.setContext(this.getContext(index));
            const tickFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(optsAtIndex.font);
            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);
            if (optsAtIndex.showLabelBackdrop) {
                ctx.font = tickFont.string;
                width = ctx.measureText(tick.label).width;
                ctx.fillStyle = optsAtIndex.backdropColor;
                const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(optsAtIndex.backdropPadding);
                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
            }
            (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(ctx, tick.label, 0, -offset, tickFont, {
                color: optsAtIndex.color,
                strokeColor: optsAtIndex.textStrokeColor,
                strokeWidth: optsAtIndex.textStrokeWidth
            });
        });
        ctx.restore();
    }
 drawTitle() {}
}

const INTERVALS = {
    millisecond: {
        common: true,
        size: 1,
        steps: 1000
    },
    second: {
        common: true,
        size: 1000,
        steps: 60
    },
    minute: {
        common: true,
        size: 60000,
        steps: 60
    },
    hour: {
        common: true,
        size: 3600000,
        steps: 24
    },
    day: {
        common: true,
        size: 86400000,
        steps: 30
    },
    week: {
        common: false,
        size: 604800000,
        steps: 4
    },
    month: {
        common: true,
        size: 2.628e9,
        steps: 12
    },
    quarter: {
        common: false,
        size: 7.884e9,
        steps: 4
    },
    year: {
        common: true,
        size: 3.154e10
    }
};
 const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);
 function sorter(a, b) {
    return a - b;
}
 function parse(scale, input) {
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(input)) {
        return null;
    }
    const adapter = scale._adapter;
    const { parser , round , isoWeekday  } = scale._parseOpts;
    let value = input;
    if (typeof parser === 'function') {
        value = parser(value);
    }
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(value)) {
        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);
    }
    if (value === null) {
        return null;
    }
    if (round) {
        value = round === 'week' && ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.x)(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);
    }
    return +value;
}
 function determineUnitForAutoTicks(minUnit, min, max, capacity) {
    const ilen = UNITS.length;
    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){
        const interval = INTERVALS[UNITS[i]];
        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
            return UNITS[i];
        }
    }
    return UNITS[ilen - 1];
}
 function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){
        const unit = UNITS[i];
        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
            return unit;
        }
    }
    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
 function determineMajorUnit(unit) {
    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){
        if (INTERVALS[UNITS[i]].common) {
            return UNITS[i];
        }
    }
}
 function addTick(ticks, time, timestamps) {
    if (!timestamps) {
        ticks[time] = true;
    } else if (timestamps.length) {
        const { lo , hi  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aP)(timestamps, time);
        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
        ticks[timestamp] = true;
    }
}
 function setMajorTicks(scale, ticks, map, majorUnit) {
    const adapter = scale._adapter;
    const first = +adapter.startOf(ticks[0].value, majorUnit);
    const last = ticks[ticks.length - 1].value;
    let major, index;
    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){
        index = map[major];
        if (index >= 0) {
            ticks[index].major = true;
        }
    }
    return ticks;
}
 function ticksFromTimestamps(scale, values, majorUnit) {
    const ticks = [];
     const map = {};
    const ilen = values.length;
    let i, value;
    for(i = 0; i < ilen; ++i){
        value = values[i];
        map[value] = i;
        ticks.push({
            value,
            major: false
        });
    }
    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}
class TimeScale extends Scale {
    static id = 'time';
 static defaults = {
 bounds: 'data',
        adapters: {},
        time: {
            parser: false,
            unit: false,
            round: false,
            isoWeekday: false,
            minUnit: 'millisecond',
            displayFormats: {}
        },
        ticks: {
 source: 'auto',
            callback: false,
            major: {
                enabled: false
            }
        }
    };
 constructor(props){
        super(props);
         this._cache = {
            data: [],
            labels: [],
            all: []
        };
         this._unit = 'day';
         this._majorUnit = undefined;
        this._offsets = {};
        this._normalized = false;
        this._parseOpts = undefined;
    }
    init(scaleOpts, opts = {}) {
        const time = scaleOpts.time || (scaleOpts.time = {});
         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
        adapter.init(opts);
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ab)(time.displayFormats, adapter.formats());
        this._parseOpts = {
            parser: time.parser,
            round: time.round,
            isoWeekday: time.isoWeekday
        };
        super.init(scaleOpts);
        this._normalized = opts.normalized;
    }
 parse(raw, index) {
        if (raw === undefined) {
            return null;
        }
        return parse(this, raw);
    }
    beforeLayout() {
        super.beforeLayout();
        this._cache = {
            data: [],
            labels: [],
            all: []
        };
    }
    determineDataLimits() {
        const options = this.options;
        const adapter = this._adapter;
        const unit = options.time.unit || 'day';
        let { min , max , minDefined , maxDefined  } = this.getUserBounds();
 function _applyBounds(bounds) {
            if (!minDefined && !isNaN(bounds.min)) {
                min = Math.min(min, bounds.min);
            }
            if (!maxDefined && !isNaN(bounds.max)) {
                max = Math.max(max, bounds.max);
            }
        }
        if (!minDefined || !maxDefined) {
            _applyBounds(this._getLabelBounds());
            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {
                _applyBounds(this.getMinMax(false));
            }
        }
        min = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
        max = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
        this.min = Math.min(min, max - 1);
        this.max = Math.max(min + 1, max);
    }
 _getLabelBounds() {
        const arr = this.getLabelTimestamps();
        let min = Number.POSITIVE_INFINITY;
        let max = Number.NEGATIVE_INFINITY;
        if (arr.length) {
            min = arr[0];
            max = arr[arr.length - 1];
        }
        return {
            min,
            max
        };
    }
 buildTicks() {
        const options = this.options;
        const timeOpts = options.time;
        const tickOpts = options.ticks;
        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();
        if (options.bounds === 'ticks' && timestamps.length) {
            this.min = this._userMin || timestamps[0];
            this.max = this._userMax || timestamps[timestamps.length - 1];
        }
        const min = this.min;
        const max = this.max;
        const ticks = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aO)(timestamps, min, max);
        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);
        this.initOffsets(timestamps);
        if (options.reverse) {
            ticks.reverse();
        }
        return ticksFromTimestamps(this, ticks, this._majorUnit);
    }
    afterAutoSkip() {
        if (this.options.offsetAfterAutoskip) {
            this.initOffsets(this.ticks.map((tick)=>+tick.value));
        }
    }
 initOffsets(timestamps = []) {
        let start = 0;
        let end = 0;
        let first, last;
        if (this.options.offset && timestamps.length) {
            first = this.getDecimalForValue(timestamps[0]);
            if (timestamps.length === 1) {
                start = 1 - first;
            } else {
                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
            }
            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
            if (timestamps.length === 1) {
                end = last;
            } else {
                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
            }
        }
        const limit = timestamps.length < 3 ? 0.5 : 0.25;
        start = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(start, 0, limit);
        end = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(end, 0, limit);
        this._offsets = {
            start,
            end,
            factor: 1 / (start + 1 + end)
        };
    }
 _generate() {
        const adapter = this._adapter;
        const min = this.min;
        const max = this.max;
        const options = this.options;
        const timeOpts = options.time;
        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
        const stepSize = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(options.ticks.stepSize, 1);
        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;
        const hasWeekday = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.x)(weekday) || weekday === true;
        const ticks = {};
        let first = min;
        let time, count;
        if (hasWeekday) {
            first = +adapter.startOf(first, 'isoWeek', weekday);
        }
        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);
        if (adapter.diff(max, min, minor) > 100000 * stepSize) {
            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
        }
        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();
        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){
            addTick(ticks, time, timestamps);
        }
        if (time === max || options.bounds === 'ticks' || count === 1) {
            addTick(ticks, time, timestamps);
        }
        return Object.keys(ticks).sort(sorter).map((x)=>+x);
    }
 getLabelForValue(value) {
        const adapter = this._adapter;
        const timeOpts = this.options.time;
        if (timeOpts.tooltipFormat) {
            return adapter.format(value, timeOpts.tooltipFormat);
        }
        return adapter.format(value, timeOpts.displayFormats.datetime);
    }
 format(value, format) {
        const options = this.options;
        const formats = options.time.displayFormats;
        const unit = this._unit;
        const fmt = format || formats[unit];
        return this._adapter.format(value, fmt);
    }
 _tickFormatFunction(time, index, ticks, format) {
        const options = this.options;
        const formatter = options.ticks.callback;
        if (formatter) {
            return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(formatter, [
                time,
                index,
                ticks
            ], this);
        }
        const formats = options.time.displayFormats;
        const unit = this._unit;
        const majorUnit = this._majorUnit;
        const minorFormat = unit && formats[unit];
        const majorFormat = majorUnit && formats[majorUnit];
        const tick = ticks[index];
        const major = majorUnit && majorFormat && tick && tick.major;
        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));
    }
 generateTickLabels(ticks) {
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            tick.label = this._tickFormatFunction(tick.value, i, ticks);
        }
    }
 getDecimalForValue(value) {
        return value === null ? NaN : (value - this.min) / (this.max - this.min);
    }
 getPixelForValue(value) {
        const offsets = this._offsets;
        const pos = this.getDecimalForValue(value);
        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
    }
 getValueForPixel(pixel) {
        const offsets = this._offsets;
        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return this.min + pos * (this.max - this.min);
    }
 _getLabelSize(label) {
        const ticksOpts = this.options.ticks;
        const tickLabelWidth = this.ctx.measureText(label).width;
        const angle = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
        const cosRotation = Math.cos(angle);
        const sinRotation = Math.sin(angle);
        const tickFontSize = this._resolveTickFontOptions(0).size;
        return {
            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
        };
    }
 _getLabelCapacity(exampleTime) {
        const timeOpts = this.options.time;
        const displayFormats = timeOpts.displayFormats;
        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
            exampleTime
        ], this._majorUnit), format);
        const size = this._getLabelSize(exampleLabel);
        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
        return capacity > 0 ? capacity : 1;
    }
 getDataTimestamps() {
        let timestamps = this._cache.data || [];
        let i, ilen;
        if (timestamps.length) {
            return timestamps;
        }
        const metas = this.getMatchingVisibleMetas();
        if (this._normalized && metas.length) {
            return this._cache.data = metas[0].controller.getAllParsedValues(this);
        }
        for(i = 0, ilen = metas.length; i < ilen; ++i){
            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
        }
        return this._cache.data = this.normalize(timestamps);
    }
 getLabelTimestamps() {
        const timestamps = this._cache.labels || [];
        let i, ilen;
        if (timestamps.length) {
            return timestamps;
        }
        const labels = this.getLabels();
        for(i = 0, ilen = labels.length; i < ilen; ++i){
            timestamps.push(parse(this, labels[i]));
        }
        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
    }
 normalize(values) {
        return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__._)(values.sort(sorter));
    }
}

function interpolate(table, val, reverse) {
    let lo = 0;
    let hi = table.length - 1;
    let prevSource, nextSource, prevTarget, nextTarget;
    if (reverse) {
        if (val >= table[lo].pos && val <= table[hi].pos) {
            ({ lo , hi  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(table, 'pos', val));
        }
        ({ pos: prevSource , time: prevTarget  } = table[lo]);
        ({ pos: nextSource , time: nextTarget  } = table[hi]);
    } else {
        if (val >= table[lo].time && val <= table[hi].time) {
            ({ lo , hi  } = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(table, 'time', val));
        }
        ({ time: prevSource , pos: prevTarget  } = table[lo]);
        ({ time: nextSource , pos: nextTarget  } = table[hi]);
    }
    const span = nextSource - prevSource;
    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
    static id = 'timeseries';
 static defaults = TimeScale.defaults;
 constructor(props){
        super(props);
         this._table = [];
         this._minPos = undefined;
         this._tableRange = undefined;
    }
 initOffsets() {
        const timestamps = this._getTimestampsForTable();
        const table = this._table = this.buildLookupTable(timestamps);
        this._minPos = interpolate(table, this.min);
        this._tableRange = interpolate(table, this.max) - this._minPos;
        super.initOffsets(timestamps);
    }
 buildLookupTable(timestamps) {
        const { min , max  } = this;
        const items = [];
        const table = [];
        let i, ilen, prev, curr, next;
        for(i = 0, ilen = timestamps.length; i < ilen; ++i){
            curr = timestamps[i];
            if (curr >= min && curr <= max) {
                items.push(curr);
            }
        }
        if (items.length < 2) {
            return [
                {
                    time: min,
                    pos: 0
                },
                {
                    time: max,
                    pos: 1
                }
            ];
        }
        for(i = 0, ilen = items.length; i < ilen; ++i){
            next = items[i + 1];
            prev = items[i - 1];
            curr = items[i];
            if (Math.round((next + prev) / 2) !== curr) {
                table.push({
                    time: curr,
                    pos: i / (ilen - 1)
                });
            }
        }
        return table;
    }
 _generate() {
        const min = this.min;
        const max = this.max;
        let timestamps = super.getDataTimestamps();
        if (!timestamps.includes(min) || !timestamps.length) {
            timestamps.splice(0, 0, min);
        }
        if (!timestamps.includes(max) || timestamps.length === 1) {
            timestamps.push(max);
        }
        return timestamps.sort((a, b)=>a - b);
    }
 _getTimestampsForTable() {
        let timestamps = this._cache.all || [];
        if (timestamps.length) {
            return timestamps;
        }
        const data = this.getDataTimestamps();
        const label = this.getLabelTimestamps();
        if (data.length && label.length) {
            timestamps = this.normalize(data.concat(label));
        } else {
            timestamps = data.length ? data : label;
        }
        timestamps = this._cache.all = timestamps;
        return timestamps;
    }
 getDecimalForValue(value) {
        return (interpolate(this._table, value) - this._minPos) / this._tableRange;
    }
 getValueForPixel(pixel) {
        const offsets = this._offsets;
        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
    }
}

var scales = /*#__PURE__*/Object.freeze({
__proto__: null,
CategoryScale: CategoryScale,
LinearScale: LinearScale,
LogarithmicScale: LogarithmicScale,
RadialLinearScale: RadialLinearScale,
TimeScale: TimeScale,
TimeSeriesScale: TimeSeriesScale
});

const registerables = [
    controllers,
    elements,
    plugins,
    scales
];


//# sourceMappingURL=chart.js.map


/***/ }),

/***/ "./node_modules/chart.js/dist/chunks/helpers.segment.js":
/*!**************************************************************!*\
  !*** ./node_modules/chart.js/dist/chunks/helpers.segment.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ unclipArea),
/* harmony export */   A: () => (/* binding */ _rlookupByKey),
/* harmony export */   B: () => (/* binding */ _lookupByKey),
/* harmony export */   C: () => (/* binding */ _isPointInArea),
/* harmony export */   D: () => (/* binding */ getAngleFromPoint),
/* harmony export */   E: () => (/* binding */ toPadding),
/* harmony export */   F: () => (/* binding */ each),
/* harmony export */   G: () => (/* binding */ getMaximumSize),
/* harmony export */   H: () => (/* binding */ HALF_PI),
/* harmony export */   I: () => (/* binding */ _getParentNode),
/* harmony export */   J: () => (/* binding */ readUsedSize),
/* harmony export */   K: () => (/* binding */ supportsEventListenerOptions),
/* harmony export */   L: () => (/* binding */ throttled),
/* harmony export */   M: () => (/* binding */ _isDomSupported),
/* harmony export */   N: () => (/* binding */ _factorize),
/* harmony export */   O: () => (/* binding */ finiteOrDefault),
/* harmony export */   P: () => (/* binding */ PI),
/* harmony export */   Q: () => (/* binding */ callback),
/* harmony export */   R: () => (/* binding */ _addGrace),
/* harmony export */   S: () => (/* binding */ _limitValue),
/* harmony export */   T: () => (/* binding */ TAU),
/* harmony export */   U: () => (/* binding */ toDegrees),
/* harmony export */   V: () => (/* binding */ _measureText),
/* harmony export */   W: () => (/* binding */ _int16Range),
/* harmony export */   X: () => (/* binding */ _alignPixel),
/* harmony export */   Y: () => (/* binding */ clipArea),
/* harmony export */   Z: () => (/* binding */ renderText),
/* harmony export */   _: () => (/* binding */ _arrayUnique),
/* harmony export */   a: () => (/* binding */ resolve),
/* harmony export */   a$: () => (/* binding */ fontString),
/* harmony export */   a0: () => (/* binding */ toFont),
/* harmony export */   a1: () => (/* binding */ _toLeftRightCenter),
/* harmony export */   a2: () => (/* binding */ _alignStartEnd),
/* harmony export */   a3: () => (/* binding */ overrides),
/* harmony export */   a4: () => (/* binding */ merge),
/* harmony export */   a5: () => (/* binding */ _capitalize),
/* harmony export */   a6: () => (/* binding */ descriptors),
/* harmony export */   a7: () => (/* binding */ isFunction),
/* harmony export */   a8: () => (/* binding */ _attachContext),
/* harmony export */   a9: () => (/* binding */ _createResolver),
/* harmony export */   aA: () => (/* binding */ overrideTextDirection),
/* harmony export */   aB: () => (/* binding */ _textX),
/* harmony export */   aC: () => (/* binding */ restoreTextDirection),
/* harmony export */   aD: () => (/* binding */ drawPointLegend),
/* harmony export */   aE: () => (/* binding */ distanceBetweenPoints),
/* harmony export */   aF: () => (/* binding */ noop),
/* harmony export */   aG: () => (/* binding */ _setMinAndMaxByKey),
/* harmony export */   aH: () => (/* binding */ niceNum),
/* harmony export */   aI: () => (/* binding */ almostWhole),
/* harmony export */   aJ: () => (/* binding */ almostEquals),
/* harmony export */   aK: () => (/* binding */ _decimalPlaces),
/* harmony export */   aL: () => (/* binding */ Ticks),
/* harmony export */   aM: () => (/* binding */ log10),
/* harmony export */   aN: () => (/* binding */ _longestText),
/* harmony export */   aO: () => (/* binding */ _filterBetween),
/* harmony export */   aP: () => (/* binding */ _lookup),
/* harmony export */   aQ: () => (/* binding */ isPatternOrGradient),
/* harmony export */   aR: () => (/* binding */ getHoverColor),
/* harmony export */   aS: () => (/* binding */ clone),
/* harmony export */   aT: () => (/* binding */ _merger),
/* harmony export */   aU: () => (/* binding */ _mergerIf),
/* harmony export */   aV: () => (/* binding */ _deprecated),
/* harmony export */   aW: () => (/* binding */ _splitKey),
/* harmony export */   aX: () => (/* binding */ toFontString),
/* harmony export */   aY: () => (/* binding */ splineCurve),
/* harmony export */   aZ: () => (/* binding */ splineCurveMonotone),
/* harmony export */   a_: () => (/* binding */ getStyle),
/* harmony export */   aa: () => (/* binding */ _descriptors),
/* harmony export */   ab: () => (/* binding */ mergeIf),
/* harmony export */   ac: () => (/* binding */ uid),
/* harmony export */   ad: () => (/* binding */ debounce),
/* harmony export */   ae: () => (/* binding */ retinaScale),
/* harmony export */   af: () => (/* binding */ clearCanvas),
/* harmony export */   ag: () => (/* binding */ setsEqual),
/* harmony export */   ah: () => (/* binding */ _elementsEqual),
/* harmony export */   ai: () => (/* binding */ _isClickEvent),
/* harmony export */   aj: () => (/* binding */ _isBetween),
/* harmony export */   ak: () => (/* binding */ _readValueToProps),
/* harmony export */   al: () => (/* binding */ _updateBezierControlPoints),
/* harmony export */   am: () => (/* binding */ _computeSegments),
/* harmony export */   an: () => (/* binding */ _boundSegments),
/* harmony export */   ao: () => (/* binding */ _steppedInterpolation),
/* harmony export */   ap: () => (/* binding */ _bezierInterpolation),
/* harmony export */   aq: () => (/* binding */ _pointInLine),
/* harmony export */   ar: () => (/* binding */ _steppedLineTo),
/* harmony export */   as: () => (/* binding */ _bezierCurveTo),
/* harmony export */   at: () => (/* binding */ drawPoint),
/* harmony export */   au: () => (/* binding */ addRoundedRectPath),
/* harmony export */   av: () => (/* binding */ toTRBL),
/* harmony export */   aw: () => (/* binding */ toTRBLCorners),
/* harmony export */   ax: () => (/* binding */ _boundSegment),
/* harmony export */   ay: () => (/* binding */ _normalizeAngle),
/* harmony export */   az: () => (/* binding */ getRtlAdapter),
/* harmony export */   b: () => (/* binding */ isArray),
/* harmony export */   b0: () => (/* binding */ toLineHeight),
/* harmony export */   b1: () => (/* binding */ PITAU),
/* harmony export */   b2: () => (/* binding */ INFINITY),
/* harmony export */   b3: () => (/* binding */ RAD_PER_DEG),
/* harmony export */   b4: () => (/* binding */ QUARTER_PI),
/* harmony export */   b5: () => (/* binding */ TWO_THIRDS_PI),
/* harmony export */   b6: () => (/* binding */ _angleDiff),
/* harmony export */   c: () => (/* binding */ color),
/* harmony export */   d: () => (/* binding */ defaults),
/* harmony export */   e: () => (/* binding */ effects),
/* harmony export */   f: () => (/* binding */ resolveObjectKey),
/* harmony export */   g: () => (/* binding */ isNumberFinite),
/* harmony export */   h: () => (/* binding */ defined),
/* harmony export */   i: () => (/* binding */ isObject),
/* harmony export */   j: () => (/* binding */ createContext),
/* harmony export */   k: () => (/* binding */ isNullOrUndef),
/* harmony export */   l: () => (/* binding */ listenArrayEvents),
/* harmony export */   m: () => (/* binding */ toPercentage),
/* harmony export */   n: () => (/* binding */ toDimension),
/* harmony export */   o: () => (/* binding */ formatNumber),
/* harmony export */   p: () => (/* binding */ _angleBetween),
/* harmony export */   q: () => (/* binding */ _getStartAndCountOfVisiblePoints),
/* harmony export */   r: () => (/* binding */ requestAnimFrame),
/* harmony export */   s: () => (/* binding */ sign),
/* harmony export */   t: () => (/* binding */ toRadians),
/* harmony export */   u: () => (/* binding */ unlistenArrayEvents),
/* harmony export */   v: () => (/* binding */ valueOrDefault),
/* harmony export */   w: () => (/* binding */ _scaleRangesChanged),
/* harmony export */   x: () => (/* binding */ isNumber),
/* harmony export */   y: () => (/* binding */ _parseObjectDataRadialScale),
/* harmony export */   z: () => (/* binding */ getRelativePosition)
/* harmony export */ });
/* harmony import */ var _kurkle_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @kurkle/color */ "./node_modules/@kurkle/color/dist/color.esm.js");
/*!
 * Chart.js v4.4.3
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */


/**
 * @namespace Chart.helpers
 */ /**
 * An empty function that can be used, for example, for optional callback.
 */ function noop() {
/* noop */ }
/**
 * Returns a unique id, sequentially generated from a global variable.
 */ const uid = (()=>{
    let id = 0;
    return ()=>id++;
})();
/**
 * Returns true if `value` is neither null nor undefined, else returns false.
 * @param value - The value to test.
 * @since 2.7.0
 */ function isNullOrUndef(value) {
    return value === null || typeof value === 'undefined';
}
/**
 * Returns true if `value` is an array (including typed arrays), else returns false.
 * @param value - The value to test.
 * @function
 */ function isArray(value) {
    if (Array.isArray && Array.isArray(value)) {
        return true;
    }
    const type = Object.prototype.toString.call(value);
    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {
        return true;
    }
    return false;
}
/**
 * Returns true if `value` is an object (excluding null), else returns false.
 * @param value - The value to test.
 * @since 2.7.0
 */ function isObject(value) {
    return value !== null && Object.prototype.toString.call(value) === '[object Object]';
}
/**
 * Returns true if `value` is a finite number, else returns false
 * @param value  - The value to test.
 */ function isNumberFinite(value) {
    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);
}
/**
 * Returns `value` if finite, else returns `defaultValue`.
 * @param value - The value to return if defined.
 * @param defaultValue - The value to return if `value` is not finite.
 */ function finiteOrDefault(value, defaultValue) {
    return isNumberFinite(value) ? value : defaultValue;
}
/**
 * Returns `value` if defined, else returns `defaultValue`.
 * @param value - The value to return if defined.
 * @param defaultValue - The value to return if `value` is undefined.
 */ function valueOrDefault(value, defaultValue) {
    return typeof value === 'undefined' ? defaultValue : value;
}
const toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;
const toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;
/**
 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
 * @param fn - The function to call.
 * @param args - The arguments with which `fn` should be called.
 * @param [thisArg] - The value of `this` provided for the call to `fn`.
 */ function callback(fn, args, thisArg) {
    if (fn && typeof fn.call === 'function') {
        return fn.apply(thisArg, args);
    }
}
function each(loopable, fn, thisArg, reverse) {
    let i, len, keys;
    if (isArray(loopable)) {
        len = loopable.length;
        if (reverse) {
            for(i = len - 1; i >= 0; i--){
                fn.call(thisArg, loopable[i], i);
            }
        } else {
            for(i = 0; i < len; i++){
                fn.call(thisArg, loopable[i], i);
            }
        }
    } else if (isObject(loopable)) {
        keys = Object.keys(loopable);
        len = keys.length;
        for(i = 0; i < len; i++){
            fn.call(thisArg, loopable[keys[i]], keys[i]);
        }
    }
}
/**
 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
 * @param a0 - The array to compare
 * @param a1 - The array to compare
 * @private
 */ function _elementsEqual(a0, a1) {
    let i, ilen, v0, v1;
    if (!a0 || !a1 || a0.length !== a1.length) {
        return false;
    }
    for(i = 0, ilen = a0.length; i < ilen; ++i){
        v0 = a0[i];
        v1 = a1[i];
        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
            return false;
        }
    }
    return true;
}
/**
 * Returns a deep copy of `source` without keeping references on objects and arrays.
 * @param source - The value to clone.
 */ function clone(source) {
    if (isArray(source)) {
        return source.map(clone);
    }
    if (isObject(source)) {
        const target = Object.create(null);
        const keys = Object.keys(source);
        const klen = keys.length;
        let k = 0;
        for(; k < klen; ++k){
            target[keys[k]] = clone(source[keys[k]]);
        }
        return target;
    }
    return source;
}
function isValidKey(key) {
    return [
        '__proto__',
        'prototype',
        'constructor'
    ].indexOf(key) === -1;
}
/**
 * The default merger when Chart.helpers.merge is called without merger option.
 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
 * @private
 */ function _merger(key, target, source, options) {
    if (!isValidKey(key)) {
        return;
    }
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        merge(tval, sval, options);
    } else {
        target[key] = clone(sval);
    }
}
function merge(target, source, options) {
    const sources = isArray(source) ? source : [
        source
    ];
    const ilen = sources.length;
    if (!isObject(target)) {
        return target;
    }
    options = options || {};
    const merger = options.merger || _merger;
    let current;
    for(let i = 0; i < ilen; ++i){
        current = sources[i];
        if (!isObject(current)) {
            continue;
        }
        const keys = Object.keys(current);
        for(let k = 0, klen = keys.length; k < klen; ++k){
            merger(keys[k], target, current, options);
        }
    }
    return target;
}
function mergeIf(target, source) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    return merge(target, source, {
        merger: _mergerIf
    });
}
/**
 * Merges source[key] in target[key] only if target[key] is undefined.
 * @private
 */ function _mergerIf(key, target, source) {
    if (!isValidKey(key)) {
        return;
    }
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) {
        mergeIf(tval, sval);
    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
        target[key] = clone(sval);
    }
}
/**
 * @private
 */ function _deprecated(scope, value, previous, current) {
    if (value !== undefined) {
        console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
    }
}
// resolveObjectKey resolver cache
const keyResolvers = {
    // Chart.helpers.core resolveObjectKey should resolve empty key to root object
    '': (v)=>v,
    // default resolvers
    x: (o)=>o.x,
    y: (o)=>o.y
};
/**
 * @private
 */ function _splitKey(key) {
    const parts = key.split('.');
    const keys = [];
    let tmp = '';
    for (const part of parts){
        tmp += part;
        if (tmp.endsWith('\\')) {
            tmp = tmp.slice(0, -1) + '.';
        } else {
            keys.push(tmp);
            tmp = '';
        }
    }
    return keys;
}
function _getKeyResolver(key) {
    const keys = _splitKey(key);
    return (obj)=>{
        for (const k of keys){
            if (k === '') {
                break;
            }
            obj = obj && obj[k];
        }
        return obj;
    };
}
function resolveObjectKey(obj, key) {
    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
    return resolver(obj);
}
/**
 * @private
 */ function _capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value)=>typeof value !== 'undefined';
const isFunction = (value)=>typeof value === 'function';
// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384
const setsEqual = (a, b)=>{
    if (a.size !== b.size) {
        return false;
    }
    for (const item of a){
        if (!b.has(item)) {
            return false;
        }
    }
    return true;
};
/**
 * @param e - The event
 * @private
 */ function _isClickEvent(e) {
    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';
}

/**
 * @alias Chart.helpers.math
 * @namespace
 */ const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function almostEquals(x, y, epsilon) {
    return Math.abs(x - y) < epsilon;
}
/**
 * Implementation of the nice number algorithm used in determining where axis labels will go
 */ function niceNum(range) {
    const roundedRange = Math.round(range);
    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
    const niceRange = Math.pow(10, Math.floor(log10(range)));
    const fraction = range / niceRange;
    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
    return niceFraction * niceRange;
}
/**
 * Returns an array of factors sorted from 1 to sqrt(value)
 * @private
 */ function _factorize(value) {
    const result = [];
    const sqrt = Math.sqrt(value);
    let i;
    for(i = 1; i < sqrt; i++){
        if (value % i === 0) {
            result.push(i);
            result.push(value / i);
        }
    }
    if (sqrt === (sqrt | 0)) {
        result.push(sqrt);
    }
    result.sort((a, b)=>a - b).pop();
    return result;
}
function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}
function almostWhole(x, epsilon) {
    const rounded = Math.round(x);
    return rounded - epsilon <= x && rounded + epsilon >= x;
}
/**
 * @private
 */ function _setMinAndMaxByKey(array, target, property) {
    let i, ilen, value;
    for(i = 0, ilen = array.length; i < ilen; i++){
        value = array[i][property];
        if (!isNaN(value)) {
            target.min = Math.min(target.min, value);
            target.max = Math.max(target.max, value);
        }
    }
}
function toRadians(degrees) {
    return degrees * (PI / 180);
}
function toDegrees(radians) {
    return radians * (180 / PI);
}
/**
 * Returns the number of decimal places
 * i.e. the number of digits after the decimal point, of the value of this Number.
 * @param x - A number.
 * @returns The number of decimal places.
 * @private
 */ function _decimalPlaces(x) {
    if (!isNumberFinite(x)) {
        return;
    }
    let e = 1;
    let p = 0;
    while(Math.round(x * e) / e !== x){
        e *= 10;
        p++;
    }
    return p;
}
// Gets the angle from vertical upright to the point about a centre.
function getAngleFromPoint(centrePoint, anglePoint) {
    const distanceFromXCenter = anglePoint.x - centrePoint.x;
    const distanceFromYCenter = anglePoint.y - centrePoint.y;
    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
    if (angle < -0.5 * PI) {
        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
    }
    return {
        angle,
        distance: radialDistanceFromCenter
    };
}
function distanceBetweenPoints(pt1, pt2) {
    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
/**
 * Shortest distance between angles, in either direction.
 * @private
 */ function _angleDiff(a, b) {
    return (a - b + PITAU) % TAU - PI;
}
/**
 * Normalize angle to be between 0 and 2*PI
 * @private
 */ function _normalizeAngle(a) {
    return (a % TAU + TAU) % TAU;
}
/**
 * @private
 */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
    const a = _normalizeAngle(angle);
    const s = _normalizeAngle(start);
    const e = _normalizeAngle(end);
    const angleToStart = _normalizeAngle(s - a);
    const angleToEnd = _normalizeAngle(e - a);
    const startToAngle = _normalizeAngle(a - s);
    const endToAngle = _normalizeAngle(a - e);
    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
}
/**
 * Limit `value` between `min` and `max`
 * @param value
 * @param min
 * @param max
 * @private
 */ function _limitValue(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
/**
 * @param {number} value
 * @private
 */ function _int16Range(value) {
    return _limitValue(value, -32768, 32767);
}
/**
 * @param value
 * @param start
 * @param end
 * @param [epsilon]
 * @private
 */ function _isBetween(value, start, end, epsilon = 1e-6) {
    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}

function _lookup(table, value, cmp) {
    cmp = cmp || ((index)=>table[index] < value);
    let hi = table.length - 1;
    let lo = 0;
    let mid;
    while(hi - lo > 1){
        mid = lo + hi >> 1;
        if (cmp(mid)) {
            lo = mid;
        } else {
            hi = mid;
        }
    }
    return {
        lo,
        hi
    };
}
/**
 * Binary search
 * @param table - the table search. must be sorted!
 * @param key - property name for the value in each entry
 * @param value - value to find
 * @param last - lookup last index
 * @private
 */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{
        const ti = table[index][key];
        return ti < value || ti === value && table[index + 1][key] === value;
    } : (index)=>table[index][key] < value);
/**
 * Reverse binary search
 * @param table - the table search. must be sorted!
 * @param key - property name for the value in each entry
 * @param value - value to find
 * @private
 */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);
/**
 * Return subset of `values` between `min` and `max` inclusive.
 * Values are assumed to be in sorted order.
 * @param values - sorted array of values
 * @param min - min value
 * @param max - max value
 */ function _filterBetween(values, min, max) {
    let start = 0;
    let end = values.length;
    while(start < end && values[start] < min){
        start++;
    }
    while(end > start && values[end - 1] > max){
        end--;
    }
    return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const arrayEvents = [
    'push',
    'pop',
    'shift',
    'splice',
    'unshift'
];
function listenArrayEvents(array, listener) {
    if (array._chartjs) {
        array._chartjs.listeners.push(listener);
        return;
    }
    Object.defineProperty(array, '_chartjs', {
        configurable: true,
        enumerable: false,
        value: {
            listeners: [
                listener
            ]
        }
    });
    arrayEvents.forEach((key)=>{
        const method = '_onData' + _capitalize(key);
        const base = array[key];
        Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value (...args) {
                const res = base.apply(this, args);
                array._chartjs.listeners.forEach((object)=>{
                    if (typeof object[method] === 'function') {
                        object[method](...args);
                    }
                });
                return res;
            }
        });
    });
}
function unlistenArrayEvents(array, listener) {
    const stub = array._chartjs;
    if (!stub) {
        return;
    }
    const listeners = stub.listeners;
    const index = listeners.indexOf(listener);
    if (index !== -1) {
        listeners.splice(index, 1);
    }
    if (listeners.length > 0) {
        return;
    }
    arrayEvents.forEach((key)=>{
        delete array[key];
    });
    delete array._chartjs;
}
/**
 * @param items
 */ function _arrayUnique(items) {
    const set = new Set(items);
    if (set.size === items.length) {
        return items;
    }
    return Array.from(set);
}

function fontString(pixelSize, fontStyle, fontFamily) {
    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
}
/**
* Request animation polyfill
*/ const requestAnimFrame = function() {
    if (typeof window === 'undefined') {
        return function(callback) {
            return callback();
        };
    }
    return window.requestAnimationFrame;
}();
/**
 * Throttles calling `fn` once per animation frame
 * Latest arguments are used on the actual call
 */ function throttled(fn, thisArg) {
    let argsToUse = [];
    let ticking = false;
    return function(...args) {
        // Save the args for use later
        argsToUse = args;
        if (!ticking) {
            ticking = true;
            requestAnimFrame.call(window, ()=>{
                ticking = false;
                fn.apply(thisArg, argsToUse);
            });
        }
    };
}
/**
 * Debounces calling `fn` for `delay` ms
 */ function debounce(fn, delay) {
    let timeout;
    return function(...args) {
        if (delay) {
            clearTimeout(timeout);
            timeout = setTimeout(fn, delay, args);
        } else {
            fn.apply(this, args);
        }
        return delay;
    };
}
/**
 * Converts 'start' to 'left', 'end' to 'right' and others to 'center'
 * @private
 */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';
/**
 * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`
 * @private
 */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;
/**
 * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`
 * @private
 */ const _textX = (align, left, right, rtl)=>{
    const check = rtl ? 'left' : 'right';
    return align === check ? right : align === 'center' ? (left + right) / 2 : left;
};
/**
 * Return start and count of visible points.
 * @private
 */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
    const pointCount = points.length;
    let start = 0;
    let count = pointCount;
    if (meta._sorted) {
        const { iScale , _parsed  } = meta;
        const axis = iScale.axis;
        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();
        if (minDefined) {
            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed
            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey
            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);
        }
        if (maxDefined) {
            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed
            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey
            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;
        } else {
            count = pointCount - start;
        }
    }
    return {
        start,
        count
    };
}
/**
 * Checks if the scale ranges have changed.
 * @param {object} meta - dataset meta.
 * @returns {boolean}
 * @private
 */ function _scaleRangesChanged(meta) {
    const { xScale , yScale , _scaleRanges  } = meta;
    const newRanges = {
        xmin: xScale.min,
        xmax: xScale.max,
        ymin: yScale.min,
        ymax: yScale.max
    };
    if (!_scaleRanges) {
        meta._scaleRanges = newRanges;
        return true;
    }
    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
    Object.assign(_scaleRanges, newRanges);
    return changed;
}

const atEdge = (t)=>t === 0 || t === 1;
const elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
const elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
/**
 * Easing functions adapted from Robert Penner's easing equations.
 * @namespace Chart.helpers.easing.effects
 * @see http://www.robertpenner.com/easing/
 */ const effects = {
    linear: (t)=>t,
    easeInQuad: (t)=>t * t,
    easeOutQuad: (t)=>-t * (t - 2),
    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),
    easeInCubic: (t)=>t * t * t,
    easeOutCubic: (t)=>(t -= 1) * t * t + 1,
    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),
    easeInQuart: (t)=>t * t * t * t,
    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),
    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),
    easeInQuint: (t)=>t * t * t * t * t,
    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,
    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),
    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,
    easeOutSine: (t)=>Math.sin(t * HALF_PI),
    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),
    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),
    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,
    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),
    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),
    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
    easeInOutElastic (t) {
        const s = 0.1125;
        const p = 0.45;
        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
    },
    easeInBack (t) {
        const s = 1.70158;
        return t * t * ((s + 1) * t - s);
    },
    easeOutBack (t) {
        const s = 1.70158;
        return (t -= 1) * t * ((s + 1) * t + s) + 1;
    },
    easeInOutBack (t) {
        let s = 1.70158;
        if ((t /= 0.5) < 1) {
            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
        }
        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
    },
    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),
    easeOutBounce (t) {
        const m = 7.5625;
        const d = 2.75;
        if (t < 1 / d) {
            return m * t * t;
        }
        if (t < 2 / d) {
            return m * (t -= 1.5 / d) * t + 0.75;
        }
        if (t < 2.5 / d) {
            return m * (t -= 2.25 / d) * t + 0.9375;
        }
        return m * (t -= 2.625 / d) * t + 0.984375;
    },
    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5
};

function isPatternOrGradient(value) {
    if (value && typeof value === 'object') {
        const type = value.toString();
        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';
    }
    return false;
}
function color(value) {
    return isPatternOrGradient(value) ? value : new _kurkle_color__WEBPACK_IMPORTED_MODULE_0__.Color(value);
}
function getHoverColor(value) {
    return isPatternOrGradient(value) ? value : new _kurkle_color__WEBPACK_IMPORTED_MODULE_0__.Color(value).saturate(0.5).darken(0.1).hexString();
}

const numbers = [
    'x',
    'y',
    'borderWidth',
    'radius',
    'tension'
];
const colors = [
    'color',
    'borderColor',
    'backgroundColor'
];
function applyAnimationsDefaults(defaults) {
    defaults.set('animation', {
        delay: undefined,
        duration: 1000,
        easing: 'easeOutQuart',
        fn: undefined,
        from: undefined,
        loop: undefined,
        to: undefined,
        type: undefined
    });
    defaults.describe('animation', {
        _fallback: false,
        _indexable: false,
        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'
    });
    defaults.set('animations', {
        colors: {
            type: 'color',
            properties: colors
        },
        numbers: {
            type: 'number',
            properties: numbers
        }
    });
    defaults.describe('animations', {
        _fallback: 'animation'
    });
    defaults.set('transitions', {
        active: {
            animation: {
                duration: 400
            }
        },
        resize: {
            animation: {
                duration: 0
            }
        },
        show: {
            animations: {
                colors: {
                    from: 'transparent'
                },
                visible: {
                    type: 'boolean',
                    duration: 0
                }
            }
        },
        hide: {
            animations: {
                colors: {
                    to: 'transparent'
                },
                visible: {
                    type: 'boolean',
                    easing: 'linear',
                    fn: (v)=>v | 0
                }
            }
        }
    });
}

function applyLayoutsDefaults(defaults) {
    defaults.set('layout', {
        autoPadding: true,
        padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
        }
    });
}

const intlCache = new Map();
function getNumberFormat(locale, options) {
    options = options || {};
    const cacheKey = locale + JSON.stringify(options);
    let formatter = intlCache.get(cacheKey);
    if (!formatter) {
        formatter = new Intl.NumberFormat(locale, options);
        intlCache.set(cacheKey, formatter);
    }
    return formatter;
}
function formatNumber(num, locale, options) {
    return getNumberFormat(locale, options).format(num);
}

const formatters = {
 values (value) {
        return isArray(value) ?  value : '' + value;
    },
 numeric (tickValue, index, ticks) {
        if (tickValue === 0) {
            return '0';
        }
        const locale = this.chart.options.locale;
        let notation;
        let delta = tickValue;
        if (ticks.length > 1) {
            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
            if (maxTick < 1e-4 || maxTick > 1e+15) {
                notation = 'scientific';
            }
            delta = calculateDelta(tickValue, ticks);
        }
        const logDelta = log10(Math.abs(delta));
        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
        const options = {
            notation,
            minimumFractionDigits: numDecimal,
            maximumFractionDigits: numDecimal
        };
        Object.assign(options, this.options.ticks.format);
        return formatNumber(tickValue, locale, options);
    },
 logarithmic (tickValue, index, ticks) {
        if (tickValue === 0) {
            return '0';
        }
        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
        if ([
            1,
            2,
            3,
            5,
            10,
            15
        ].includes(remain) || index > 0.8 * ticks.length) {
            return formatters.numeric.call(this, tickValue, index, ticks);
        }
        return '';
    }
};
function calculateDelta(tickValue, ticks) {
    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
        delta = tickValue - Math.floor(tickValue);
    }
    return delta;
}
 var Ticks = {
    formatters
};

function applyScaleDefaults(defaults) {
    defaults.set('scale', {
        display: true,
        offset: false,
        reverse: false,
        beginAtZero: false,
 bounds: 'ticks',
        clip: true,
 grace: 0,
        grid: {
            display: true,
            lineWidth: 1,
            drawOnChartArea: true,
            drawTicks: true,
            tickLength: 8,
            tickWidth: (_ctx, options)=>options.lineWidth,
            tickColor: (_ctx, options)=>options.color,
            offset: false
        },
        border: {
            display: true,
            dash: [],
            dashOffset: 0.0,
            width: 1
        },
        title: {
            display: false,
            text: '',
            padding: {
                top: 4,
                bottom: 4
            }
        },
        ticks: {
            minRotation: 0,
            maxRotation: 50,
            mirror: false,
            textStrokeWidth: 0,
            textStrokeColor: '',
            padding: 3,
            display: true,
            autoSkip: true,
            autoSkipPadding: 3,
            labelOffset: 0,
            callback: Ticks.formatters.values,
            minor: {},
            major: {},
            align: 'center',
            crossAlign: 'near',
            showLabelBackdrop: false,
            backdropColor: 'rgba(255, 255, 255, 0.75)',
            backdropPadding: 2
        }
    });
    defaults.route('scale.ticks', 'color', '', 'color');
    defaults.route('scale.grid', 'color', '', 'borderColor');
    defaults.route('scale.border', 'color', '', 'borderColor');
    defaults.route('scale.title', 'color', '', 'color');
    defaults.describe('scale', {
        _fallback: false,
        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',
        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'
    });
    defaults.describe('scales', {
        _fallback: 'scale'
    });
    defaults.describe('scale.ticks', {
        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',
        _indexable: (name)=>name !== 'backdropPadding'
    });
}

const overrides = Object.create(null);
const descriptors = Object.create(null);
 function getScope$1(node, key) {
    if (!key) {
        return node;
    }
    const keys = key.split('.');
    for(let i = 0, n = keys.length; i < n; ++i){
        const k = keys[i];
        node = node[k] || (node[k] = Object.create(null));
    }
    return node;
}
function set(root, scope, values) {
    if (typeof scope === 'string') {
        return merge(getScope$1(root, scope), values);
    }
    return merge(getScope$1(root, ''), scope);
}
 class Defaults {
    constructor(_descriptors, _appliers){
        this.animation = undefined;
        this.backgroundColor = 'rgba(0,0,0,0.1)';
        this.borderColor = 'rgba(0,0,0,0.1)';
        this.color = '#666';
        this.datasets = {};
        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();
        this.elements = {};
        this.events = [
            'mousemove',
            'mouseout',
            'click',
            'touchstart',
            'touchmove'
        ];
        this.font = {
            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
            size: 12,
            style: 'normal',
            lineHeight: 1.2,
            weight: null
        };
        this.hover = {};
        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);
        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);
        this.hoverColor = (ctx, options)=>getHoverColor(options.color);
        this.indexAxis = 'x';
        this.interaction = {
            mode: 'nearest',
            intersect: true,
            includeInvisible: false
        };
        this.maintainAspectRatio = true;
        this.onHover = null;
        this.onClick = null;
        this.parsing = true;
        this.plugins = {};
        this.responsive = true;
        this.scale = undefined;
        this.scales = {};
        this.showLine = true;
        this.drawActiveElementsOnTop = true;
        this.describe(_descriptors);
        this.apply(_appliers);
    }
 set(scope, values) {
        return set(this, scope, values);
    }
 get(scope) {
        return getScope$1(this, scope);
    }
 describe(scope, values) {
        return set(descriptors, scope, values);
    }
    override(scope, values) {
        return set(overrides, scope, values);
    }
 route(scope, name, targetScope, targetName) {
        const scopeObject = getScope$1(this, scope);
        const targetScopeObject = getScope$1(this, targetScope);
        const privateName = '_' + name;
        Object.defineProperties(scopeObject, {
            [privateName]: {
                value: scopeObject[name],
                writable: true
            },
            [name]: {
                enumerable: true,
                get () {
                    const local = this[privateName];
                    const target = targetScopeObject[targetName];
                    if (isObject(local)) {
                        return Object.assign({}, target, local);
                    }
                    return valueOrDefault(local, target);
                },
                set (value) {
                    this[privateName] = value;
                }
            }
        });
    }
    apply(appliers) {
        appliers.forEach((apply)=>apply(this));
    }
}
var defaults = /* #__PURE__ */ new Defaults({
    _scriptable: (name)=>!name.startsWith('on'),
    _indexable: (name)=>name !== 'events',
    hover: {
        _fallback: 'interaction'
    },
    interaction: {
        _scriptable: false,
        _indexable: false
    }
}, [
    applyAnimationsDefaults,
    applyLayoutsDefaults,
    applyScaleDefaults
]);

/**
 * Converts the given font object into a CSS font string.
 * @param font - A font object.
 * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
 * @private
 */ function toFontString(font) {
    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
        return null;
    }
    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;
}
/**
 * @private
 */ function _measureText(ctx, data, gc, longest, string) {
    let textWidth = data[string];
    if (!textWidth) {
        textWidth = data[string] = ctx.measureText(string).width;
        gc.push(string);
    }
    if (textWidth > longest) {
        longest = textWidth;
    }
    return longest;
}
/**
 * @private
 */ // eslint-disable-next-line complexity
function _longestText(ctx, font, arrayOfThings, cache) {
    cache = cache || {};
    let data = cache.data = cache.data || {};
    let gc = cache.garbageCollect = cache.garbageCollect || [];
    if (cache.font !== font) {
        data = cache.data = {};
        gc = cache.garbageCollect = [];
        cache.font = font;
    }
    ctx.save();
    ctx.font = font;
    let longest = 0;
    const ilen = arrayOfThings.length;
    let i, j, jlen, thing, nestedThing;
    for(i = 0; i < ilen; i++){
        thing = arrayOfThings[i];
        // Undefined strings and arrays should not be measured
        if (thing !== undefined && thing !== null && !isArray(thing)) {
            longest = _measureText(ctx, data, gc, longest, thing);
        } else if (isArray(thing)) {
            // if it is an array lets measure each element
            // to do maybe simplify this function a bit so we can do this more recursively?
            for(j = 0, jlen = thing.length; j < jlen; j++){
                nestedThing = thing[j];
                // Undefined strings and arrays should not be measured
                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {
                    longest = _measureText(ctx, data, gc, longest, nestedThing);
                }
            }
        }
    }
    ctx.restore();
    const gcLen = gc.length / 2;
    if (gcLen > arrayOfThings.length) {
        for(i = 0; i < gcLen; i++){
            delete data[gc[i]];
        }
        gc.splice(0, gcLen);
    }
    return longest;
}
/**
 * Returns the aligned pixel value to avoid anti-aliasing blur
 * @param chart - The chart instance.
 * @param pixel - A pixel value.
 * @param width - The width of the element.
 * @returns The aligned pixel value.
 * @private
 */ function _alignPixel(chart, pixel, width) {
    const devicePixelRatio = chart.currentDevicePixelRatio;
    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
/**
 * Clears the entire canvas.
 */ function clearCanvas(canvas, ctx) {
    if (!ctx && !canvas) {
        return;
    }
    ctx = ctx || canvas.getContext('2d');
    ctx.save();
    // canvas.width and canvas.height do not consider the canvas transform,
    // while clearRect does
    ctx.resetTransform();
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
}
function drawPoint(ctx, options, x, y) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    drawPointLegend(ctx, options, x, y, null);
}
// eslint-disable-next-line complexity
function drawPointLegend(ctx, options, x, y, w) {
    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
    const style = options.pointStyle;
    const rotation = options.rotation;
    const radius = options.radius;
    let rad = (rotation || 0) * RAD_PER_DEG;
    if (style && typeof style === 'object') {
        type = style.toString();
        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
            ctx.save();
            ctx.translate(x, y);
            ctx.rotate(rad);
            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
            ctx.restore();
            return;
        }
    }
    if (isNaN(radius) || radius <= 0) {
        return;
    }
    ctx.beginPath();
    switch(style){
        // Default includes circle
        default:
            if (w) {
                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
            } else {
                ctx.arc(x, y, radius, 0, TAU);
            }
            ctx.closePath();
            break;
        case 'triangle':
            width = w ? w / 2 : radius;
            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            rad += TWO_THIRDS_PI;
            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            rad += TWO_THIRDS_PI;
            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            ctx.closePath();
            break;
        case 'rectRounded':
            // NOTE: the rounded rect implementation changed to use `arc` instead of
            // `quadraticCurveTo` since it generates better results when rect is
            // almost a circle. 0.516 (instead of 0.5) produces results with visually
            // closer proportion to the previous impl and it is inscribed in the
            // circle with `radius`. For more details, see the following PRs:
            // https://github.com/chartjs/Chart.js/issues/5597
            // https://github.com/chartjs/Chart.js/issues/5858
            cornerRadius = radius * 0.516;
            size = radius - cornerRadius;
            xOffset = Math.cos(rad + QUARTER_PI) * size;
            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
            yOffset = Math.sin(rad + QUARTER_PI) * size;
            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);
            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);
            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
            ctx.closePath();
            break;
        case 'rect':
            if (!rotation) {
                size = Math.SQRT1_2 * radius;
                width = w ? w / 2 : size;
                ctx.rect(x - width, y - size, 2 * width, 2 * size);
                break;
            }
            rad += QUARTER_PI;
        /* falls through */ case 'rectRot':
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            ctx.closePath();
            break;
        case 'crossRot':
            rad += QUARTER_PI;
        /* falls through */ case 'cross':
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            break;
        case 'star':
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            rad += QUARTER_PI;
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            break;
        case 'line':
            xOffset = w ? w / 2 : Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            break;
        case 'dash':
            ctx.moveTo(x, y);
            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);
            break;
        case false:
            ctx.closePath();
            break;
    }
    ctx.fill();
    if (options.borderWidth > 0) {
        ctx.stroke();
    }
}
/**
 * Returns true if the point is inside the rectangle
 * @param point - The point to test
 * @param area - The rectangle
 * @param margin - allowed margin
 * @private
 */ function _isPointInArea(point, area, margin) {
    margin = margin || 0.5; // margin - default is to match rounded decimals
    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
    ctx.save();
    ctx.beginPath();
    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
    ctx.clip();
}
function unclipArea(ctx) {
    ctx.restore();
}
/**
 * @private
 */ function _steppedLineTo(ctx, previous, target, flip, mode) {
    if (!previous) {
        return ctx.lineTo(target.x, target.y);
    }
    if (mode === 'middle') {
        const midpoint = (previous.x + target.x) / 2.0;
        ctx.lineTo(midpoint, previous.y);
        ctx.lineTo(midpoint, target.y);
    } else if (mode === 'after' !== !!flip) {
        ctx.lineTo(previous.x, target.y);
    } else {
        ctx.lineTo(target.x, previous.y);
    }
    ctx.lineTo(target.x, target.y);
}
/**
 * @private
 */ function _bezierCurveTo(ctx, previous, target, flip) {
    if (!previous) {
        return ctx.lineTo(target.x, target.y);
    }
    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function setRenderOpts(ctx, opts) {
    if (opts.translation) {
        ctx.translate(opts.translation[0], opts.translation[1]);
    }
    if (!isNullOrUndef(opts.rotation)) {
        ctx.rotate(opts.rotation);
    }
    if (opts.color) {
        ctx.fillStyle = opts.color;
    }
    if (opts.textAlign) {
        ctx.textAlign = opts.textAlign;
    }
    if (opts.textBaseline) {
        ctx.textBaseline = opts.textBaseline;
    }
}
function decorateText(ctx, x, y, line, opts) {
    if (opts.strikethrough || opts.underline) {
        /**
     * Now that IE11 support has been dropped, we can use more
     * of the TextMetrics object. The actual bounding boxes
     * are unflagged in Chrome, Firefox, Edge, and Safari so they
     * can be safely used.
     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility
     */ const metrics = ctx.measureText(line);
        const left = x - metrics.actualBoundingBoxLeft;
        const right = x + metrics.actualBoundingBoxRight;
        const top = y - metrics.actualBoundingBoxAscent;
        const bottom = y + metrics.actualBoundingBoxDescent;
        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
        ctx.strokeStyle = ctx.fillStyle;
        ctx.beginPath();
        ctx.lineWidth = opts.decorationWidth || 2;
        ctx.moveTo(left, yDecoration);
        ctx.lineTo(right, yDecoration);
        ctx.stroke();
    }
}
function drawBackdrop(ctx, opts) {
    const oldColor = ctx.fillStyle;
    ctx.fillStyle = opts.color;
    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
    ctx.fillStyle = oldColor;
}
/**
 * Render text onto the canvas
 */ function renderText(ctx, text, x, y, font, opts = {}) {
    const lines = isArray(text) ? text : [
        text
    ];
    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';
    let i, line;
    ctx.save();
    ctx.font = font.string;
    setRenderOpts(ctx, opts);
    for(i = 0; i < lines.length; ++i){
        line = lines[i];
        if (opts.backdrop) {
            drawBackdrop(ctx, opts.backdrop);
        }
        if (stroke) {
            if (opts.strokeColor) {
                ctx.strokeStyle = opts.strokeColor;
            }
            if (!isNullOrUndef(opts.strokeWidth)) {
                ctx.lineWidth = opts.strokeWidth;
            }
            ctx.strokeText(line, x, y, opts.maxWidth);
        }
        ctx.fillText(line, x, y, opts.maxWidth);
        decorateText(ctx, x, y, line, opts);
        y += Number(font.lineHeight);
    }
    ctx.restore();
}
/**
 * Add a path of a rectangle with rounded corners to the current sub-path
 * @param ctx - Context
 * @param rect - Bounding rect
 */ function addRoundedRectPath(ctx, rect) {
    const { x , y , w , h , radius  } = rect;
    // top left arc
    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
    // line from top left to bottom left
    ctx.lineTo(x, y + h - radius.bottomLeft);
    // bottom left arc
    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
    // line from bottom left to bottom right
    ctx.lineTo(x + w - radius.bottomRight, y + h);
    // bottom right arc
    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
    // line from bottom right to top right
    ctx.lineTo(x + w, y + radius.topRight);
    // top right arc
    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
    // line from top right to top left
    ctx.lineTo(x + radius.topLeft, y);
}

const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
/**
 * @alias Chart.helpers.options
 * @namespace
 */ /**
 * Converts the given line height `value` in pixels for a specific font `size`.
 * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
 * @param size - The font size (in pixels) used to resolve relative `value`.
 * @returns The effective line height in pixels (size * 1.2 if value is invalid).
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
 * @since 2.7.0
 */ function toLineHeight(value, size) {
    const matches = ('' + value).match(LINE_HEIGHT);
    if (!matches || matches[1] === 'normal') {
        return size * 1.2;
    }
    value = +matches[2];
    switch(matches[3]){
        case 'px':
            return value;
        case '%':
            value /= 100;
            break;
    }
    return size * value;
}
const numberOrZero = (v)=>+v || 0;
function _readValueToProps(value, props) {
    const ret = {};
    const objProps = isObject(props);
    const keys = objProps ? Object.keys(props) : props;
    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;
    for (const prop of keys){
        ret[prop] = numberOrZero(read(prop));
    }
    return ret;
}
/**
 * Converts the given value into a TRBL object.
 * @param value - If a number, set the value to all TRBL component,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 *  x / y are shorthands for same value for left/right and top/bottom.
 * @returns The padding values (top, right, bottom, left)
 * @since 3.0.0
 */ function toTRBL(value) {
    return _readValueToProps(value, {
        top: 'y',
        right: 'x',
        bottom: 'y',
        left: 'x'
    });
}
/**
 * Converts the given value into a TRBL corners object (similar with css border-radius).
 * @param value - If a number, set the value to all TRBL corner components,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)
 * @since 3.0.0
 */ function toTRBLCorners(value) {
    return _readValueToProps(value, [
        'topLeft',
        'topRight',
        'bottomLeft',
        'bottomRight'
    ]);
}
/**
 * Converts the given value into a padding object with pre-computed width/height.
 * @param value - If a number, set the value to all TRBL component,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 *  x / y are shorthands for same value for left/right and top/bottom.
 * @returns The padding values (top, right, bottom, left, width, height)
 * @since 2.7.0
 */ function toPadding(value) {
    const obj = toTRBL(value);
    obj.width = obj.left + obj.right;
    obj.height = obj.top + obj.bottom;
    return obj;
}
/**
 * Parses font options and returns the font object.
 * @param options - A object that contains font options to be parsed.
 * @param fallback - A object that contains fallback font options.
 * @return The font object.
 * @private
 */ function toFont(options, fallback) {
    options = options || {};
    fallback = fallback || defaults.font;
    let size = valueOrDefault(options.size, fallback.size);
    if (typeof size === 'string') {
        size = parseInt(size, 10);
    }
    let style = valueOrDefault(options.style, fallback.style);
    if (style && !('' + style).match(FONT_STYLE)) {
        console.warn('Invalid font style specified: "' + style + '"');
        style = undefined;
    }
    const font = {
        family: valueOrDefault(options.family, fallback.family),
        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
        size,
        style,
        weight: valueOrDefault(options.weight, fallback.weight),
        string: ''
    };
    font.string = toFontString(font);
    return font;
}
/**
 * Evaluates the given `inputs` sequentially and returns the first defined value.
 * @param inputs - An array of values, falling back to the last value.
 * @param context - If defined and the current value is a function, the value
 * is called with `context` as first argument and the result becomes the new input.
 * @param index - If defined and the current value is an array, the value
 * at `index` become the new input.
 * @param info - object to return information about resolution in
 * @param info.cacheable - Will be set to `false` if option is not cacheable.
 * @since 2.7.0
 */ function resolve(inputs, context, index, info) {
    let cacheable = true;
    let i, ilen, value;
    for(i = 0, ilen = inputs.length; i < ilen; ++i){
        value = inputs[i];
        if (value === undefined) {
            continue;
        }
        if (context !== undefined && typeof value === 'function') {
            value = value(context);
            cacheable = false;
        }
        if (index !== undefined && isArray(value)) {
            value = value[index % value.length];
            cacheable = false;
        }
        if (value !== undefined) {
            if (info && !cacheable) {
                info.cacheable = false;
            }
            return value;
        }
    }
}
/**
 * @param minmax
 * @param grace
 * @param beginAtZero
 * @private
 */ function _addGrace(minmax, grace, beginAtZero) {
    const { min , max  } = minmax;
    const change = toDimension(grace, (max - min) / 2);
    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;
    return {
        min: keepZero(min, -Math.abs(change)),
        max: keepZero(max, change)
    };
}
function createContext(parentContext, context) {
    return Object.assign(Object.create(parentContext), context);
}

/**
 * Creates a Proxy for resolving raw values for options.
 * @param scopes - The option scopes to look for values, in resolution order
 * @param prefixes - The prefixes for values, in resolution order.
 * @param rootScopes - The root option scopes
 * @param fallback - Parent scopes fallback
 * @param getTarget - callback for getting the target for changed values
 * @returns Proxy
 * @private
 */ function _createResolver(scopes, prefixes = [
    ''
], rootScopes, fallback, getTarget = ()=>scopes[0]) {
    const finalRootScopes = rootScopes || scopes;
    if (typeof fallback === 'undefined') {
        fallback = _resolve('_fallback', scopes);
    }
    const cache = {
        [Symbol.toStringTag]: 'Object',
        _cacheable: true,
        _scopes: scopes,
        _rootScopes: finalRootScopes,
        _fallback: fallback,
        _getTarget: getTarget,
        override: (scope)=>_createResolver([
                scope,
                ...scopes
            ], prefixes, finalRootScopes, fallback)
    };
    return new Proxy(cache, {
        /**
     * A trap for the delete operator.
     */ deleteProperty (target, prop) {
            delete target[prop]; // remove from cache
            delete target._keys; // remove cached keys
            delete scopes[0][prop]; // remove from top level scope
            return true;
        },
        /**
     * A trap for getting property values.
     */ get (target, prop) {
            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));
        },
        /**
     * A trap for Object.getOwnPropertyDescriptor.
     * Also used by Object.hasOwnProperty.
     */ getOwnPropertyDescriptor (target, prop) {
            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
        },
        /**
     * A trap for Object.getPrototypeOf.
     */ getPrototypeOf () {
            return Reflect.getPrototypeOf(scopes[0]);
        },
        /**
     * A trap for the in operator.
     */ has (target, prop) {
            return getKeysFromAllScopes(target).includes(prop);
        },
        /**
     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
     */ ownKeys (target) {
            return getKeysFromAllScopes(target);
        },
        /**
     * A trap for setting property values.
     */ set (target, prop, value) {
            const storage = target._storage || (target._storage = getTarget());
            target[prop] = storage[prop] = value; // set to top level scope + cache
            delete target._keys; // remove cached keys
            return true;
        }
    });
}
/**
 * Returns an Proxy for resolving option values with context.
 * @param proxy - The Proxy returned by `_createResolver`
 * @param context - Context object for scriptable/indexable options
 * @param subProxy - The proxy provided for scriptable options
 * @param descriptorDefaults - Defaults for descriptors
 * @private
 */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {
    const cache = {
        _cacheable: false,
        _proxy: proxy,
        _context: context,
        _subProxy: subProxy,
        _stack: new Set(),
        _descriptors: _descriptors(proxy, descriptorDefaults),
        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),
        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
    };
    return new Proxy(cache, {
        /**
     * A trap for the delete operator.
     */ deleteProperty (target, prop) {
            delete target[prop]; // remove from cache
            delete proxy[prop]; // remove from proxy
            return true;
        },
        /**
     * A trap for getting property values.
     */ get (target, prop, receiver) {
            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));
        },
        /**
     * A trap for Object.getOwnPropertyDescriptor.
     * Also used by Object.hasOwnProperty.
     */ getOwnPropertyDescriptor (target, prop) {
            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
                enumerable: true,
                configurable: true
            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
        },
        /**
     * A trap for Object.getPrototypeOf.
     */ getPrototypeOf () {
            return Reflect.getPrototypeOf(proxy);
        },
        /**
     * A trap for the in operator.
     */ has (target, prop) {
            return Reflect.has(proxy, prop);
        },
        /**
     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
     */ ownKeys () {
            return Reflect.ownKeys(proxy);
        },
        /**
     * A trap for setting property values.
     */ set (target, prop, value) {
            proxy[prop] = value; // set to proxy
            delete target[prop]; // remove from cache
            return true;
        }
    });
}
/**
 * @private
 */ function _descriptors(proxy, defaults = {
    scriptable: true,
    indexable: true
}) {
    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;
    return {
        allKeys: _allKeys,
        scriptable: _scriptable,
        indexable: _indexable,
        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,
        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable
    };
}
const readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;
const needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve) {
    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {
        return target[prop];
    }
    const value = resolve();
    // cache the resolved value
    target[prop] = value;
    return value;
}
function _resolveWithContext(target, prop, receiver) {
    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;
    let value = _proxy[prop]; // resolve from proxy
    // resolve with context
    if (isFunction(value) && descriptors.isScriptable(prop)) {
        value = _resolveScriptable(prop, value, target, receiver);
    }
    if (isArray(value) && value.length) {
        value = _resolveArray(prop, value, target, descriptors.isIndexable);
    }
    if (needsSubResolver(prop, value)) {
        // if the resolved value is an object, create a sub resolver for it
        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
    }
    return value;
}
function _resolveScriptable(prop, getValue, target, receiver) {
    const { _proxy , _context , _subProxy , _stack  } = target;
    if (_stack.has(prop)) {
        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);
    }
    _stack.add(prop);
    let value = getValue(_context, _subProxy || receiver);
    _stack.delete(prop);
    if (needsSubResolver(prop, value)) {
        // When scriptable option returns an object, create a resolver on that.
        value = createSubResolver(_proxy._scopes, _proxy, prop, value);
    }
    return value;
}
function _resolveArray(prop, value, target, isIndexable) {
    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;
    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {
        return value[_context.index % value.length];
    } else if (isObject(value[0])) {
        // Array of objects, return array or resolvers
        const arr = value;
        const scopes = _proxy._scopes.filter((s)=>s !== arr);
        value = [];
        for (const item of arr){
            const resolver = createSubResolver(scopes, _proxy, prop, item);
            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
        }
    }
    return value;
}
function resolveFallback(fallback, prop, value) {
    return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;
function addScopes(set, parentScopes, key, parentFallback, value) {
    for (const parent of parentScopes){
        const scope = getScope(key, parent);
        if (scope) {
            set.add(scope);
            const fallback = resolveFallback(scope._fallback, key, value);
            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {
                // When we reach the descriptor that defines a new _fallback, return that.
                // The fallback will resume to that new scope.
                return fallback;
            }
        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {
            // Fallback to `false` results to `false`, when falling back to different key.
            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`
            return null;
        }
    }
    return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
    const rootScopes = resolver._rootScopes;
    const fallback = resolveFallback(resolver._fallback, prop, value);
    const allScopes = [
        ...parentScopes,
        ...rootScopes
    ];
    const set = new Set();
    set.add(value);
    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);
    if (key === null) {
        return false;
    }
    if (typeof fallback !== 'undefined' && fallback !== prop) {
        key = addScopesFromKey(set, allScopes, fallback, key, value);
        if (key === null) {
            return false;
        }
    }
    return _createResolver(Array.from(set), [
        ''
    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set, allScopes, key, fallback, item) {
    while(key){
        key = addScopes(set, allScopes, key, fallback, item);
    }
    return key;
}
function subGetTarget(resolver, prop, value) {
    const parent = resolver._getTarget();
    if (!(prop in parent)) {
        parent[prop] = {};
    }
    const target = parent[prop];
    if (isArray(target) && isObject(value)) {
        // For array of objects, the object is used to store updated values
        return value;
    }
    return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
    let value;
    for (const prefix of prefixes){
        value = _resolve(readKey(prefix, prop), scopes);
        if (typeof value !== 'undefined') {
            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
        }
    }
}
function _resolve(key, scopes) {
    for (const scope of scopes){
        if (!scope) {
            continue;
        }
        const value = scope[key];
        if (typeof value !== 'undefined') {
            return value;
        }
    }
}
function getKeysFromAllScopes(target) {
    let keys = target._keys;
    if (!keys) {
        keys = target._keys = resolveKeysFromAllScopes(target._scopes);
    }
    return keys;
}
function resolveKeysFromAllScopes(scopes) {
    const set = new Set();
    for (const scope of scopes){
        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){
            set.add(key);
        }
    }
    return Array.from(set);
}
function _parseObjectDataRadialScale(meta, data, start, count) {
    const { iScale  } = meta;
    const { key ='r'  } = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for(i = 0, ilen = count; i < ilen; ++i){
        index = i + start;
        item = data[index];
        parsed[i] = {
            r: iScale.parse(resolveObjectKey(item, key), index)
        };
    }
    return parsed;
}

const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];
const getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';
function splineCurve(firstPoint, middlePoint, afterPoint, t) {
    // Props to Rob Spencer at scaled innovation for his post on splining between points
    // http://scaledinnovation.com/analytics/splines/aboutSplines.html
    // This function must also respect "skipped" points
    const previous = firstPoint.skip ? middlePoint : firstPoint;
    const current = middlePoint;
    const next = afterPoint.skip ? middlePoint : afterPoint;
    const d01 = distanceBetweenPoints(current, previous);
    const d12 = distanceBetweenPoints(next, current);
    let s01 = d01 / (d01 + d12);
    let s12 = d12 / (d01 + d12);
    // If all points are the same, s01 & s02 will be inf
    s01 = isNaN(s01) ? 0 : s01;
    s12 = isNaN(s12) ? 0 : s12;
    const fa = t * s01; // scaling factor for triangle Ta
    const fb = t * s12;
    return {
        previous: {
            x: current.x - fa * (next.x - previous.x),
            y: current.y - fa * (next.y - previous.y)
        },
        next: {
            x: current.x + fb * (next.x - previous.x),
            y: current.y + fb * (next.y - previous.y)
        }
    };
}
/**
 * Adjust tangents to ensure monotonic properties
 */ function monotoneAdjust(points, deltaK, mK) {
    const pointsLen = points.length;
    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(let i = 0; i < pointsLen - 1; ++i){
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent || !pointAfter) {
            continue;
        }
        if (almostEquals(deltaK[i], 0, EPSILON)) {
            mK[i] = mK[i + 1] = 0;
            continue;
        }
        alphaK = mK[i] / deltaK[i];
        betaK = mK[i + 1] / deltaK[i];
        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
        if (squaredMagnitude <= 9) {
            continue;
        }
        tauK = 3 / Math.sqrt(squaredMagnitude);
        mK[i] = alphaK * tauK * deltaK[i];
        mK[i + 1] = betaK * tauK * deltaK[i];
    }
}
function monotoneCompute(points, mK, indexAxis = 'x') {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    let delta, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(let i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) {
            continue;
        }
        const iPixel = pointCurrent[indexAxis];
        const vPixel = pointCurrent[valueAxis];
        if (pointBefore) {
            delta = (iPixel - pointBefore[indexAxis]) / 3;
            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
        }
        if (pointAfter) {
            delta = (pointAfter[indexAxis] - iPixel) / 3;
            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
        }
    }
}
/**
 * This function calculates Bézier control points in a similar way than |splineCurve|,
 * but preserves monotonicity of the provided data and ensures no local extremums are added
 * between the dataset discrete points due to the interpolation.
 * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
 */ function splineCurveMonotone(points, indexAxis = 'x') {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    const deltaK = Array(pointsLen).fill(0);
    const mK = Array(pointsLen);
    // Calculate slopes (deltaK) and initialize tangents (mK)
    let i, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) {
            continue;
        }
        if (pointAfter) {
            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0
            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
        }
        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
    }
    monotoneAdjust(points, deltaK, mK);
    monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
    return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
    let i, ilen, point, inArea, inAreaPrev;
    let inAreaNext = _isPointInArea(points[0], area);
    for(i = 0, ilen = points.length; i < ilen; ++i){
        inAreaPrev = inArea;
        inArea = inAreaNext;
        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
        if (!inArea) {
            continue;
        }
        point = points[i];
        if (inAreaPrev) {
            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
        }
        if (inAreaNext) {
            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
        }
    }
}
/**
 * @private
 */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
    let i, ilen, point, controlPoints;
    // Only consider points that are drawn in case the spanGaps option is used
    if (options.spanGaps) {
        points = points.filter((pt)=>!pt.skip);
    }
    if (options.cubicInterpolationMode === 'monotone') {
        splineCurveMonotone(points, indexAxis);
    } else {
        let prev = loop ? points[points.length - 1] : points[0];
        for(i = 0, ilen = points.length; i < ilen; ++i){
            point = points[i];
            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
            point.cp1x = controlPoints.previous.x;
            point.cp1y = controlPoints.previous.y;
            point.cp2x = controlPoints.next.x;
            point.cp2y = controlPoints.next.y;
            prev = point;
        }
    }
    if (options.capBezierPoints) {
        capBezierPoints(points, area);
    }
}

/**
 * Note: typedefs are auto-exported, so use a made-up `dom` namespace where
 * necessary to avoid duplicates with `export * from './helpers`; see
 * https://github.com/microsoft/TypeScript/issues/46011
 * @typedef { import('../core/core.controller.js').default } dom.Chart
 * @typedef { import('../../types').ChartEvent } ChartEvent
 */ /**
 * @private
 */ function _isDomSupported() {
    return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * @private
 */ function _getParentNode(domNode) {
    let parent = domNode.parentNode;
    if (parent && parent.toString() === '[object ShadowRoot]') {
        parent = parent.host;
    }
    return parent;
}
/**
 * convert max-width/max-height values that may be percentages into a number
 * @private
 */ function parseMaxStyle(styleValue, node, parentProperty) {
    let valueInPixels;
    if (typeof styleValue === 'string') {
        valueInPixels = parseInt(styleValue, 10);
        if (styleValue.indexOf('%') !== -1) {
            // percentage * size in dimension
            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
        }
    } else {
        valueInPixels = styleValue;
    }
    return valueInPixels;
}
const getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);
function getStyle(el, property) {
    return getComputedStyle(el).getPropertyValue(property);
}
const positions = [
    'top',
    'right',
    'bottom',
    'left'
];
function getPositionedStyle(styles, style, suffix) {
    const result = {};
    suffix = suffix ? '-' + suffix : '';
    for(let i = 0; i < 4; i++){
        const pos = positions[i];
        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;
    }
    result.width = result.left + result.right;
    result.height = result.top + result.bottom;
    return result;
}
const useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);
/**
 * @param e
 * @param canvas
 * @returns Canvas position
 */ function getCanvasPosition(e, canvas) {
    const touches = e.touches;
    const source = touches && touches.length ? touches[0] : e;
    const { offsetX , offsetY  } = source;
    let box = false;
    let x, y;
    if (useOffsetPos(offsetX, offsetY, e.target)) {
        x = offsetX;
        y = offsetY;
    } else {
        const rect = canvas.getBoundingClientRect();
        x = source.clientX - rect.left;
        y = source.clientY - rect.top;
        box = true;
    }
    return {
        x,
        y,
        box
    };
}
/**
 * Gets an event's x, y coordinates, relative to the chart area
 * @param event
 * @param chart
 * @returns x and y coordinates of the event
 */ function getRelativePosition(event, chart) {
    if ('native' in event) {
        return event;
    }
    const { canvas , currentDevicePixelRatio  } = chart;
    const style = getComputedStyle(canvas);
    const borderBox = style.boxSizing === 'border-box';
    const paddings = getPositionedStyle(style, 'padding');
    const borders = getPositionedStyle(style, 'border', 'width');
    const { x , y , box  } = getCanvasPosition(event, canvas);
    const xOffset = paddings.left + (box && borders.left);
    const yOffset = paddings.top + (box && borders.top);
    let { width , height  } = chart;
    if (borderBox) {
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    return {
        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
    };
}
function getContainerSize(canvas, width, height) {
    let maxWidth, maxHeight;
    if (width === undefined || height === undefined) {
        const container = canvas && _getParentNode(canvas);
        if (!container) {
            width = canvas.clientWidth;
            height = canvas.clientHeight;
        } else {
            const rect = container.getBoundingClientRect(); // this is the border box of the container
            const containerStyle = getComputedStyle(container);
            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');
            const containerPadding = getPositionedStyle(containerStyle, 'padding');
            width = rect.width - containerPadding.width - containerBorder.width;
            height = rect.height - containerPadding.height - containerBorder.height;
            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');
            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');
        }
    }
    return {
        width,
        height,
        maxWidth: maxWidth || INFINITY,
        maxHeight: maxHeight || INFINITY
    };
}
const round1 = (v)=>Math.round(v * 10) / 10;
// eslint-disable-next-line complexity
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
    const style = getComputedStyle(canvas);
    const margins = getPositionedStyle(style, 'margin');
    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;
    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;
    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
    let { width , height  } = containerSize;
    if (style.boxSizing === 'content-box') {
        const borders = getPositionedStyle(style, 'border', 'width');
        const paddings = getPositionedStyle(style, 'padding');
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    width = Math.max(0, width - margins.width);
    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
    if (width && !height) {
        // https://github.com/chartjs/Chart.js/issues/4659
        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)
        height = round1(width / 2);
    }
    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;
    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
        height = containerSize.height;
        width = round1(Math.floor(height * aspectRatio));
    }
    return {
        width,
        height
    };
}
/**
 * @param chart
 * @param forceRatio
 * @param forceStyle
 * @returns True if the canvas context size or transformation has changed.
 */ function retinaScale(chart, forceRatio, forceStyle) {
    const pixelRatio = forceRatio || 1;
    const deviceHeight = Math.floor(chart.height * pixelRatio);
    const deviceWidth = Math.floor(chart.width * pixelRatio);
    chart.height = Math.floor(chart.height);
    chart.width = Math.floor(chart.width);
    const canvas = chart.canvas;
    // If no style has been set on the canvas, the render size is used as display size,
    // making the chart visually bigger, so let's enforce it to the "correct" values.
    // See https://github.com/chartjs/Chart.js/issues/3575
    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
        canvas.style.height = `${chart.height}px`;
        canvas.style.width = `${chart.width}px`;
    }
    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
        chart.currentDevicePixelRatio = pixelRatio;
        canvas.height = deviceHeight;
        canvas.width = deviceWidth;
        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
        return true;
    }
    return false;
}
/**
 * Detects support for options object argument in addEventListener.
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
 * @private
 */ const supportsEventListenerOptions = function() {
    let passiveSupported = false;
    try {
        const options = {
            get passive () {
                passiveSupported = true;
                return false;
            }
        };
        if (_isDomSupported()) {
            window.addEventListener('test', null, options);
            window.removeEventListener('test', null, options);
        }
    } catch (e) {
    // continue regardless of error
    }
    return passiveSupported;
}();
/**
 * The "used" size is the final value of a dimension property after all calculations have
 * been performed. This method uses the computed style of `element` but returns undefined
 * if the computed style is not expressed in pixels. That can happen in some cases where
 * `element` has a size relative to its parent and this last one is not yet displayed,
 * for example because of `display: none` on a parent node.
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
 * @returns Size in pixels or undefined if unknown.
 */ function readUsedSize(element, property) {
    const value = getStyle(element, property);
    const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
    return matches ? +matches[1] : undefined;
}

/**
 * @private
 */ function _pointInLine(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: p1.y + t * (p2.y - p1.y)
    };
}
/**
 * @private
 */ function _steppedInterpolation(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
    };
}
/**
 * @private
 */ function _bezierInterpolation(p1, p2, t, mode) {
    const cp1 = {
        x: p1.cp2x,
        y: p1.cp2y
    };
    const cp2 = {
        x: p2.cp1x,
        y: p2.cp1y
    };
    const a = _pointInLine(p1, cp1, t);
    const b = _pointInLine(cp1, cp2, t);
    const c = _pointInLine(cp2, p2, t);
    const d = _pointInLine(a, b, t);
    const e = _pointInLine(b, c, t);
    return _pointInLine(d, e, t);
}

const getRightToLeftAdapter = function(rectX, width) {
    return {
        x (x) {
            return rectX + rectX + width - x;
        },
        setWidth (w) {
            width = w;
        },
        textAlign (align) {
            if (align === 'center') {
                return align;
            }
            return align === 'right' ? 'left' : 'right';
        },
        xPlus (x, value) {
            return x - value;
        },
        leftForLtr (x, itemWidth) {
            return x - itemWidth;
        }
    };
};
const getLeftToRightAdapter = function() {
    return {
        x (x) {
            return x;
        },
        setWidth (w) {},
        textAlign (align) {
            return align;
        },
        xPlus (x, value) {
            return x + value;
        },
        leftForLtr (x, _itemWidth) {
            return x;
        }
    };
};
function getRtlAdapter(rtl, rectX, width) {
    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
    let style, original;
    if (direction === 'ltr' || direction === 'rtl') {
        style = ctx.canvas.style;
        original = [
            style.getPropertyValue('direction'),
            style.getPropertyPriority('direction')
        ];
        style.setProperty('direction', direction, 'important');
        ctx.prevTextDirection = original;
    }
}
function restoreTextDirection(ctx, original) {
    if (original !== undefined) {
        delete ctx.prevTextDirection;
        ctx.canvas.style.setProperty('direction', original[0], original[1]);
    }
}

function propertyFn(property) {
    if (property === 'angle') {
        return {
            between: _angleBetween,
            compare: _angleDiff,
            normalize: _normalizeAngle
        };
    }
    return {
        between: _isBetween,
        compare: (a, b)=>a - b,
        normalize: (x)=>x
    };
}
function normalizeSegment({ start , end , count , loop , style  }) {
    return {
        start: start % count,
        end: end % count,
        loop: loop && (end - start + 1) % count === 0,
        style
    };
}
function getSegment(segment, points, bounds) {
    const { property , start: startBound , end: endBound  } = bounds;
    const { between , normalize  } = propertyFn(property);
    const count = points.length;
    let { start , end , loop  } = segment;
    let i, ilen;
    if (loop) {
        start += count;
        end += count;
        for(i = 0, ilen = count; i < ilen; ++i){
            if (!between(normalize(points[start % count][property]), startBound, endBound)) {
                break;
            }
            start--;
            end--;
        }
        start %= count;
        end %= count;
    }
    if (end < start) {
        end += count;
    }
    return {
        start,
        end,
        loop,
        style: segment.style
    };
}
 function _boundSegment(segment, points, bounds) {
    if (!bounds) {
        return [
            segment
        ];
    }
    const { property , start: startBound , end: endBound  } = bounds;
    const count = points.length;
    const { compare , between , normalize  } = propertyFn(property);
    const { start , end , loop , style  } = getSegment(segment, points, bounds);
    const result = [];
    let inside = false;
    let subStart = null;
    let value, point, prevValue;
    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);
    const shouldStart = ()=>inside || startIsBefore();
    const shouldStop = ()=>!inside || endIsBefore();
    for(let i = start, prev = start; i <= end; ++i){
        point = points[i % count];
        if (point.skip) {
            continue;
        }
        value = normalize(point[property]);
        if (value === prevValue) {
            continue;
        }
        inside = between(value, startBound, endBound);
        if (subStart === null && shouldStart()) {
            subStart = compare(value, startBound) === 0 ? i : prev;
        }
        if (subStart !== null && shouldStop()) {
            result.push(normalizeSegment({
                start: subStart,
                end: i,
                loop,
                count,
                style
            }));
            subStart = null;
        }
        prev = i;
        prevValue = value;
    }
    if (subStart !== null) {
        result.push(normalizeSegment({
            start: subStart,
            end,
            loop,
            count,
            style
        }));
    }
    return result;
}
 function _boundSegments(line, bounds) {
    const result = [];
    const segments = line.segments;
    for(let i = 0; i < segments.length; i++){
        const sub = _boundSegment(segments[i], line.points, bounds);
        if (sub.length) {
            result.push(...sub);
        }
    }
    return result;
}
 function findStartAndEnd(points, count, loop, spanGaps) {
    let start = 0;
    let end = count - 1;
    if (loop && !spanGaps) {
        while(start < count && !points[start].skip){
            start++;
        }
    }
    while(start < count && points[start].skip){
        start++;
    }
    start %= count;
    if (loop) {
        end += start;
    }
    while(end > start && points[end % count].skip){
        end--;
    }
    end %= count;
    return {
        start,
        end
    };
}
 function solidSegments(points, start, max, loop) {
    const count = points.length;
    const result = [];
    let last = start;
    let prev = points[start];
    let end;
    for(end = start + 1; end <= max; ++end){
        const cur = points[end % count];
        if (cur.skip || cur.stop) {
            if (!prev.skip) {
                loop = false;
                result.push({
                    start: start % count,
                    end: (end - 1) % count,
                    loop
                });
                start = last = cur.stop ? end : null;
            }
        } else {
            last = end;
            if (prev.skip) {
                start = end;
            }
        }
        prev = cur;
    }
    if (last !== null) {
        result.push({
            start: start % count,
            end: last % count,
            loop
        });
    }
    return result;
}
 function _computeSegments(line, segmentOptions) {
    const points = line.points;
    const spanGaps = line.options.spanGaps;
    const count = points.length;
    if (!count) {
        return [];
    }
    const loop = !!line._loop;
    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);
    if (spanGaps === true) {
        return splitByStyles(line, [
            {
                start,
                end,
                loop
            }
        ], points, segmentOptions);
    }
    const max = end < start ? end + count : end;
    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
 function splitByStyles(line, segments, points, segmentOptions) {
    if (!segmentOptions || !segmentOptions.setContext || !points) {
        return segments;
    }
    return doSplitByStyles(line, segments, points, segmentOptions);
}
 function doSplitByStyles(line, segments, points, segmentOptions) {
    const chartContext = line._chart.getContext();
    const baseStyle = readStyle(line.options);
    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;
    const count = points.length;
    const result = [];
    let prevStyle = baseStyle;
    let start = segments[0].start;
    let i = start;
    function addStyle(s, e, l, st) {
        const dir = spanGaps ? -1 : 1;
        if (s === e) {
            return;
        }
        s += count;
        while(points[s % count].skip){
            s -= dir;
        }
        while(points[e % count].skip){
            e += dir;
        }
        if (s % count !== e % count) {
            result.push({
                start: s % count,
                end: e % count,
                loop: l,
                style: st
            });
            prevStyle = st;
            start = e % count;
        }
    }
    for (const segment of segments){
        start = spanGaps ? start : segment.start;
        let prev = points[start % count];
        let style;
        for(i = start + 1; i <= segment.end; i++){
            const pt = points[i % count];
            style = readStyle(segmentOptions.setContext(createContext(chartContext, {
                type: 'segment',
                p0: prev,
                p1: pt,
                p0DataIndex: (i - 1) % count,
                p1DataIndex: i % count,
                datasetIndex
            })));
            if (styleChanged(style, prevStyle)) {
                addStyle(start, i - 1, segment.loop, prevStyle);
            }
            prev = pt;
            prevStyle = style;
        }
        if (start < i - 1) {
            addStyle(start, i - 1, segment.loop, prevStyle);
        }
    }
    return result;
}
function readStyle(options) {
    return {
        backgroundColor: options.backgroundColor,
        borderCapStyle: options.borderCapStyle,
        borderDash: options.borderDash,
        borderDashOffset: options.borderDashOffset,
        borderJoinStyle: options.borderJoinStyle,
        borderWidth: options.borderWidth,
        borderColor: options.borderColor
    };
}
function styleChanged(style, prevStyle) {
    if (!prevStyle) {
        return false;
    }
    const cache = [];
    const replacer = function(key, value) {
        if (!isPatternOrGradient(value)) {
            return value;
        }
        if (!cache.includes(value)) {
            cache.push(value);
        }
        return cache.indexOf(value);
    };
    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
}


//# sourceMappingURL=helpers.segment.js.map


/***/ }),

/***/ "./node_modules/chart.js/dist/helpers.js":
/*!***********************************************!*\
  !*** ./node_modules/chart.js/dist/helpers.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HALF_PI: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H),
/* harmony export */   INFINITY: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b2),
/* harmony export */   PI: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P),
/* harmony export */   PITAU: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b1),
/* harmony export */   QUARTER_PI: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b4),
/* harmony export */   RAD_PER_DEG: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b3),
/* harmony export */   TAU: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T),
/* harmony export */   TWO_THIRDS_PI: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b5),
/* harmony export */   _addGrace: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.R),
/* harmony export */   _alignPixel: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X),
/* harmony export */   _alignStartEnd: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2),
/* harmony export */   _angleBetween: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.p),
/* harmony export */   _angleDiff: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b6),
/* harmony export */   _arrayUnique: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__._),
/* harmony export */   _attachContext: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a8),
/* harmony export */   _bezierCurveTo: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.as),
/* harmony export */   _bezierInterpolation: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ap),
/* harmony export */   _boundSegment: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ax),
/* harmony export */   _boundSegments: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.an),
/* harmony export */   _capitalize: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a5),
/* harmony export */   _computeSegments: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.am),
/* harmony export */   _createResolver: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a9),
/* harmony export */   _decimalPlaces: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aK),
/* harmony export */   _deprecated: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aV),
/* harmony export */   _descriptors: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aa),
/* harmony export */   _elementsEqual: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ah),
/* harmony export */   _factorize: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.N),
/* harmony export */   _filterBetween: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aO),
/* harmony export */   _getParentNode: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.I),
/* harmony export */   _getStartAndCountOfVisiblePoints: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q),
/* harmony export */   _int16Range: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.W),
/* harmony export */   _isBetween: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aj),
/* harmony export */   _isClickEvent: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ai),
/* harmony export */   _isDomSupported: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M),
/* harmony export */   _isPointInArea: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.C),
/* harmony export */   _limitValue: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S),
/* harmony export */   _longestText: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aN),
/* harmony export */   _lookup: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aP),
/* harmony export */   _lookupByKey: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B),
/* harmony export */   _measureText: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.V),
/* harmony export */   _merger: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aT),
/* harmony export */   _mergerIf: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aU),
/* harmony export */   _normalizeAngle: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay),
/* harmony export */   _parseObjectDataRadialScale: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.y),
/* harmony export */   _pointInLine: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aq),
/* harmony export */   _readValueToProps: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ak),
/* harmony export */   _rlookupByKey: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A),
/* harmony export */   _scaleRangesChanged: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w),
/* harmony export */   _setMinAndMaxByKey: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aG),
/* harmony export */   _splitKey: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aW),
/* harmony export */   _steppedInterpolation: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ao),
/* harmony export */   _steppedLineTo: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ar),
/* harmony export */   _textX: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aB),
/* harmony export */   _toLeftRightCenter: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a1),
/* harmony export */   _updateBezierControlPoints: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.al),
/* harmony export */   addRoundedRectPath: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au),
/* harmony export */   almostEquals: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aJ),
/* harmony export */   almostWhole: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aI),
/* harmony export */   callback: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q),
/* harmony export */   clearCanvas: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.af),
/* harmony export */   clipArea: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Y),
/* harmony export */   clone: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aS),
/* harmony export */   color: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.c),
/* harmony export */   createContext: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j),
/* harmony export */   debounce: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ad),
/* harmony export */   defined: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.h),
/* harmony export */   distanceBetweenPoints: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aE),
/* harmony export */   drawPoint: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.at),
/* harmony export */   drawPointLegend: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aD),
/* harmony export */   each: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F),
/* harmony export */   easingEffects: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.e),
/* harmony export */   finiteOrDefault: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O),
/* harmony export */   fontString: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a$),
/* harmony export */   formatNumber: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.o),
/* harmony export */   getAngleFromPoint: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.D),
/* harmony export */   getHoverColor: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aR),
/* harmony export */   getMaximumSize: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.G),
/* harmony export */   getRelativePosition: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.z),
/* harmony export */   getRtlAdapter: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.az),
/* harmony export */   getStyle: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a_),
/* harmony export */   isArray: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b),
/* harmony export */   isFinite: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g),
/* harmony export */   isFunction: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a7),
/* harmony export */   isNullOrUndef: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k),
/* harmony export */   isNumber: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.x),
/* harmony export */   isObject: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i),
/* harmony export */   isPatternOrGradient: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aQ),
/* harmony export */   listenArrayEvents: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.l),
/* harmony export */   log10: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aM),
/* harmony export */   merge: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a4),
/* harmony export */   mergeIf: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ab),
/* harmony export */   niceNum: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aH),
/* harmony export */   noop: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aF),
/* harmony export */   overrideTextDirection: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aA),
/* harmony export */   readUsedSize: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J),
/* harmony export */   renderText: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z),
/* harmony export */   requestAnimFrame: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.r),
/* harmony export */   resolve: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a),
/* harmony export */   resolveObjectKey: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f),
/* harmony export */   restoreTextDirection: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aC),
/* harmony export */   retinaScale: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ae),
/* harmony export */   setsEqual: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ag),
/* harmony export */   sign: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s),
/* harmony export */   splineCurve: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aY),
/* harmony export */   splineCurveMonotone: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aZ),
/* harmony export */   supportsEventListenerOptions: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.K),
/* harmony export */   throttled: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L),
/* harmony export */   toDegrees: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.U),
/* harmony export */   toDimension: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.n),
/* harmony export */   toFont: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0),
/* harmony export */   toFontString: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aX),
/* harmony export */   toLineHeight: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b0),
/* harmony export */   toPadding: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E),
/* harmony export */   toPercentage: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.m),
/* harmony export */   toRadians: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t),
/* harmony export */   toTRBL: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.av),
/* harmony export */   toTRBLCorners: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aw),
/* harmony export */   uid: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ac),
/* harmony export */   unclipArea: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.$),
/* harmony export */   unlistenArrayEvents: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.u),
/* harmony export */   valueOrDefault: () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)
/* harmony export */ });
/* harmony import */ var _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/helpers.segment.js */ "./node_modules/chart.js/dist/chunks/helpers.segment.js");
/*!
 * Chart.js v4.4.3
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */


//# sourceMappingURL=helpers.js.map


/***/ }),

/***/ "./node_modules/chart.js/helpers/helpers.js":
/*!**************************************************!*\
  !*** ./node_modules/chart.js/helpers/helpers.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HALF_PI: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.HALF_PI),
/* harmony export */   INFINITY: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.INFINITY),
/* harmony export */   PI: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.PI),
/* harmony export */   PITAU: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.PITAU),
/* harmony export */   QUARTER_PI: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.QUARTER_PI),
/* harmony export */   RAD_PER_DEG: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.RAD_PER_DEG),
/* harmony export */   TAU: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.TAU),
/* harmony export */   TWO_THIRDS_PI: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.TWO_THIRDS_PI),
/* harmony export */   _addGrace: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._addGrace),
/* harmony export */   _alignPixel: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._alignPixel),
/* harmony export */   _alignStartEnd: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._alignStartEnd),
/* harmony export */   _angleBetween: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._angleBetween),
/* harmony export */   _angleDiff: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._angleDiff),
/* harmony export */   _arrayUnique: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._arrayUnique),
/* harmony export */   _attachContext: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._attachContext),
/* harmony export */   _bezierCurveTo: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._bezierCurveTo),
/* harmony export */   _bezierInterpolation: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._bezierInterpolation),
/* harmony export */   _boundSegment: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._boundSegment),
/* harmony export */   _boundSegments: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._boundSegments),
/* harmony export */   _capitalize: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._capitalize),
/* harmony export */   _computeSegments: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._computeSegments),
/* harmony export */   _createResolver: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._createResolver),
/* harmony export */   _decimalPlaces: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._decimalPlaces),
/* harmony export */   _deprecated: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deprecated),
/* harmony export */   _descriptors: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._descriptors),
/* harmony export */   _elementsEqual: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._elementsEqual),
/* harmony export */   _factorize: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._factorize),
/* harmony export */   _filterBetween: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._filterBetween),
/* harmony export */   _getParentNode: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._getParentNode),
/* harmony export */   _getStartAndCountOfVisiblePoints: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._getStartAndCountOfVisiblePoints),
/* harmony export */   _int16Range: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._int16Range),
/* harmony export */   _isBetween: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._isBetween),
/* harmony export */   _isClickEvent: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._isClickEvent),
/* harmony export */   _isDomSupported: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._isDomSupported),
/* harmony export */   _isPointInArea: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._isPointInArea),
/* harmony export */   _limitValue: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._limitValue),
/* harmony export */   _longestText: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._longestText),
/* harmony export */   _lookup: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._lookup),
/* harmony export */   _lookupByKey: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._lookupByKey),
/* harmony export */   _measureText: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._measureText),
/* harmony export */   _merger: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._merger),
/* harmony export */   _mergerIf: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._mergerIf),
/* harmony export */   _normalizeAngle: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._normalizeAngle),
/* harmony export */   _parseObjectDataRadialScale: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._parseObjectDataRadialScale),
/* harmony export */   _pointInLine: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._pointInLine),
/* harmony export */   _readValueToProps: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._readValueToProps),
/* harmony export */   _rlookupByKey: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._rlookupByKey),
/* harmony export */   _scaleRangesChanged: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._scaleRangesChanged),
/* harmony export */   _setMinAndMaxByKey: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._setMinAndMaxByKey),
/* harmony export */   _splitKey: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._splitKey),
/* harmony export */   _steppedInterpolation: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._steppedInterpolation),
/* harmony export */   _steppedLineTo: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._steppedLineTo),
/* harmony export */   _textX: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._textX),
/* harmony export */   _toLeftRightCenter: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._toLeftRightCenter),
/* harmony export */   _updateBezierControlPoints: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__._updateBezierControlPoints),
/* harmony export */   addRoundedRectPath: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.addRoundedRectPath),
/* harmony export */   almostEquals: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.almostEquals),
/* harmony export */   almostWhole: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.almostWhole),
/* harmony export */   callback: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.callback),
/* harmony export */   clearCanvas: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.clearCanvas),
/* harmony export */   clipArea: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.clipArea),
/* harmony export */   clone: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.clone),
/* harmony export */   color: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.color),
/* harmony export */   createContext: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.createContext),
/* harmony export */   debounce: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.debounce),
/* harmony export */   defined: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.defined),
/* harmony export */   distanceBetweenPoints: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.distanceBetweenPoints),
/* harmony export */   drawPoint: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.drawPoint),
/* harmony export */   drawPointLegend: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.drawPointLegend),
/* harmony export */   each: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.each),
/* harmony export */   easingEffects: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.easingEffects),
/* harmony export */   finiteOrDefault: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.finiteOrDefault),
/* harmony export */   fontString: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.fontString),
/* harmony export */   formatNumber: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.formatNumber),
/* harmony export */   getAngleFromPoint: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getAngleFromPoint),
/* harmony export */   getHoverColor: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getHoverColor),
/* harmony export */   getMaximumSize: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getMaximumSize),
/* harmony export */   getRelativePosition: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getRelativePosition),
/* harmony export */   getRtlAdapter: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getRtlAdapter),
/* harmony export */   getStyle: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getStyle),
/* harmony export */   isArray: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isArray),
/* harmony export */   isFinite: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isFinite),
/* harmony export */   isFunction: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isFunction),
/* harmony export */   isNullOrUndef: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndef),
/* harmony export */   isNumber: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isNumber),
/* harmony export */   isObject: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isObject),
/* harmony export */   isPatternOrGradient: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isPatternOrGradient),
/* harmony export */   listenArrayEvents: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.listenArrayEvents),
/* harmony export */   log10: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.log10),
/* harmony export */   merge: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.merge),
/* harmony export */   mergeIf: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.mergeIf),
/* harmony export */   niceNum: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.niceNum),
/* harmony export */   noop: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.noop),
/* harmony export */   overrideTextDirection: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.overrideTextDirection),
/* harmony export */   readUsedSize: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.readUsedSize),
/* harmony export */   renderText: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.renderText),
/* harmony export */   requestAnimFrame: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.requestAnimFrame),
/* harmony export */   resolve: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.resolve),
/* harmony export */   resolveObjectKey: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.resolveObjectKey),
/* harmony export */   restoreTextDirection: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.restoreTextDirection),
/* harmony export */   retinaScale: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.retinaScale),
/* harmony export */   setsEqual: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.setsEqual),
/* harmony export */   sign: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.sign),
/* harmony export */   splineCurve: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.splineCurve),
/* harmony export */   splineCurveMonotone: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.splineCurveMonotone),
/* harmony export */   supportsEventListenerOptions: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.supportsEventListenerOptions),
/* harmony export */   throttled: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.throttled),
/* harmony export */   toDegrees: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toDegrees),
/* harmony export */   toDimension: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toDimension),
/* harmony export */   toFont: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toFont),
/* harmony export */   toFontString: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toFontString),
/* harmony export */   toLineHeight: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toLineHeight),
/* harmony export */   toPadding: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toPadding),
/* harmony export */   toPercentage: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toPercentage),
/* harmony export */   toRadians: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toRadians),
/* harmony export */   toTRBL: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toTRBL),
/* harmony export */   toTRBLCorners: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toTRBLCorners),
/* harmony export */   uid: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.uid),
/* harmony export */   unclipArea: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.unclipArea),
/* harmony export */   unlistenArrayEvents: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.unlistenArrayEvents),
/* harmony export */   valueOrDefault: () => (/* reexport safe */ _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__.valueOrDefault)
/* harmony export */ });
/* harmony import */ var _dist_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/helpers.js */ "./node_modules/chart.js/dist/helpers.js");



/***/ }),

/***/ "./node_modules/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.esm.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.esm.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/chart.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/toDate.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/parse.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/parseISO.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/isValid.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/format.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addMilliseconds.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addSeconds.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addMinutes.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addHours.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addDays.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addWeeks.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addMonths.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addQuarters.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addYears.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/differenceInMilliseconds.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/differenceInSeconds.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/differenceInMinutes.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/differenceInHours.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/differenceInDays.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/differenceInWeeks.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/differenceInMonths.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/differenceInQuarters.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/differenceInYears.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfSecond.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfMinute.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfHour.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfDay.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfWeek.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfMonth.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfQuarter.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfYear.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfSecond.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfMinute.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfHour.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfDay.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfWeek.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfMonth.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfQuarter.mjs");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfYear.mjs");
/*!
 * chartjs-adapter-date-fns v3.0.0
 * https://www.chartjs.org
 * (c) 2022 chartjs-adapter-date-fns Contributors
 * Released under the MIT license
 */



const FORMATS = {
  datetime: 'MMM d, yyyy, h:mm:ss aaaa',
  millisecond: 'h:mm:ss.SSS aaaa',
  second: 'h:mm:ss aaaa',
  minute: 'h:mm aaaa',
  hour: 'ha',
  day: 'MMM d',
  week: 'PP',
  month: 'MMM yyyy',
  quarter: 'qqq - yyyy',
  year: 'yyyy'
};

chart_js__WEBPACK_IMPORTED_MODULE_0__._adapters._date.override({
  _id: 'date-fns', // DEBUG

  formats: function() {
    return FORMATS;
  },

  parse: function(value, fmt) {
    if (value === null || typeof value === 'undefined') {
      return null;
    }
    const type = typeof value;
    if (type === 'number' || value instanceof Date) {
      value = (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.toDate)(value);
    } else if (type === 'string') {
      if (typeof fmt === 'string') {
        value = (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.parse)(value, fmt, new Date(), this.options);
      } else {
        value = (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.parseISO)(value, this.options);
      }
    }
    return (0,date_fns__WEBPACK_IMPORTED_MODULE_4__.isValid)(value) ? value.getTime() : null;
  },

  format: function(time, fmt) {
    return (0,date_fns__WEBPACK_IMPORTED_MODULE_5__.format)(time, fmt, this.options);
  },

  add: function(time, amount, unit) {
    switch (unit) {
    case 'millisecond': return (0,date_fns__WEBPACK_IMPORTED_MODULE_6__.addMilliseconds)(time, amount);
    case 'second': return (0,date_fns__WEBPACK_IMPORTED_MODULE_7__.addSeconds)(time, amount);
    case 'minute': return (0,date_fns__WEBPACK_IMPORTED_MODULE_8__.addMinutes)(time, amount);
    case 'hour': return (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.addHours)(time, amount);
    case 'day': return (0,date_fns__WEBPACK_IMPORTED_MODULE_10__.addDays)(time, amount);
    case 'week': return (0,date_fns__WEBPACK_IMPORTED_MODULE_11__.addWeeks)(time, amount);
    case 'month': return (0,date_fns__WEBPACK_IMPORTED_MODULE_12__.addMonths)(time, amount);
    case 'quarter': return (0,date_fns__WEBPACK_IMPORTED_MODULE_13__.addQuarters)(time, amount);
    case 'year': return (0,date_fns__WEBPACK_IMPORTED_MODULE_14__.addYears)(time, amount);
    default: return time;
    }
  },

  diff: function(max, min, unit) {
    switch (unit) {
    case 'millisecond': return (0,date_fns__WEBPACK_IMPORTED_MODULE_15__.differenceInMilliseconds)(max, min);
    case 'second': return (0,date_fns__WEBPACK_IMPORTED_MODULE_16__.differenceInSeconds)(max, min);
    case 'minute': return (0,date_fns__WEBPACK_IMPORTED_MODULE_17__.differenceInMinutes)(max, min);
    case 'hour': return (0,date_fns__WEBPACK_IMPORTED_MODULE_18__.differenceInHours)(max, min);
    case 'day': return (0,date_fns__WEBPACK_IMPORTED_MODULE_19__.differenceInDays)(max, min);
    case 'week': return (0,date_fns__WEBPACK_IMPORTED_MODULE_20__.differenceInWeeks)(max, min);
    case 'month': return (0,date_fns__WEBPACK_IMPORTED_MODULE_21__.differenceInMonths)(max, min);
    case 'quarter': return (0,date_fns__WEBPACK_IMPORTED_MODULE_22__.differenceInQuarters)(max, min);
    case 'year': return (0,date_fns__WEBPACK_IMPORTED_MODULE_23__.differenceInYears)(max, min);
    default: return 0;
    }
  },

  startOf: function(time, unit, weekday) {
    switch (unit) {
    case 'second': return (0,date_fns__WEBPACK_IMPORTED_MODULE_24__.startOfSecond)(time);
    case 'minute': return (0,date_fns__WEBPACK_IMPORTED_MODULE_25__.startOfMinute)(time);
    case 'hour': return (0,date_fns__WEBPACK_IMPORTED_MODULE_26__.startOfHour)(time);
    case 'day': return (0,date_fns__WEBPACK_IMPORTED_MODULE_27__.startOfDay)(time);
    case 'week': return (0,date_fns__WEBPACK_IMPORTED_MODULE_28__.startOfWeek)(time);
    case 'isoWeek': return (0,date_fns__WEBPACK_IMPORTED_MODULE_28__.startOfWeek)(time, {weekStartsOn: +weekday});
    case 'month': return (0,date_fns__WEBPACK_IMPORTED_MODULE_29__.startOfMonth)(time);
    case 'quarter': return (0,date_fns__WEBPACK_IMPORTED_MODULE_30__.startOfQuarter)(time);
    case 'year': return (0,date_fns__WEBPACK_IMPORTED_MODULE_31__.startOfYear)(time);
    default: return time;
    }
  },

  endOf: function(time, unit) {
    switch (unit) {
    case 'second': return (0,date_fns__WEBPACK_IMPORTED_MODULE_32__.endOfSecond)(time);
    case 'minute': return (0,date_fns__WEBPACK_IMPORTED_MODULE_33__.endOfMinute)(time);
    case 'hour': return (0,date_fns__WEBPACK_IMPORTED_MODULE_34__.endOfHour)(time);
    case 'day': return (0,date_fns__WEBPACK_IMPORTED_MODULE_35__.endOfDay)(time);
    case 'week': return (0,date_fns__WEBPACK_IMPORTED_MODULE_36__.endOfWeek)(time);
    case 'month': return (0,date_fns__WEBPACK_IMPORTED_MODULE_37__.endOfMonth)(time);
    case 'quarter': return (0,date_fns__WEBPACK_IMPORTED_MODULE_38__.endOfQuarter)(time);
    case 'year': return (0,date_fns__WEBPACK_IMPORTED_MODULE_39__.endOfYear)(time);
    default: return time;
    }
  }
});


/***/ }),

/***/ "./node_modules/date-fns/_lib/addLeadingZeros.mjs":
/*!********************************************************!*\
  !*** ./node_modules/date-fns/_lib/addLeadingZeros.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addLeadingZeros: () => (/* binding */ addLeadingZeros)
/* harmony export */ });
function addLeadingZeros(number, targetLength) {
  const sign = number < 0 ? "-" : "";
  const output = Math.abs(number).toString().padStart(targetLength, "0");
  return sign + output;
}


/***/ }),

/***/ "./node_modules/date-fns/_lib/defaultOptions.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/date-fns/_lib/defaultOptions.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDefaultOptions: () => (/* binding */ getDefaultOptions),
/* harmony export */   setDefaultOptions: () => (/* binding */ setDefaultOptions)
/* harmony export */ });
let defaultOptions = {};

function getDefaultOptions() {
  return defaultOptions;
}

function setDefaultOptions(newOptions) {
  defaultOptions = newOptions;
}


/***/ }),

/***/ "./node_modules/date-fns/_lib/format/formatters.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/date-fns/_lib/format/formatters.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatters: () => (/* binding */ formatters)
/* harmony export */ });
/* harmony import */ var _getDayOfYear_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../getDayOfYear.mjs */ "./node_modules/date-fns/getDayOfYear.mjs");
/* harmony import */ var _getISOWeek_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../getISOWeek.mjs */ "./node_modules/date-fns/getISOWeek.mjs");
/* harmony import */ var _getISOWeekYear_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../getISOWeekYear.mjs */ "./node_modules/date-fns/getISOWeekYear.mjs");
/* harmony import */ var _getWeek_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../getWeek.mjs */ "./node_modules/date-fns/getWeek.mjs");
/* harmony import */ var _getWeekYear_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../getWeekYear.mjs */ "./node_modules/date-fns/getWeekYear.mjs");
/* harmony import */ var _addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../addLeadingZeros.mjs */ "./node_modules/date-fns/_lib/addLeadingZeros.mjs");
/* harmony import */ var _lightFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lightFormatters.mjs */ "./node_modules/date-fns/_lib/format/lightFormatters.mjs");








const dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night",
};

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */

const formatters = {
  // Era
  G: function (date, token, localize) {
    const era = date.getFullYear() > 0 ? 1 : 0;
    switch (token) {
      // AD, BC
      case "G":
      case "GG":
      case "GGG":
        return localize.era(era, { width: "abbreviated" });
      // A, B
      case "GGGGG":
        return localize.era(era, { width: "narrow" });
      // Anno Domini, Before Christ
      case "GGGG":
      default:
        return localize.era(era, { width: "wide" });
    }
  },

  // Year
  y: function (date, token, localize) {
    // Ordinal number
    if (token === "yo") {
      const signedYear = date.getFullYear();
      // Returns 1 for 1 BC (which is year 0 in JavaScript)
      const year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, { unit: "year" });
    }

    return _lightFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.y(date, token);
  },

  // Local week-numbering year
  Y: function (date, token, localize, options) {
    const signedWeekYear = (0,_getWeekYear_mjs__WEBPACK_IMPORTED_MODULE_1__.getWeekYear)(date, options);
    // Returns 1 for 1 BC (which is year 0 in JavaScript)
    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

    // Two digit year
    if (token === "YY") {
      const twoDigitYear = weekYear % 100;
      return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(twoDigitYear, 2);
    }

    // Ordinal number
    if (token === "Yo") {
      return localize.ordinalNumber(weekYear, { unit: "year" });
    }

    // Padding
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(weekYear, token.length);
  },

  // ISO week-numbering year
  R: function (date, token) {
    const isoWeekYear = (0,_getISOWeekYear_mjs__WEBPACK_IMPORTED_MODULE_3__.getISOWeekYear)(date);

    // Padding
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(isoWeekYear, token.length);
  },

  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function (date, token) {
    const year = date.getFullYear();
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(year, token.length);
  },

  // Quarter
  Q: function (date, token, localize) {
    const quarter = Math.ceil((date.getMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case "Q":
        return String(quarter);
      // 01, 02, 03, 04
      case "QQ":
        return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case "Qo":
        return localize.ordinalNumber(quarter, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "QQQ":
        return localize.quarter(quarter, {
          width: "abbreviated",
          context: "formatting",
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "QQQQQ":
        return localize.quarter(quarter, {
          width: "narrow",
          context: "formatting",
        });
      // 1st quarter, 2nd quarter, ...
      case "QQQQ":
      default:
        return localize.quarter(quarter, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // Stand-alone quarter
  q: function (date, token, localize) {
    const quarter = Math.ceil((date.getMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case "q":
        return String(quarter);
      // 01, 02, 03, 04
      case "qq":
        return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case "qo":
        return localize.ordinalNumber(quarter, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "qqq":
        return localize.quarter(quarter, {
          width: "abbreviated",
          context: "standalone",
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "qqqqq":
        return localize.quarter(quarter, {
          width: "narrow",
          context: "standalone",
        });
      // 1st quarter, 2nd quarter, ...
      case "qqqq":
      default:
        return localize.quarter(quarter, {
          width: "wide",
          context: "standalone",
        });
    }
  },

  // Month
  M: function (date, token, localize) {
    const month = date.getMonth();
    switch (token) {
      case "M":
      case "MM":
        return _lightFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.M(date, token);
      // 1st, 2nd, ..., 12th
      case "Mo":
        return localize.ordinalNumber(month + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "MMM":
        return localize.month(month, {
          width: "abbreviated",
          context: "formatting",
        });
      // J, F, ..., D
      case "MMMMM":
        return localize.month(month, {
          width: "narrow",
          context: "formatting",
        });
      // January, February, ..., December
      case "MMMM":
      default:
        return localize.month(month, { width: "wide", context: "formatting" });
    }
  },

  // Stand-alone month
  L: function (date, token, localize) {
    const month = date.getMonth();
    switch (token) {
      // 1, 2, ..., 12
      case "L":
        return String(month + 1);
      // 01, 02, ..., 12
      case "LL":
        return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(month + 1, 2);
      // 1st, 2nd, ..., 12th
      case "Lo":
        return localize.ordinalNumber(month + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "LLL":
        return localize.month(month, {
          width: "abbreviated",
          context: "standalone",
        });
      // J, F, ..., D
      case "LLLLL":
        return localize.month(month, {
          width: "narrow",
          context: "standalone",
        });
      // January, February, ..., December
      case "LLLL":
      default:
        return localize.month(month, { width: "wide", context: "standalone" });
    }
  },

  // Local week of year
  w: function (date, token, localize, options) {
    const week = (0,_getWeek_mjs__WEBPACK_IMPORTED_MODULE_4__.getWeek)(date, options);

    if (token === "wo") {
      return localize.ordinalNumber(week, { unit: "week" });
    }

    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(week, token.length);
  },

  // ISO week of year
  I: function (date, token, localize) {
    const isoWeek = (0,_getISOWeek_mjs__WEBPACK_IMPORTED_MODULE_5__.getISOWeek)(date);

    if (token === "Io") {
      return localize.ordinalNumber(isoWeek, { unit: "week" });
    }

    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(isoWeek, token.length);
  },

  // Day of the month
  d: function (date, token, localize) {
    if (token === "do") {
      return localize.ordinalNumber(date.getDate(), { unit: "date" });
    }

    return _lightFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.d(date, token);
  },

  // Day of year
  D: function (date, token, localize) {
    const dayOfYear = (0,_getDayOfYear_mjs__WEBPACK_IMPORTED_MODULE_6__.getDayOfYear)(date);

    if (token === "Do") {
      return localize.ordinalNumber(dayOfYear, { unit: "dayOfYear" });
    }

    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(dayOfYear, token.length);
  },

  // Day of week
  E: function (date, token, localize) {
    const dayOfWeek = date.getDay();
    switch (token) {
      // Tue
      case "E":
      case "EE":
      case "EEE":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting",
        });
      // T
      case "EEEEE":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "formatting",
        });
      // Tu
      case "EEEEEE":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "formatting",
        });
      // Tuesday
      case "EEEE":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // Local day of week
  e: function (date, token, localize, options) {
    const dayOfWeek = date.getDay();
    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case "e":
        return String(localDayOfWeek);
      // Padded numerical value
      case "ee":
        return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th
      case "eo":
        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });
      case "eee":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting",
        });
      // T
      case "eeeee":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "formatting",
        });
      // Tu
      case "eeeeee":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "formatting",
        });
      // Tuesday
      case "eeee":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // Stand-alone local day of week
  c: function (date, token, localize, options) {
    const dayOfWeek = date.getDay();
    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (same as in `e`)
      case "c":
        return String(localDayOfWeek);
      // Padded numerical value
      case "cc":
        return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th
      case "co":
        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });
      case "ccc":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone",
        });
      // T
      case "ccccc":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "standalone",
        });
      // Tu
      case "cccccc":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "standalone",
        });
      // Tuesday
      case "cccc":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "standalone",
        });
    }
  },

  // ISO day of week
  i: function (date, token, localize) {
    const dayOfWeek = date.getDay();
    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      // 2
      case "i":
        return String(isoDayOfWeek);
      // 02
      case "ii":
        return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(isoDayOfWeek, token.length);
      // 2nd
      case "io":
        return localize.ordinalNumber(isoDayOfWeek, { unit: "day" });
      // Tue
      case "iii":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting",
        });
      // T
      case "iiiii":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "formatting",
        });
      // Tu
      case "iiiiii":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "formatting",
        });
      // Tuesday
      case "iiii":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // AM or PM
  a: function (date, token, localize) {
    const hours = date.getHours();
    const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";

    switch (token) {
      case "a":
      case "aa":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting",
        });
      case "aaa":
        return localize
          .dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting",
          })
          .toLowerCase();
      case "aaaaa":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting",
        });
      case "aaaa":
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // AM, PM, midnight, noon
  b: function (date, token, localize) {
    const hours = date.getHours();
    let dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }

    switch (token) {
      case "b":
      case "bb":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting",
        });
      case "bbb":
        return localize
          .dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting",
          })
          .toLowerCase();
      case "bbbbb":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting",
        });
      case "bbbb":
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // in the morning, in the afternoon, in the evening, at night
  B: function (date, token, localize) {
    const hours = date.getHours();
    let dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }

    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting",
        });
      case "BBBBB":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting",
        });
      case "BBBB":
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // Hour [1-12]
  h: function (date, token, localize) {
    if (token === "ho") {
      let hours = date.getHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, { unit: "hour" });
    }

    return _lightFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.h(date, token);
  },

  // Hour [0-23]
  H: function (date, token, localize) {
    if (token === "Ho") {
      return localize.ordinalNumber(date.getHours(), { unit: "hour" });
    }

    return _lightFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.H(date, token);
  },

  // Hour [0-11]
  K: function (date, token, localize) {
    const hours = date.getHours() % 12;

    if (token === "Ko") {
      return localize.ordinalNumber(hours, { unit: "hour" });
    }

    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(hours, token.length);
  },

  // Hour [1-24]
  k: function (date, token, localize) {
    let hours = date.getHours();
    if (hours === 0) hours = 24;

    if (token === "ko") {
      return localize.ordinalNumber(hours, { unit: "hour" });
    }

    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(hours, token.length);
  },

  // Minute
  m: function (date, token, localize) {
    if (token === "mo") {
      return localize.ordinalNumber(date.getMinutes(), { unit: "minute" });
    }

    return _lightFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.m(date, token);
  },

  // Second
  s: function (date, token, localize) {
    if (token === "so") {
      return localize.ordinalNumber(date.getSeconds(), { unit: "second" });
    }

    return _lightFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.s(date, token);
  },

  // Fraction of second
  S: function (date, token) {
    return _lightFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.S(date, token);
  },

  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function (date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();

    if (timezoneOffset === 0) {
      return "Z";
    }

    switch (token) {
      // Hours and optional minutes
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);

      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`
      case "XXXX":
      case "XX": // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);

      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`
      case "XXXXX":
      case "XXX": // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },

  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function (date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();

    switch (token) {
      // Hours and optional minutes
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);

      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`
      case "xxxx":
      case "xx": // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);

      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`
      case "xxxxx":
      case "xxx": // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },

  // Timezone (GMT)
  O: function (date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();

    switch (token) {
      // Short
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      // Long
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },

  // Timezone (specific non-location)
  z: function (date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();

    switch (token) {
      // Short
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      // Long
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },

  // Seconds timestamp
  t: function (date, token, _localize) {
    const timestamp = Math.trunc(date.getTime() / 1000);
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(timestamp, token.length);
  },

  // Milliseconds timestamp
  T: function (date, token, _localize) {
    const timestamp = date.getTime();
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(timestamp, token.length);
  },
};

function formatTimezoneShort(offset, delimiter = "") {
  const sign = offset > 0 ? "-" : "+";
  const absOffset = Math.abs(offset);
  const hours = Math.trunc(absOffset / 60);
  const minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  return sign + String(hours) + delimiter + (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(minutes, 2);
}

function formatTimezoneWithOptionalMinutes(offset, delimiter) {
  if (offset % 60 === 0) {
    const sign = offset > 0 ? "-" : "+";
    return sign + (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, delimiter);
}

function formatTimezone(offset, delimiter = "") {
  const sign = offset > 0 ? "-" : "+";
  const absOffset = Math.abs(offset);
  const hours = (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(Math.trunc(absOffset / 60), 2);
  const minutes = (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}


/***/ }),

/***/ "./node_modules/date-fns/_lib/format/lightFormatters.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/date-fns/_lib/format/lightFormatters.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   lightFormatters: () => (/* binding */ lightFormatters)
/* harmony export */ });
/* harmony import */ var _addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../addLeadingZeros.mjs */ "./node_modules/date-fns/_lib/addLeadingZeros.mjs");


/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */

const lightFormatters = {
  // Year
  y(date, token) {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

    const signedYear = date.getFullYear();
    // Returns 1 for 1 BC (which is year 0 in JavaScript)
    const year = signedYear > 0 ? signedYear : 1 - signedYear;
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(token === "yy" ? year % 100 : year, token.length);
  },

  // Month
  M(date, token) {
    const month = date.getMonth();
    return token === "M" ? String(month + 1) : (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(month + 1, 2);
  },

  // Day of the month
  d(date, token) {
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(date.getDate(), token.length);
  },

  // AM or PM
  a(date, token) {
    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";

    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },

  // Hour [1-12]
  h(date, token) {
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(date.getHours() % 12 || 12, token.length);
  },

  // Hour [0-23]
  H(date, token) {
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(date.getHours(), token.length);
  },

  // Minute
  m(date, token) {
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(date.getMinutes(), token.length);
  },

  // Second
  s(date, token) {
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(date.getSeconds(), token.length);
  },

  // Fraction of second
  S(date, token) {
    const numberOfDigits = token.length;
    const milliseconds = date.getMilliseconds();
    const fractionalSeconds = Math.trunc(
      milliseconds * Math.pow(10, numberOfDigits - 3),
    );
    return (0,_addLeadingZeros_mjs__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(fractionalSeconds, token.length);
  },
};


/***/ }),

/***/ "./node_modules/date-fns/_lib/format/longFormatters.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/date-fns/_lib/format/longFormatters.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   longFormatters: () => (/* binding */ longFormatters)
/* harmony export */ });
const dateLongFormatter = (pattern, formatLong) => {
  switch (pattern) {
    case "P":
      return formatLong.date({ width: "short" });
    case "PP":
      return formatLong.date({ width: "medium" });
    case "PPP":
      return formatLong.date({ width: "long" });
    case "PPPP":
    default:
      return formatLong.date({ width: "full" });
  }
};

const timeLongFormatter = (pattern, formatLong) => {
  switch (pattern) {
    case "p":
      return formatLong.time({ width: "short" });
    case "pp":
      return formatLong.time({ width: "medium" });
    case "ppp":
      return formatLong.time({ width: "long" });
    case "pppp":
    default:
      return formatLong.time({ width: "full" });
  }
};

const dateTimeLongFormatter = (pattern, formatLong) => {
  const matchResult = pattern.match(/(P+)(p+)?/) || [];
  const datePattern = matchResult[1];
  const timePattern = matchResult[2];

  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }

  let dateTimeFormat;

  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong.dateTime({ width: "short" });
      break;
    case "PP":
      dateTimeFormat = formatLong.dateTime({ width: "medium" });
      break;
    case "PPP":
      dateTimeFormat = formatLong.dateTime({ width: "long" });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong.dateTime({ width: "full" });
      break;
  }

  return dateTimeFormat
    .replace("{{date}}", dateLongFormatter(datePattern, formatLong))
    .replace("{{time}}", timeLongFormatter(timePattern, formatLong));
};

const longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter,
};


/***/ }),

/***/ "./node_modules/date-fns/_lib/getRoundingMethod.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/date-fns/_lib/getRoundingMethod.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getRoundingMethod: () => (/* binding */ getRoundingMethod)
/* harmony export */ });
function getRoundingMethod(method) {
  return (number) => {
    const round = method ? Math[method] : Math.trunc;
    const result = round(number);
    // Prevent negative zero
    return result === 0 ? 0 : result;
  };
}


/***/ }),

/***/ "./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getTimezoneOffsetInMilliseconds: () => (/* binding */ getTimezoneOffsetInMilliseconds)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const utcDate = new Date(
    Date.UTC(
      _date.getFullYear(),
      _date.getMonth(),
      _date.getDate(),
      _date.getHours(),
      _date.getMinutes(),
      _date.getSeconds(),
      _date.getMilliseconds(),
    ),
  );
  utcDate.setUTCFullYear(_date.getFullYear());
  return +date - +utcDate;
}


/***/ }),

/***/ "./node_modules/date-fns/_lib/protectedTokens.mjs":
/*!********************************************************!*\
  !*** ./node_modules/date-fns/_lib/protectedTokens.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isProtectedDayOfYearToken: () => (/* binding */ isProtectedDayOfYearToken),
/* harmony export */   isProtectedWeekYearToken: () => (/* binding */ isProtectedWeekYearToken),
/* harmony export */   warnOrThrowProtectedError: () => (/* binding */ warnOrThrowProtectedError)
/* harmony export */ });
const dayOfYearTokenRE = /^D+$/;
const weekYearTokenRE = /^Y+$/;

const throwTokens = ["D", "DD", "YY", "YYYY"];

function isProtectedDayOfYearToken(token) {
  return dayOfYearTokenRE.test(token);
}

function isProtectedWeekYearToken(token) {
  return weekYearTokenRE.test(token);
}

function warnOrThrowProtectedError(token, format, input) {
  const _message = message(token, format, input);
  console.warn(_message);
  if (throwTokens.includes(token)) throw new RangeError(_message);
}

function message(token, format, input) {
  const subject = token[0] === "Y" ? "years" : "days of the month";
  return `Use \`${token.toLowerCase()}\` instead of \`${token}\` (in \`${format}\`) for formatting ${subject} to the input \`${input}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
}


/***/ }),

/***/ "./node_modules/date-fns/addDays.mjs":
/*!*******************************************!*\
  !*** ./node_modules/date-fns/addDays.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addDays: () => (/* binding */ addDays),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");



/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of days to be added.
 *
 * @returns The new date with the days added
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */
function addDays(date, amount) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  if (isNaN(amount)) return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(date, NaN);
  if (!amount) {
    // If 0 days, no-op to avoid changing times in the hour before end of DST
    return _date;
  }
  _date.setDate(_date.getDate() + amount);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addDays);


/***/ }),

/***/ "./node_modules/date-fns/addHours.mjs":
/*!********************************************!*\
  !*** ./node_modules/date-fns/addHours.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addHours: () => (/* binding */ addHours),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _addMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addMilliseconds.mjs */ "./node_modules/date-fns/addMilliseconds.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/date-fns/constants.mjs");



/**
 * @name addHours
 * @category Hour Helpers
 * @summary Add the specified number of hours to the given date.
 *
 * @description
 * Add the specified number of hours to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of hours to be added.
 *
 * @returns The new date with the hours added
 *
 * @example
 * // Add 2 hours to 10 July 2014 23:00:00:
 * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
 * //=> Fri Jul 11 2014 01:00:00
 */
function addHours(date, amount) {
  return (0,_addMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__.addMilliseconds)(date, amount * _constants_mjs__WEBPACK_IMPORTED_MODULE_1__.millisecondsInHour);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addHours);


/***/ }),

/***/ "./node_modules/date-fns/addMilliseconds.mjs":
/*!***************************************************!*\
  !*** ./node_modules/date-fns/addMilliseconds.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addMilliseconds: () => (/* binding */ addMilliseconds),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");



/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of milliseconds to be added.
 *
 * @returns The new date with the milliseconds added
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
function addMilliseconds(date, amount) {
  const timestamp = +(0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(date, timestamp + amount);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addMilliseconds);


/***/ }),

/***/ "./node_modules/date-fns/addMinutes.mjs":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/addMinutes.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addMinutes: () => (/* binding */ addMinutes),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _addMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addMilliseconds.mjs */ "./node_modules/date-fns/addMilliseconds.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/date-fns/constants.mjs");



/**
 * @name addMinutes
 * @category Minute Helpers
 * @summary Add the specified number of minutes to the given date.
 *
 * @description
 * Add the specified number of minutes to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of minutes to be added.
 *
 * @returns The new date with the minutes added
 *
 * @example
 * // Add 30 minutes to 10 July 2014 12:00:00:
 * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
 * //=> Thu Jul 10 2014 12:30:00
 */
function addMinutes(date, amount) {
  return (0,_addMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__.addMilliseconds)(date, amount * _constants_mjs__WEBPACK_IMPORTED_MODULE_1__.millisecondsInMinute);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addMinutes);


/***/ }),

/***/ "./node_modules/date-fns/addMonths.mjs":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/addMonths.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addMonths: () => (/* binding */ addMonths),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");



/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of months to be added.
 *
 * @returns The new date with the months added
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 *
 * // Add one month to 30 January 2023:
 * const result = addMonths(new Date(2023, 0, 30), 1)
 * //=> Tue Feb 28 2023 00:00:00
 */
function addMonths(date, amount) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  if (isNaN(amount)) return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(date, NaN);
  if (!amount) {
    // If 0 months, no-op to avoid changing times in the hour before end of DST
    return _date;
  }
  const dayOfMonth = _date.getDate();

  // The JS Date object supports date math by accepting out-of-bounds values for
  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
  // want except that dates will wrap around the end of a month, meaning that
  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
  // we'll default to the end of the desired month by adding 1 to the desired
  // month and using a date of 0 to back up one day to the end of the desired
  // month.
  const endOfDesiredMonth = (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(date, _date.getTime());
  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);
  const daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    // If we're already at the end of the month, then this is the correct date
    // and we're done.
    return endOfDesiredMonth;
  } else {
    // Otherwise, we now know that setting the original day-of-month value won't
    // cause an overflow, so set the desired day-of-month. Note that we can't
    // just set the date of `endOfDesiredMonth` because that object may have had
    // its time changed in the unusual case where where a DST transition was on
    // the last day of the month and its local time was in the hour skipped or
    // repeated next to a DST transition.  So we use `date` instead which is
    // guaranteed to still have the original time.
    _date.setFullYear(
      endOfDesiredMonth.getFullYear(),
      endOfDesiredMonth.getMonth(),
      dayOfMonth,
    );
    return _date;
  }
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addMonths);


/***/ }),

/***/ "./node_modules/date-fns/addQuarters.mjs":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/addQuarters.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addQuarters: () => (/* binding */ addQuarters),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _addMonths_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addMonths.mjs */ "./node_modules/date-fns/addMonths.mjs");


/**
 * @name addQuarters
 * @category Quarter Helpers
 * @summary Add the specified number of year quarters to the given date.
 *
 * @description
 * Add the specified number of year quarters to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of quarters to be added.
 *
 * @returns The new date with the quarters added
 *
 * @example
 * // Add 1 quarter to 1 September 2014:
 * const result = addQuarters(new Date(2014, 8, 1), 1)
 * //=> Mon Dec 01 2014 00:00:00
 */
function addQuarters(date, amount) {
  const months = amount * 3;
  return (0,_addMonths_mjs__WEBPACK_IMPORTED_MODULE_0__.addMonths)(date, months);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addQuarters);


/***/ }),

/***/ "./node_modules/date-fns/addSeconds.mjs":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/addSeconds.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addSeconds: () => (/* binding */ addSeconds),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _addMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addMilliseconds.mjs */ "./node_modules/date-fns/addMilliseconds.mjs");


/**
 * @name addSeconds
 * @category Second Helpers
 * @summary Add the specified number of seconds to the given date.
 *
 * @description
 * Add the specified number of seconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of seconds to be added.
 *
 * @returns The new date with the seconds added
 *
 * @example
 * // Add 30 seconds to 10 July 2014 12:45:00:
 * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:45:30
 */
function addSeconds(date, amount) {
  return (0,_addMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__.addMilliseconds)(date, amount * 1000);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addSeconds);


/***/ }),

/***/ "./node_modules/date-fns/addWeeks.mjs":
/*!********************************************!*\
  !*** ./node_modules/date-fns/addWeeks.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addWeeks: () => (/* binding */ addWeeks),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _addDays_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addDays.mjs */ "./node_modules/date-fns/addDays.mjs");


/**
 * @name addWeeks
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of week to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of weeks to be added.
 *
 * @returns The new date with the weeks added
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * const result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */
function addWeeks(date, amount) {
  const days = amount * 7;
  return (0,_addDays_mjs__WEBPACK_IMPORTED_MODULE_0__.addDays)(date, days);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addWeeks);


/***/ }),

/***/ "./node_modules/date-fns/addYears.mjs":
/*!********************************************!*\
  !*** ./node_modules/date-fns/addYears.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addYears: () => (/* binding */ addYears),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _addMonths_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addMonths.mjs */ "./node_modules/date-fns/addMonths.mjs");


/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of years to be added.
 *
 * @returns The new date with the years added
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * const result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */
function addYears(date, amount) {
  return (0,_addMonths_mjs__WEBPACK_IMPORTED_MODULE_0__.addMonths)(date, amount * 12);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addYears);


/***/ }),

/***/ "./node_modules/date-fns/compareAsc.mjs":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/compareAsc.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   compareAsc: () => (/* binding */ compareAsc),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name compareAsc
 * @category Common Helpers
 * @summary Compare the two dates and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return 1 if the first date is after the second,
 * -1 if the first date is before the second or 0 if dates are equal.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989:
 * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> -1
 *
 * @example
 * // Sort the array of dates:
 * const result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareAsc)
 * //=> [
 * //   Wed Feb 11 1987 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Sun Jul 02 1995 00:00:00
 * // ]
 */
function compareAsc(dateLeft, dateRight) {
  const _dateLeft = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateLeft);
  const _dateRight = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateRight);

  const diff = _dateLeft.getTime() - _dateRight.getTime();

  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
    // Return 0 if diff is 0; return NaN if diff is NaN
  } else {
    return diff;
  }
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (compareAsc);


/***/ }),

/***/ "./node_modules/date-fns/constants.mjs":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/constants.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   daysInWeek: () => (/* binding */ daysInWeek),
/* harmony export */   daysInYear: () => (/* binding */ daysInYear),
/* harmony export */   maxTime: () => (/* binding */ maxTime),
/* harmony export */   millisecondsInDay: () => (/* binding */ millisecondsInDay),
/* harmony export */   millisecondsInHour: () => (/* binding */ millisecondsInHour),
/* harmony export */   millisecondsInMinute: () => (/* binding */ millisecondsInMinute),
/* harmony export */   millisecondsInSecond: () => (/* binding */ millisecondsInSecond),
/* harmony export */   millisecondsInWeek: () => (/* binding */ millisecondsInWeek),
/* harmony export */   minTime: () => (/* binding */ minTime),
/* harmony export */   minutesInDay: () => (/* binding */ minutesInDay),
/* harmony export */   minutesInHour: () => (/* binding */ minutesInHour),
/* harmony export */   minutesInMonth: () => (/* binding */ minutesInMonth),
/* harmony export */   minutesInYear: () => (/* binding */ minutesInYear),
/* harmony export */   monthsInQuarter: () => (/* binding */ monthsInQuarter),
/* harmony export */   monthsInYear: () => (/* binding */ monthsInYear),
/* harmony export */   quartersInYear: () => (/* binding */ quartersInYear),
/* harmony export */   secondsInDay: () => (/* binding */ secondsInDay),
/* harmony export */   secondsInHour: () => (/* binding */ secondsInHour),
/* harmony export */   secondsInMinute: () => (/* binding */ secondsInMinute),
/* harmony export */   secondsInMonth: () => (/* binding */ secondsInMonth),
/* harmony export */   secondsInQuarter: () => (/* binding */ secondsInQuarter),
/* harmony export */   secondsInWeek: () => (/* binding */ secondsInWeek),
/* harmony export */   secondsInYear: () => (/* binding */ secondsInYear)
/* harmony export */ });
/**
 * @module constants
 * @summary Useful constants
 * @description
 * Collection of useful date constants.
 *
 * The constants could be imported from `date-fns/constants`:
 *
 * ```ts
 * import { maxTime, minTime } from "./constants/date-fns/constants";
 *
 * function isAllowedTime(time) {
 *   return time <= maxTime && time >= minTime;
 * }
 * ```
 */

/**
 * @constant
 * @name daysInWeek
 * @summary Days in 1 week.
 */
const daysInWeek = 7;

/**
 * @constant
 * @name daysInYear
 * @summary Days in 1 year.
 *
 * @description
 * How many days in a year.
 *
 * One years equals 365.2425 days according to the formula:
 *
 * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.
 * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days
 */
const daysInYear = 365.2425;

/**
 * @constant
 * @name maxTime
 * @summary Maximum allowed time.
 *
 * @example
 * import { maxTime } from "./constants/date-fns/constants";
 *
 * const isValid = 8640000000000001 <= maxTime;
 * //=> false
 *
 * new Date(8640000000000001);
 * //=> Invalid Date
 */
const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;

/**
 * @constant
 * @name minTime
 * @summary Minimum allowed time.
 *
 * @example
 * import { minTime } from "./constants/date-fns/constants";
 *
 * const isValid = -8640000000000001 >= minTime;
 * //=> false
 *
 * new Date(-8640000000000001)
 * //=> Invalid Date
 */
const minTime = -maxTime;

/**
 * @constant
 * @name millisecondsInWeek
 * @summary Milliseconds in 1 week.
 */
const millisecondsInWeek = 604800000;

/**
 * @constant
 * @name millisecondsInDay
 * @summary Milliseconds in 1 day.
 */
const millisecondsInDay = 86400000;

/**
 * @constant
 * @name millisecondsInMinute
 * @summary Milliseconds in 1 minute
 */
const millisecondsInMinute = 60000;

/**
 * @constant
 * @name millisecondsInHour
 * @summary Milliseconds in 1 hour
 */
const millisecondsInHour = 3600000;

/**
 * @constant
 * @name millisecondsInSecond
 * @summary Milliseconds in 1 second
 */
const millisecondsInSecond = 1000;

/**
 * @constant
 * @name minutesInYear
 * @summary Minutes in 1 year.
 */
const minutesInYear = 525600;

/**
 * @constant
 * @name minutesInMonth
 * @summary Minutes in 1 month.
 */
const minutesInMonth = 43200;

/**
 * @constant
 * @name minutesInDay
 * @summary Minutes in 1 day.
 */
const minutesInDay = 1440;

/**
 * @constant
 * @name minutesInHour
 * @summary Minutes in 1 hour.
 */
const minutesInHour = 60;

/**
 * @constant
 * @name monthsInQuarter
 * @summary Months in 1 quarter.
 */
const monthsInQuarter = 3;

/**
 * @constant
 * @name monthsInYear
 * @summary Months in 1 year.
 */
const monthsInYear = 12;

/**
 * @constant
 * @name quartersInYear
 * @summary Quarters in 1 year
 */
const quartersInYear = 4;

/**
 * @constant
 * @name secondsInHour
 * @summary Seconds in 1 hour.
 */
const secondsInHour = 3600;

/**
 * @constant
 * @name secondsInMinute
 * @summary Seconds in 1 minute.
 */
const secondsInMinute = 60;

/**
 * @constant
 * @name secondsInDay
 * @summary Seconds in 1 day.
 */
const secondsInDay = secondsInHour * 24;

/**
 * @constant
 * @name secondsInWeek
 * @summary Seconds in 1 week.
 */
const secondsInWeek = secondsInDay * 7;

/**
 * @constant
 * @name secondsInYear
 * @summary Seconds in 1 year.
 */
const secondsInYear = secondsInDay * daysInYear;

/**
 * @constant
 * @name secondsInMonth
 * @summary Seconds in 1 month
 */
const secondsInMonth = secondsInYear / 12;

/**
 * @constant
 * @name secondsInQuarter
 * @summary Seconds in 1 quarter.
 */
const secondsInQuarter = secondsInMonth * 3;


/***/ }),

/***/ "./node_modules/date-fns/constructFrom.mjs":
/*!*************************************************!*\
  !*** ./node_modules/date-fns/constructFrom.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   constructFrom: () => (/* binding */ constructFrom),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @name constructFrom
 * @category Generic Helpers
 * @summary Constructs a date using the reference date and the value
 *
 * @description
 * The function constructs a new date using the constructor from the reference
 * date and the given value. It helps to build generic functions that accept
 * date extensions.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The reference date to take constructor from
 * @param value - The value to create the date
 *
 * @returns Date initialized using the given date and value
 *
 * @example
 * import { constructFrom } from 'date-fns'
 *
 * // A function that clones a date preserving the original type
 * function cloneDate<DateType extends Date(date: DateType): DateType {
 *   return constructFrom(
 *     date, // Use contrustor from the given date
 *     date.getTime() // Use the date value to create a new date
 *   )
 * }
 */
function constructFrom(date, value) {
  if (date instanceof Date) {
    return new date.constructor(value);
  } else {
    return new Date(value);
  }
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (constructFrom);


/***/ }),

/***/ "./node_modules/date-fns/differenceInCalendarDays.mjs":
/*!************************************************************!*\
  !*** ./node_modules/date-fns/differenceInCalendarDays.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInCalendarDays: () => (/* binding */ differenceInCalendarDays)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/date-fns/constants.mjs");
/* harmony import */ var _startOfDay_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./startOfDay.mjs */ "./node_modules/date-fns/startOfDay.mjs");
/* harmony import */ var _lib_getTimezoneOffsetInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_lib/getTimezoneOffsetInMilliseconds.mjs */ "./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs");




/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of calendar days
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */
function differenceInCalendarDays(dateLeft, dateRight) {
  const startOfDayLeft = (0,_startOfDay_mjs__WEBPACK_IMPORTED_MODULE_0__.startOfDay)(dateLeft);
  const startOfDayRight = (0,_startOfDay_mjs__WEBPACK_IMPORTED_MODULE_0__.startOfDay)(dateRight);

  const timestampLeft =
    +startOfDayLeft - (0,_lib_getTimezoneOffsetInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_1__.getTimezoneOffsetInMilliseconds)(startOfDayLeft);
  const timestampRight =
    +startOfDayRight - (0,_lib_getTimezoneOffsetInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_1__.getTimezoneOffsetInMilliseconds)(startOfDayRight);

  // Round the number of days to the nearest integer because the number of
  // milliseconds in a day is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round((timestampLeft - timestampRight) / _constants_mjs__WEBPACK_IMPORTED_MODULE_2__.millisecondsInDay);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInCalendarDays);


/***/ }),

/***/ "./node_modules/date-fns/differenceInCalendarMonths.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/date-fns/differenceInCalendarMonths.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInCalendarMonths: () => (/* binding */ differenceInCalendarMonths)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of calendar months
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */
function differenceInCalendarMonths(dateLeft, dateRight) {
  const _dateLeft = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateLeft);
  const _dateRight = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateRight);

  const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();
  const monthDiff = _dateLeft.getMonth() - _dateRight.getMonth();

  return yearDiff * 12 + monthDiff;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInCalendarMonths);


/***/ }),

/***/ "./node_modules/date-fns/differenceInCalendarYears.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/date-fns/differenceInCalendarYears.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInCalendarYears: () => (/* binding */ differenceInCalendarYears)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name differenceInCalendarYears
 * @category Year Helpers
 * @summary Get the number of calendar years between the given dates.
 *
 * @description
 * Get the number of calendar years between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date

 * @returns The number of calendar years
 *
 * @example
 * // How many calendar years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInCalendarYears(
 *   new Date(2015, 1, 11),
 *   new Date(2013, 11, 31)
 * )
 * //=> 2
 */
function differenceInCalendarYears(dateLeft, dateRight) {
  const _dateLeft = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateLeft);
  const _dateRight = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateRight);

  return _dateLeft.getFullYear() - _dateRight.getFullYear();
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInCalendarYears);


/***/ }),

/***/ "./node_modules/date-fns/differenceInDays.mjs":
/*!****************************************************!*\
  !*** ./node_modules/date-fns/differenceInDays.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInDays: () => (/* binding */ differenceInDays)
/* harmony export */ });
/* harmony import */ var _differenceInCalendarDays_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./differenceInCalendarDays.mjs */ "./node_modules/date-fns/differenceInCalendarDays.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");



/**
 * @name differenceInDays
 * @category Day Helpers
 * @summary Get the number of full days between the given dates.
 *
 * @description
 * Get the number of full day periods between two dates. Fractional days are
 * truncated towards zero.
 *
 * One "full day" is the distance between a local time in one day to the same
 * local time on the next or previous day. A full day can sometimes be less than
 * or more than 24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 24-hour periods, use this instead:
 * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of full days according to the local timezone
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 365
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 0
 *
 * @example
 * // How many full days are between
 * // 1 March 2020 0:00 and 1 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 92 days, even in
 * // time zones where DST starts and the
 * // period has only 92*24-1 hours.
 * const result = differenceInDays(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 1)
 * )
 * //=> 92
 */
function differenceInDays(dateLeft, dateRight) {
  const _dateLeft = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateLeft);
  const _dateRight = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateRight);

  const sign = compareLocalAsc(_dateLeft, _dateRight);
  const difference = Math.abs((0,_differenceInCalendarDays_mjs__WEBPACK_IMPORTED_MODULE_1__.differenceInCalendarDays)(_dateLeft, _dateRight));

  _dateLeft.setDate(_dateLeft.getDate() - sign * difference);

  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
  // If so, result must be decreased by 1 in absolute value
  const isLastDayNotFull = Number(
    compareLocalAsc(_dateLeft, _dateRight) === -sign,
  );
  const result = sign * (difference - isLastDayNotFull);
  // Prevent negative zero
  return result === 0 ? 0 : result;
}

// Like `compareAsc` but uses local time not UTC, which is needed
// for accurate equality comparisons of UTC timestamps that end up
// having the same representation in local time, e.g. one hour before
// DST ends vs. the instant that DST ends.
function compareLocalAsc(dateLeft, dateRight) {
  const diff =
    dateLeft.getFullYear() - dateRight.getFullYear() ||
    dateLeft.getMonth() - dateRight.getMonth() ||
    dateLeft.getDate() - dateRight.getDate() ||
    dateLeft.getHours() - dateRight.getHours() ||
    dateLeft.getMinutes() - dateRight.getMinutes() ||
    dateLeft.getSeconds() - dateRight.getSeconds() ||
    dateLeft.getMilliseconds() - dateRight.getMilliseconds();

  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
    // Return 0 if diff is 0; return NaN if diff is NaN
  } else {
    return diff;
  }
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInDays);


/***/ }),

/***/ "./node_modules/date-fns/differenceInHours.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/differenceInHours.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInHours: () => (/* binding */ differenceInHours)
/* harmony export */ });
/* harmony import */ var _lib_getRoundingMethod_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_lib/getRoundingMethod.mjs */ "./node_modules/date-fns/_lib/getRoundingMethod.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/date-fns/constants.mjs");
/* harmony import */ var _differenceInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./differenceInMilliseconds.mjs */ "./node_modules/date-fns/differenceInMilliseconds.mjs");




/**
 * The {@link differenceInHours} function options.
 */

/**
 * @name differenceInHours
 * @category Hour Helpers
 * @summary Get the number of hours between the given dates.
 *
 * @description
 * Get the number of hours between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of hours
 *
 * @example
 * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
 * const result = differenceInHours(
 *   new Date(2014, 6, 2, 19, 0),
 *   new Date(2014, 6, 2, 6, 50)
 * )
 * //=> 12
 */
function differenceInHours(dateLeft, dateRight, options) {
  const diff =
    (0,_differenceInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__.differenceInMilliseconds)(dateLeft, dateRight) / _constants_mjs__WEBPACK_IMPORTED_MODULE_1__.millisecondsInHour;
  return (0,_lib_getRoundingMethod_mjs__WEBPACK_IMPORTED_MODULE_2__.getRoundingMethod)(options?.roundingMethod)(diff);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInHours);


/***/ }),

/***/ "./node_modules/date-fns/differenceInMilliseconds.mjs":
/*!************************************************************!*\
  !*** ./node_modules/date-fns/differenceInMilliseconds.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInMilliseconds: () => (/* binding */ differenceInMilliseconds)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name differenceInMilliseconds
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of milliseconds
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * const result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */
function differenceInMilliseconds(dateLeft, dateRight) {
  return +(0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateLeft) - +(0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateRight);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInMilliseconds);


/***/ }),

/***/ "./node_modules/date-fns/differenceInMinutes.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/date-fns/differenceInMinutes.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInMinutes: () => (/* binding */ differenceInMinutes)
/* harmony export */ });
/* harmony import */ var _lib_getRoundingMethod_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_lib/getRoundingMethod.mjs */ "./node_modules/date-fns/_lib/getRoundingMethod.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/date-fns/constants.mjs");
/* harmony import */ var _differenceInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./differenceInMilliseconds.mjs */ "./node_modules/date-fns/differenceInMilliseconds.mjs");




/**
 * The {@link differenceInMinutes} function options.
 */

/**
 * @name differenceInMinutes
 * @category Minute Helpers
 * @summary Get the number of minutes between the given dates.
 *
 * @description
 * Get the signed number of full (rounded towards 0) minutes between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of minutes
 *
 * @example
 * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
 * const result = differenceInMinutes(
 *   new Date(2014, 6, 2, 12, 20, 0),
 *   new Date(2014, 6, 2, 12, 7, 59)
 * )
 * //=> 12
 *
 * @example
 * // How many minutes are between 10:01:59 and 10:00:00
 * const result = differenceInMinutes(
 *   new Date(2000, 0, 1, 10, 0, 0),
 *   new Date(2000, 0, 1, 10, 1, 59)
 * )
 * //=> -1
 */
function differenceInMinutes(dateLeft, dateRight, options) {
  const diff =
    (0,_differenceInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__.differenceInMilliseconds)(dateLeft, dateRight) / _constants_mjs__WEBPACK_IMPORTED_MODULE_1__.millisecondsInMinute;
  return (0,_lib_getRoundingMethod_mjs__WEBPACK_IMPORTED_MODULE_2__.getRoundingMethod)(options?.roundingMethod)(diff);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInMinutes);


/***/ }),

/***/ "./node_modules/date-fns/differenceInMonths.mjs":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/differenceInMonths.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInMonths: () => (/* binding */ differenceInMonths)
/* harmony export */ });
/* harmony import */ var _compareAsc_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compareAsc.mjs */ "./node_modules/date-fns/compareAsc.mjs");
/* harmony import */ var _differenceInCalendarMonths_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./differenceInCalendarMonths.mjs */ "./node_modules/date-fns/differenceInCalendarMonths.mjs");
/* harmony import */ var _isLastDayOfMonth_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isLastDayOfMonth.mjs */ "./node_modules/date-fns/isLastDayOfMonth.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");





/**
 * @name differenceInMonths
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @description
 * Get the number of full months between the given dates using trunc as a default rounding method.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of full months
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
 * //=> 7
 */
function differenceInMonths(dateLeft, dateRight) {
  const _dateLeft = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateLeft);
  const _dateRight = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateRight);

  const sign = (0,_compareAsc_mjs__WEBPACK_IMPORTED_MODULE_1__.compareAsc)(_dateLeft, _dateRight);
  const difference = Math.abs(
    (0,_differenceInCalendarMonths_mjs__WEBPACK_IMPORTED_MODULE_2__.differenceInCalendarMonths)(_dateLeft, _dateRight),
  );
  let result;

  // Check for the difference of less than month
  if (difference < 1) {
    result = 0;
  } else {
    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {
      // This will check if the date is end of Feb and assign a higher end of month date
      // to compare it with Jan
      _dateLeft.setDate(30);
    }

    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);

    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
    // If so, result must be decreased by 1 in absolute value
    let isLastMonthNotFull = (0,_compareAsc_mjs__WEBPACK_IMPORTED_MODULE_1__.compareAsc)(_dateLeft, _dateRight) === -sign;

    // Check for cases of one full calendar month
    if (
      (0,_isLastDayOfMonth_mjs__WEBPACK_IMPORTED_MODULE_3__.isLastDayOfMonth)((0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateLeft)) &&
      difference === 1 &&
      (0,_compareAsc_mjs__WEBPACK_IMPORTED_MODULE_1__.compareAsc)(dateLeft, _dateRight) === 1
    ) {
      isLastMonthNotFull = false;
    }

    result = sign * (difference - Number(isLastMonthNotFull));
  }

  // Prevent negative zero
  return result === 0 ? 0 : result;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInMonths);


/***/ }),

/***/ "./node_modules/date-fns/differenceInQuarters.mjs":
/*!********************************************************!*\
  !*** ./node_modules/date-fns/differenceInQuarters.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInQuarters: () => (/* binding */ differenceInQuarters)
/* harmony export */ });
/* harmony import */ var _lib_getRoundingMethod_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_lib/getRoundingMethod.mjs */ "./node_modules/date-fns/_lib/getRoundingMethod.mjs");
/* harmony import */ var _differenceInMonths_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./differenceInMonths.mjs */ "./node_modules/date-fns/differenceInMonths.mjs");



/**
 * The {@link differenceInQuarters} function options.
 */

/**
 * @name differenceInQuarters
 * @category Quarter Helpers
 * @summary Get the number of quarters between the given dates.
 *
 * @description
 * Get the number of quarters between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of full quarters
 *
 * @example
 * // How many full quarters are between 31 December 2013 and 2 July 2014?
 * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))
 * //=> 2
 */
function differenceInQuarters(dateLeft, dateRight, options) {
  const diff = (0,_differenceInMonths_mjs__WEBPACK_IMPORTED_MODULE_0__.differenceInMonths)(dateLeft, dateRight) / 3;
  return (0,_lib_getRoundingMethod_mjs__WEBPACK_IMPORTED_MODULE_1__.getRoundingMethod)(options?.roundingMethod)(diff);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInQuarters);


/***/ }),

/***/ "./node_modules/date-fns/differenceInSeconds.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/date-fns/differenceInSeconds.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInSeconds: () => (/* binding */ differenceInSeconds)
/* harmony export */ });
/* harmony import */ var _lib_getRoundingMethod_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_lib/getRoundingMethod.mjs */ "./node_modules/date-fns/_lib/getRoundingMethod.mjs");
/* harmony import */ var _differenceInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./differenceInMilliseconds.mjs */ "./node_modules/date-fns/differenceInMilliseconds.mjs");



/**
 * The {@link differenceInSeconds} function options.
 */

/**
 * @name differenceInSeconds
 * @category Second Helpers
 * @summary Get the number of seconds between the given dates.
 *
 * @description
 * Get the number of seconds between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of seconds
 *
 * @example
 * // How many seconds are between
 * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
 * const result = differenceInSeconds(
 *   new Date(2014, 6, 2, 12, 30, 20, 0),
 *   new Date(2014, 6, 2, 12, 30, 7, 999)
 * )
 * //=> 12
 */
function differenceInSeconds(dateLeft, dateRight, options) {
  const diff = (0,_differenceInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_0__.differenceInMilliseconds)(dateLeft, dateRight) / 1000;
  return (0,_lib_getRoundingMethod_mjs__WEBPACK_IMPORTED_MODULE_1__.getRoundingMethod)(options?.roundingMethod)(diff);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInSeconds);


/***/ }),

/***/ "./node_modules/date-fns/differenceInWeeks.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/differenceInWeeks.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInWeeks: () => (/* binding */ differenceInWeeks)
/* harmony export */ });
/* harmony import */ var _lib_getRoundingMethod_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_lib/getRoundingMethod.mjs */ "./node_modules/date-fns/_lib/getRoundingMethod.mjs");
/* harmony import */ var _differenceInDays_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./differenceInDays.mjs */ "./node_modules/date-fns/differenceInDays.mjs");



/**
 * The {@link differenceInWeeks} function options.
 */

/**
 * @name differenceInWeeks
 * @category Week Helpers
 * @summary Get the number of full weeks between the given dates.
 *
 * @description
 * Get the number of full weeks between two dates. Fractional weeks are
 * truncated towards zero by default.
 *
 * One "full week" is the distance between a local time in one day to the same
 * local time 7 days earlier or later. A full week can sometimes be less than
 * or more than 7*24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 7*24-hour periods, use this instead:
 * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full weeks
 *
 * @example
 * // How many full weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))
 * //=> 2
 *
 * @example
 * // How many full weeks are between
 * // 1 March 2020 0:00 and 6 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 8 weeks (54 days),
 * // even if DST starts and the period has
 * // only 54*24-1 hours.
 * const result = differenceInWeeks(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 6)
 * )
 * //=> 8
 */
function differenceInWeeks(dateLeft, dateRight, options) {
  const diff = (0,_differenceInDays_mjs__WEBPACK_IMPORTED_MODULE_0__.differenceInDays)(dateLeft, dateRight) / 7;
  return (0,_lib_getRoundingMethod_mjs__WEBPACK_IMPORTED_MODULE_1__.getRoundingMethod)(options?.roundingMethod)(diff);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInWeeks);


/***/ }),

/***/ "./node_modules/date-fns/differenceInYears.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/differenceInYears.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInYears: () => (/* binding */ differenceInYears)
/* harmony export */ });
/* harmony import */ var _compareAsc_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compareAsc.mjs */ "./node_modules/date-fns/compareAsc.mjs");
/* harmony import */ var _differenceInCalendarYears_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./differenceInCalendarYears.mjs */ "./node_modules/date-fns/differenceInCalendarYears.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");




/**
 * @name differenceInYears
 * @category Year Helpers
 * @summary Get the number of full years between the given dates.
 *
 * @description
 * Get the number of full years between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of full years
 *
 * @example
 * // How many full years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))
 * //=> 1
 */
function differenceInYears(dateLeft, dateRight) {
  const _dateLeft = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateLeft);
  const _dateRight = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateRight);

  const sign = (0,_compareAsc_mjs__WEBPACK_IMPORTED_MODULE_1__.compareAsc)(_dateLeft, _dateRight);
  const difference = Math.abs((0,_differenceInCalendarYears_mjs__WEBPACK_IMPORTED_MODULE_2__.differenceInCalendarYears)(_dateLeft, _dateRight));

  // Set both dates to a valid leap year for accurate comparison when dealing
  // with leap days
  _dateLeft.setFullYear(1584);
  _dateRight.setFullYear(1584);

  // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full
  // If so, result must be decreased by 1 in absolute value
  const isLastYearNotFull = (0,_compareAsc_mjs__WEBPACK_IMPORTED_MODULE_1__.compareAsc)(_dateLeft, _dateRight) === -sign;
  const result = sign * (difference - +isLastYearNotFull);

  // Prevent negative zero
  return result === 0 ? 0 : result;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInYears);


/***/ }),

/***/ "./node_modules/date-fns/endOfDay.mjs":
/*!********************************************!*\
  !*** ./node_modules/date-fns/endOfDay.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfDay: () => (/* binding */ endOfDay)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a day
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */
function endOfDay(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfDay);


/***/ }),

/***/ "./node_modules/date-fns/endOfHour.mjs":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/endOfHour.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfHour: () => (/* binding */ endOfHour)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name endOfHour
 * @category Hour Helpers
 * @summary Return the end of an hour for the given date.
 *
 * @description
 * Return the end of an hour for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of an hour
 *
 * @example
 * // The end of an hour for 2 September 2014 11:55:00:
 * const result = endOfHour(new Date(2014, 8, 2, 11, 55))
 * //=> Tue Sep 02 2014 11:59:59.999
 */
function endOfHour(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  _date.setMinutes(59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfHour);


/***/ }),

/***/ "./node_modules/date-fns/endOfMinute.mjs":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/endOfMinute.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfMinute: () => (/* binding */ endOfMinute)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name endOfMinute
 * @category Minute Helpers
 * @summary Return the end of a minute for the given date.
 *
 * @description
 * Return the end of a minute for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a minute
 *
 * @example
 * // The end of a minute for 1 December 2014 22:15:45.400:
 * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:59.999
 */
function endOfMinute(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  _date.setSeconds(59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfMinute);


/***/ }),

/***/ "./node_modules/date-fns/endOfMonth.mjs":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/endOfMonth.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfMonth: () => (/* binding */ endOfMonth)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a month
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfMonth(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const month = _date.getMonth();
  _date.setFullYear(_date.getFullYear(), month + 1, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfMonth);


/***/ }),

/***/ "./node_modules/date-fns/endOfQuarter.mjs":
/*!************************************************!*\
  !*** ./node_modules/date-fns/endOfQuarter.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfQuarter: () => (/* binding */ endOfQuarter)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name endOfQuarter
 * @category Quarter Helpers
 * @summary Return the end of a year quarter for the given date.
 *
 * @description
 * Return the end of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a quarter
 *
 * @example
 * // The end of a quarter for 2 September 2014 11:55:00:
 * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfQuarter(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const currentMonth = _date.getMonth();
  const month = currentMonth - (currentMonth % 3) + 3;
  _date.setMonth(month, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfQuarter);


/***/ }),

/***/ "./node_modules/date-fns/endOfSecond.mjs":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/endOfSecond.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfSecond: () => (/* binding */ endOfSecond)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name endOfSecond
 * @category Second Helpers
 * @summary Return the end of a second for the given date.
 *
 * @description
 * Return the end of a second for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a second
 *
 * @example
 * // The end of a second for 1 December 2014 22:15:45.400:
 * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.999
 */
function endOfSecond(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  _date.setMilliseconds(999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfSecond);


/***/ }),

/***/ "./node_modules/date-fns/endOfWeek.mjs":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/endOfWeek.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfWeek: () => (/* binding */ endOfWeek)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");
/* harmony import */ var _lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/defaultOptions.mjs */ "./node_modules/date-fns/_lib/defaultOptions.mjs");



/**
 * The {@link endOfWeek} function options.
 */

/**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a week
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfWeek(date, options) {
  const defaultOptions = (0,_lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultOptions)();
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_1__.toDate)(date);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);

  _date.setDate(_date.getDate() + diff);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfWeek);


/***/ }),

/***/ "./node_modules/date-fns/endOfYear.mjs":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/endOfYear.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfYear: () => (/* binding */ endOfYear)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name endOfYear
 * @category Year Helpers
 * @summary Return the end of a year for the given date.
 *
 * @description
 * Return the end of a year for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a year
 *
 * @example
 * // The end of a year for 2 September 2014 11:55:00:
 * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Dec 31 2014 23:59:59.999
 */
function endOfYear(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const year = _date.getFullYear();
  _date.setFullYear(year + 1, 0, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfYear);


/***/ }),

/***/ "./node_modules/date-fns/format.mjs":
/*!******************************************!*\
  !*** ./node_modules/date-fns/format.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   format: () => (/* binding */ format),
/* harmony export */   formatDate: () => (/* binding */ format),
/* harmony export */   formatters: () => (/* reexport safe */ _lib_format_formatters_mjs__WEBPACK_IMPORTED_MODULE_0__.formatters),
/* harmony export */   longFormatters: () => (/* reexport safe */ _lib_format_longFormatters_mjs__WEBPACK_IMPORTED_MODULE_1__.longFormatters)
/* harmony export */ });
/* harmony import */ var _lib_defaultLocale_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_lib/defaultLocale.mjs */ "./node_modules/date-fns/locale/en-US.mjs");
/* harmony import */ var _lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_lib/defaultOptions.mjs */ "./node_modules/date-fns/_lib/defaultOptions.mjs");
/* harmony import */ var _lib_format_formatters_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/format/formatters.mjs */ "./node_modules/date-fns/_lib/format/formatters.mjs");
/* harmony import */ var _lib_format_longFormatters_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_lib/format/longFormatters.mjs */ "./node_modules/date-fns/_lib/format/longFormatters.mjs");
/* harmony import */ var _lib_protectedTokens_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_lib/protectedTokens.mjs */ "./node_modules/date-fns/_lib/protectedTokens.mjs");
/* harmony import */ var _isValid_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isValid.mjs */ "./node_modules/date-fns/isValid.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");








// Rexports of internal for libraries to use.
// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874


// This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
const formattingTokensRegExp =
  /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
const longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;

const escapedStringRegExp = /^'([^]*?)'?$/;
const doubleQuoteRegExp = /''/g;
const unescapedLatinCharacterRegExp = /[a-zA-Z]/;



/**
 * The {@link format} function options.
 */

/**
 * @name format
 * @alias formatDate
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)
 *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param format - The string of tokens
 * @param options - An object with options
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `localize` property
 * @throws `options.locale` must contain `formatLong` property
 * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */
function format(date, formatStr, options) {
  const defaultOptions = (0,_lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_2__.getDefaultOptions)();
  const locale = options?.locale ?? defaultOptions.locale ?? _lib_defaultLocale_mjs__WEBPACK_IMPORTED_MODULE_3__.enUS;

  const firstWeekContainsDate =
    options?.firstWeekContainsDate ??
    options?.locale?.options?.firstWeekContainsDate ??
    defaultOptions.firstWeekContainsDate ??
    defaultOptions.locale?.options?.firstWeekContainsDate ??
    1;

  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const originalDate = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_4__.toDate)(date);

  if (!(0,_isValid_mjs__WEBPACK_IMPORTED_MODULE_5__.isValid)(originalDate)) {
    throw new RangeError("Invalid time value");
  }

  let parts = formatStr
    .match(longFormattingTokensRegExp)
    .map((substring) => {
      const firstCharacter = substring[0];
      if (firstCharacter === "p" || firstCharacter === "P") {
        const longFormatter = _lib_format_longFormatters_mjs__WEBPACK_IMPORTED_MODULE_1__.longFormatters[firstCharacter];
        return longFormatter(substring, locale.formatLong);
      }
      return substring;
    })
    .join("")
    .match(formattingTokensRegExp)
    .map((substring) => {
      // Replace two single quote characters with one single quote character
      if (substring === "''") {
        return { isToken: false, value: "'" };
      }

      const firstCharacter = substring[0];
      if (firstCharacter === "'") {
        return { isToken: false, value: cleanEscapedString(substring) };
      }

      if (_lib_format_formatters_mjs__WEBPACK_IMPORTED_MODULE_0__.formatters[firstCharacter]) {
        return { isToken: true, value: substring };
      }

      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError(
          "Format string contains an unescaped latin alphabet character `" +
            firstCharacter +
            "`",
        );
      }

      return { isToken: false, value: substring };
    });

  // invoke localize preprocessor (only for french locales at the moment)
  if (locale.localize.preprocessor) {
    parts = locale.localize.preprocessor(originalDate, parts);
  }

  const formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale,
  };

  return parts
    .map((part) => {
      if (!part.isToken) return part.value;

      const token = part.value;

      if (
        (!options?.useAdditionalWeekYearTokens &&
          (0,_lib_protectedTokens_mjs__WEBPACK_IMPORTED_MODULE_6__.isProtectedWeekYearToken)(token)) ||
        (!options?.useAdditionalDayOfYearTokens &&
          (0,_lib_protectedTokens_mjs__WEBPACK_IMPORTED_MODULE_6__.isProtectedDayOfYearToken)(token))
      ) {
        (0,_lib_protectedTokens_mjs__WEBPACK_IMPORTED_MODULE_6__.warnOrThrowProtectedError)(token, formatStr, String(date));
      }

      const formatter = _lib_format_formatters_mjs__WEBPACK_IMPORTED_MODULE_0__.formatters[token[0]];
      return formatter(originalDate, token, locale.localize, formatterOptions);
    })
    .join("");
}

function cleanEscapedString(input) {
  const matched = input.match(escapedStringRegExp);

  if (!matched) {
    return input;
  }

  return matched[1].replace(doubleQuoteRegExp, "'");
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (format);


/***/ }),

/***/ "./node_modules/date-fns/getDayOfYear.mjs":
/*!************************************************!*\
  !*** ./node_modules/date-fns/getDayOfYear.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getDayOfYear: () => (/* binding */ getDayOfYear)
/* harmony export */ });
/* harmony import */ var _differenceInCalendarDays_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./differenceInCalendarDays.mjs */ "./node_modules/date-fns/differenceInCalendarDays.mjs");
/* harmony import */ var _startOfYear_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./startOfYear.mjs */ "./node_modules/date-fns/startOfYear.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");




/**
 * @name getDayOfYear
 * @category Day Helpers
 * @summary Get the day of the year of the given date.
 *
 * @description
 * Get the day of the year of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The day of year
 *
 * @example
 * // Which day of the year is 2 July 2014?
 * const result = getDayOfYear(new Date(2014, 6, 2))
 * //=> 183
 */
function getDayOfYear(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const diff = (0,_differenceInCalendarDays_mjs__WEBPACK_IMPORTED_MODULE_1__.differenceInCalendarDays)(_date, (0,_startOfYear_mjs__WEBPACK_IMPORTED_MODULE_2__.startOfYear)(_date));
  const dayOfYear = diff + 1;
  return dayOfYear;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getDayOfYear);


/***/ }),

/***/ "./node_modules/date-fns/getDefaultOptions.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/getDefaultOptions.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getDefaultOptions: () => (/* binding */ getDefaultOptions)
/* harmony export */ });
/* harmony import */ var _lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/defaultOptions.mjs */ "./node_modules/date-fns/_lib/defaultOptions.mjs");


/**
 * @name getDefaultOptions
 * @category Common Helpers
 * @summary Get default options.
 * @pure false
 *
 * @description
 * Returns an object that contains defaults for
 * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`
 * arguments for all functions.
 *
 * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).
 *
 * @returns The default options
 *
 * @example
 * const result = getDefaultOptions()
 * //=> {}
 *
 * @example
 * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })
 * const result = getDefaultOptions()
 * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }
 */
function getDefaultOptions() {
  return Object.assign({}, (0,_lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultOptions)());
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getDefaultOptions);


/***/ }),

/***/ "./node_modules/date-fns/getISODay.mjs":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/getISODay.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getISODay: () => (/* binding */ getISODay)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name getISODay
 * @category Weekday Helpers
 * @summary Get the day of the ISO week of the given date.
 *
 * @description
 * Get the day of the ISO week of the given date,
 * which is 7 for Sunday, 1 for Monday etc.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The day of ISO week
 *
 * @example
 * // Which day of the ISO week is 26 February 2012?
 * const result = getISODay(new Date(2012, 1, 26))
 * //=> 7
 */
function getISODay(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  let day = _date.getDay();

  if (day === 0) {
    day = 7;
  }

  return day;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getISODay);


/***/ }),

/***/ "./node_modules/date-fns/getISOWeek.mjs":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/getISOWeek.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getISOWeek: () => (/* binding */ getISOWeek)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/date-fns/constants.mjs");
/* harmony import */ var _startOfISOWeek_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./startOfISOWeek.mjs */ "./node_modules/date-fns/startOfISOWeek.mjs");
/* harmony import */ var _startOfISOWeekYear_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./startOfISOWeekYear.mjs */ "./node_modules/date-fns/startOfISOWeekYear.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");





/**
 * @name getISOWeek
 * @category ISO Week Helpers
 * @summary Get the ISO week of the given date.
 *
 * @description
 * Get the ISO week of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The ISO week
 *
 * @example
 * // Which week of the ISO-week numbering year is 2 January 2005?
 * const result = getISOWeek(new Date(2005, 0, 2))
 * //=> 53
 */
function getISOWeek(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const diff = +(0,_startOfISOWeek_mjs__WEBPACK_IMPORTED_MODULE_1__.startOfISOWeek)(_date) - +(0,_startOfISOWeekYear_mjs__WEBPACK_IMPORTED_MODULE_2__.startOfISOWeekYear)(_date);

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(diff / _constants_mjs__WEBPACK_IMPORTED_MODULE_3__.millisecondsInWeek) + 1;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getISOWeek);


/***/ }),

/***/ "./node_modules/date-fns/getISOWeekYear.mjs":
/*!**************************************************!*\
  !*** ./node_modules/date-fns/getISOWeekYear.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getISOWeekYear: () => (/* binding */ getISOWeekYear)
/* harmony export */ });
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");
/* harmony import */ var _startOfISOWeek_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./startOfISOWeek.mjs */ "./node_modules/date-fns/startOfISOWeek.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");




/**
 * @name getISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the ISO week-numbering year of the given date.
 *
 * @description
 * Get the ISO week-numbering year of the given date,
 * which always starts 3 days before the year's first Thursday.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The ISO week-numbering year
 *
 * @example
 * // Which ISO-week numbering year is 2 January 2005?
 * const result = getISOWeekYear(new Date(2005, 0, 2))
 * //=> 2004
 */
function getISOWeekYear(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const year = _date.getFullYear();

  const fourthOfJanuaryOfNextYear = (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(date, 0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = (0,_startOfISOWeek_mjs__WEBPACK_IMPORTED_MODULE_2__.startOfISOWeek)(fourthOfJanuaryOfNextYear);

  const fourthOfJanuaryOfThisYear = (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(date, 0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = (0,_startOfISOWeek_mjs__WEBPACK_IMPORTED_MODULE_2__.startOfISOWeek)(fourthOfJanuaryOfThisYear);

  if (_date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (_date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getISOWeekYear);


/***/ }),

/***/ "./node_modules/date-fns/getWeek.mjs":
/*!*******************************************!*\
  !*** ./node_modules/date-fns/getWeek.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getWeek: () => (/* binding */ getWeek)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/date-fns/constants.mjs");
/* harmony import */ var _startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./startOfWeek.mjs */ "./node_modules/date-fns/startOfWeek.mjs");
/* harmony import */ var _startOfWeekYear_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./startOfWeekYear.mjs */ "./node_modules/date-fns/startOfWeekYear.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");





/**
 * The {@link getWeek} function options.
 */

/**
 * @name getWeek
 * @category Week Helpers
 * @summary Get the local week index of the given date.
 *
 * @description
 * Get the local week index of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The week
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005 with default options?
 * const result = getWeek(new Date(2005, 0, 2))
 * //=> 2
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005,
 * // if Monday is the first day of the week,
 * // and the first week of the year always contains 4 January?
 * const result = getWeek(new Date(2005, 0, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> 53
 */

function getWeek(date, options) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const diff = +(0,_startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_1__.startOfWeek)(_date, options) - +(0,_startOfWeekYear_mjs__WEBPACK_IMPORTED_MODULE_2__.startOfWeekYear)(_date, options);

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(diff / _constants_mjs__WEBPACK_IMPORTED_MODULE_3__.millisecondsInWeek) + 1;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getWeek);


/***/ }),

/***/ "./node_modules/date-fns/getWeekYear.mjs":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/getWeekYear.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getWeekYear: () => (/* binding */ getWeekYear)
/* harmony export */ });
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");
/* harmony import */ var _startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./startOfWeek.mjs */ "./node_modules/date-fns/startOfWeek.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");
/* harmony import */ var _lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_lib/defaultOptions.mjs */ "./node_modules/date-fns/_lib/defaultOptions.mjs");





/**
 * The {@link getWeekYear} function options.
 */

/**
 * @name getWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Get the local week-numbering year of the given date.
 *
 * @description
 * Get the local week-numbering year of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The local week-numbering year
 *
 * @example
 * // Which week numbering year is 26 December 2004 with the default settings?
 * const result = getWeekYear(new Date(2004, 11, 26))
 * //=> 2005
 *
 * @example
 * // Which week numbering year is 26 December 2004 if week starts on Saturday?
 * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })
 * //=> 2004
 *
 * @example
 * // Which week numbering year is 26 December 2004 if the first week contains 4 January?
 * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })
 * //=> 2004
 */
function getWeekYear(date, options) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const year = _date.getFullYear();

  const defaultOptions = (0,_lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_1__.getDefaultOptions)();
  const firstWeekContainsDate =
    options?.firstWeekContainsDate ??
    options?.locale?.options?.firstWeekContainsDate ??
    defaultOptions.firstWeekContainsDate ??
    defaultOptions.locale?.options?.firstWeekContainsDate ??
    1;

  const firstWeekOfNextYear = (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_2__.constructFrom)(date, 0);
  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = (0,_startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_3__.startOfWeek)(firstWeekOfNextYear, options);

  const firstWeekOfThisYear = (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_2__.constructFrom)(date, 0);
  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = (0,_startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_3__.startOfWeek)(firstWeekOfThisYear, options);

  if (_date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (_date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getWeekYear);


/***/ }),

/***/ "./node_modules/date-fns/isDate.mjs":
/*!******************************************!*\
  !*** ./node_modules/date-fns/isDate.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isDate: () => (/* binding */ isDate)
/* harmony export */ });
/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * @param value - The value to check
 *
 * @returns True if the given value is a date
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */
function isDate(value) {
  return (
    value instanceof Date ||
    (typeof value === "object" &&
      Object.prototype.toString.call(value) === "[object Date]")
  );
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isDate);


/***/ }),

/***/ "./node_modules/date-fns/isLastDayOfMonth.mjs":
/*!****************************************************!*\
  !*** ./node_modules/date-fns/isLastDayOfMonth.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isLastDayOfMonth: () => (/* binding */ isLastDayOfMonth)
/* harmony export */ });
/* harmony import */ var _endOfDay_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./endOfDay.mjs */ "./node_modules/date-fns/endOfDay.mjs");
/* harmony import */ var _endOfMonth_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./endOfMonth.mjs */ "./node_modules/date-fns/endOfMonth.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");




/**
 * @name isLastDayOfMonth
 * @category Month Helpers
 * @summary Is the given date the last day of a month?
 *
 * @description
 * Is the given date the last day of a month?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check

 * @returns The date is the last day of a month
 *
 * @example
 * // Is 28 February 2014 the last day of a month?
 * const result = isLastDayOfMonth(new Date(2014, 1, 28))
 * //=> true
 */
function isLastDayOfMonth(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  return +(0,_endOfDay_mjs__WEBPACK_IMPORTED_MODULE_1__.endOfDay)(_date) === +(0,_endOfMonth_mjs__WEBPACK_IMPORTED_MODULE_2__.endOfMonth)(_date);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isLastDayOfMonth);


/***/ }),

/***/ "./node_modules/date-fns/isValid.mjs":
/*!*******************************************!*\
  !*** ./node_modules/date-fns/isValid.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isValid: () => (/* binding */ isValid)
/* harmony export */ });
/* harmony import */ var _isDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isDate.mjs */ "./node_modules/date-fns/isDate.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");



/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is valid
 *
 * @example
 * // For the valid date:
 * const result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * const result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isValid(new Date(''))
 * //=> false
 */
function isValid(date) {
  if (!(0,_isDate_mjs__WEBPACK_IMPORTED_MODULE_0__.isDate)(date) && typeof date !== "number") {
    return false;
  }
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_1__.toDate)(date);
  return !isNaN(Number(_date));
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isValid);


/***/ }),

/***/ "./node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildFormatLongFn: () => (/* binding */ buildFormatLongFn)
/* harmony export */ });
function buildFormatLongFn(args) {
  return (options = {}) => {
    // TODO: Remove String()
    const width = options.width ? String(options.width) : args.defaultWidth;
    const format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}


/***/ }),

/***/ "./node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildLocalizeFn: () => (/* binding */ buildLocalizeFn)
/* harmony export */ });
/* eslint-disable no-unused-vars */

/**
 * The localize function argument callback which allows to convert raw value to
 * the actual type.
 *
 * @param value - The value to convert
 *
 * @returns The converted value
 */

/**
 * The map of localized values for each width.
 */

/**
 * The index type of the locale unit value. It types conversion of units of
 * values that don't start at 0 (i.e. quarters).
 */

/**
 * Converts the unit value to the tuple of values.
 */

/**
 * The tuple of localized era values. The first element represents BC,
 * the second element represents AD.
 */

/**
 * The tuple of localized quarter values. The first element represents Q1.
 */

/**
 * The tuple of localized day values. The first element represents Sunday.
 */

/**
 * The tuple of localized month values. The first element represents January.
 */

function buildLocalizeFn(args) {
  return (value, options) => {
    const context = options?.context ? String(options.context) : "standalone";

    let valuesArray;
    if (context === "formatting" && args.formattingValues) {
      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      const width = options?.width ? String(options.width) : defaultWidth;

      valuesArray =
        args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      const defaultWidth = args.defaultWidth;
      const width = options?.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[width] || args.values[defaultWidth];
    }
    const index = args.argumentCallback ? args.argumentCallback(value) : value;

    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
    return valuesArray[index];
  };
}


/***/ }),

/***/ "./node_modules/date-fns/locale/_lib/buildMatchFn.mjs":
/*!************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildMatchFn.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildMatchFn: () => (/* binding */ buildMatchFn)
/* harmony export */ });
function buildMatchFn(args) {
  return (string, options = {}) => {
    const width = options.width;

    const matchPattern =
      (width && args.matchPatterns[width]) ||
      args.matchPatterns[args.defaultMatchWidth];
    const matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }
    const matchedString = matchResult[0];

    const parsePatterns =
      (width && args.parsePatterns[width]) ||
      args.parsePatterns[args.defaultParseWidth];

    const key = Array.isArray(parsePatterns)
      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))
      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
        findKey(parsePatterns, (pattern) => pattern.test(matchedString));

    let value;

    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback
      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
        options.valueCallback(value)
      : value;

    const rest = string.slice(matchedString.length);

    return { value, rest };
  };
}

function findKey(object, predicate) {
  for (const key in object) {
    if (
      Object.prototype.hasOwnProperty.call(object, key) &&
      predicate(object[key])
    ) {
      return key;
    }
  }
  return undefined;
}

function findIndex(array, predicate) {
  for (let key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return undefined;
}


/***/ }),

/***/ "./node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildMatchPatternFn: () => (/* binding */ buildMatchPatternFn)
/* harmony export */ });
function buildMatchPatternFn(args) {
  return (string, options = {}) => {
    const matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    const matchedString = matchResult[0];

    const parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    let value = args.valueCallback
      ? args.valueCallback(parseResult[0])
      : parseResult[0];

    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
    value = options.valueCallback ? options.valueCallback(value) : value;

    const rest = string.slice(matchedString.length);

    return { value, rest };
  };
}


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US.mjs":
/*!************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   enUS: () => (/* binding */ enUS)
/* harmony export */ });
/* harmony import */ var _en_US_lib_formatDistance_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./en-US/_lib/formatDistance.mjs */ "./node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs");
/* harmony import */ var _en_US_lib_formatLong_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./en-US/_lib/formatLong.mjs */ "./node_modules/date-fns/locale/en-US/_lib/formatLong.mjs");
/* harmony import */ var _en_US_lib_formatRelative_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./en-US/_lib/formatRelative.mjs */ "./node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs");
/* harmony import */ var _en_US_lib_localize_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./en-US/_lib/localize.mjs */ "./node_modules/date-fns/locale/en-US/_lib/localize.mjs");
/* harmony import */ var _en_US_lib_match_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./en-US/_lib/match.mjs */ "./node_modules/date-fns/locale/en-US/_lib/match.mjs");






/**
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)
 * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)
 */
const enUS = {
  code: "en-US",
  formatDistance: _en_US_lib_formatDistance_mjs__WEBPACK_IMPORTED_MODULE_0__.formatDistance,
  formatLong: _en_US_lib_formatLong_mjs__WEBPACK_IMPORTED_MODULE_1__.formatLong,
  formatRelative: _en_US_lib_formatRelative_mjs__WEBPACK_IMPORTED_MODULE_2__.formatRelative,
  localize: _en_US_lib_localize_mjs__WEBPACK_IMPORTED_MODULE_3__.localize,
  match: _en_US_lib_match_mjs__WEBPACK_IMPORTED_MODULE_4__.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
};

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (enUS);


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatDistance: () => (/* binding */ formatDistance)
/* harmony export */ });
const formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds",
  },

  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds",
  },

  halfAMinute: "half a minute",

  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes",
  },

  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes",
  },

  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours",
  },

  xHours: {
    one: "1 hour",
    other: "{{count}} hours",
  },

  xDays: {
    one: "1 day",
    other: "{{count}} days",
  },

  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks",
  },

  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks",
  },

  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months",
  },

  xMonths: {
    one: "1 month",
    other: "{{count}} months",
  },

  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years",
  },

  xYears: {
    one: "1 year",
    other: "{{count}} years",
  },

  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years",
  },

  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years",
  },
};

const formatDistance = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }

  return result;
};


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US/_lib/formatLong.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/formatLong.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatLong: () => (/* binding */ formatLong)
/* harmony export */ });
/* harmony import */ var _lib_buildFormatLongFn_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_lib/buildFormatLongFn.mjs */ "./node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs");


const dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

const formatLong = {
  date: (0,_lib_buildFormatLongFn_mjs__WEBPACK_IMPORTED_MODULE_0__.buildFormatLongFn)({
    formats: dateFormats,
    defaultWidth: "full",
  }),

  time: (0,_lib_buildFormatLongFn_mjs__WEBPACK_IMPORTED_MODULE_0__.buildFormatLongFn)({
    formats: timeFormats,
    defaultWidth: "full",
  }),

  dateTime: (0,_lib_buildFormatLongFn_mjs__WEBPACK_IMPORTED_MODULE_0__.buildFormatLongFn)({
    formats: dateTimeFormats,
    defaultWidth: "full",
  }),
};


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatRelative: () => (/* binding */ formatRelative)
/* harmony export */ });
const formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P",
};

const formatRelative = (token, _date, _baseDate, _options) =>
  formatRelativeLocale[token];


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US/_lib/localize.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/localize.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   localize: () => (/* binding */ localize)
/* harmony export */ });
/* harmony import */ var _lib_buildLocalizeFn_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_lib/buildLocalizeFn.mjs */ "./node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs");


const eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"],
};

const quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ],

  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ],
};

const dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
  ],
};

const dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
};

const formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
};

const ordinalNumber = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);

  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};

const localize = {
  ordinalNumber,

  era: (0,_lib_buildLocalizeFn_mjs__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({
    values: eraValues,
    defaultWidth: "wide",
  }),

  quarter: (0,_lib_buildLocalizeFn_mjs__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0,_lib_buildLocalizeFn_mjs__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({
    values: monthValues,
    defaultWidth: "wide",
  }),

  day: (0,_lib_buildLocalizeFn_mjs__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({
    values: dayValues,
    defaultWidth: "wide",
  }),

  dayPeriod: (0,_lib_buildLocalizeFn_mjs__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide",
  }),
};


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US/_lib/match.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/match.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   match: () => (/* binding */ match)
/* harmony export */ });
/* harmony import */ var _lib_buildMatchFn_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../_lib/buildMatchFn.mjs */ "./node_modules/date-fns/locale/_lib/buildMatchFn.mjs");
/* harmony import */ var _lib_buildMatchPatternFn_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_lib/buildMatchPatternFn.mjs */ "./node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs");



const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;

const matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i,
};
const parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i],
};

const matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i,
};
const parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,
};
const parseMonthPatterns = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,
};
const parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],
};

const matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,
};
const parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i,
  },
};

const match = {
  ordinalNumber: (0,_lib_buildMatchPatternFn_mjs__WEBPACK_IMPORTED_MODULE_0__.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0,_lib_buildMatchFn_mjs__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any",
  }),

  quarter: (0,_lib_buildMatchFn_mjs__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0,_lib_buildMatchFn_mjs__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any",
  }),

  day: (0,_lib_buildMatchFn_mjs__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0,_lib_buildMatchFn_mjs__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any",
  }),
};


/***/ }),

/***/ "./node_modules/date-fns/parse.mjs":
/*!*****************************************!*\
  !*** ./node_modules/date-fns/parse.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   longFormatters: () => (/* reexport safe */ _lib_format_longFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__.longFormatters),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parsers: () => (/* reexport safe */ _parse_lib_parsers_mjs__WEBPACK_IMPORTED_MODULE_1__.parsers)
/* harmony export */ });
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");
/* harmony import */ var _getDefaultOptions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDefaultOptions.mjs */ "./node_modules/date-fns/getDefaultOptions.mjs");
/* harmony import */ var _lib_defaultLocale_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_lib/defaultLocale.mjs */ "./node_modules/date-fns/locale/en-US.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");
/* harmony import */ var _lib_format_longFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/format/longFormatters.mjs */ "./node_modules/date-fns/_lib/format/longFormatters.mjs");
/* harmony import */ var _lib_protectedTokens_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_lib/protectedTokens.mjs */ "./node_modules/date-fns/_lib/protectedTokens.mjs");
/* harmony import */ var _parse_lib_parsers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse/_lib/parsers.mjs */ "./node_modules/date-fns/parse/_lib/parsers.mjs");
/* harmony import */ var _parse_lib_Setter_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parse/_lib/Setter.mjs */ "./node_modules/date-fns/parse/_lib/Setter.mjs");









// Rexports of internal for libraries to use.
// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874


/**
 * The {@link parse} function options.
 */

// This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
const formattingTokensRegExp =
  /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
const longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;

const escapedStringRegExp = /^'([^]*?)'?$/;
const doubleQuoteRegExp = /''/g;

const notWhitespaceRegExp = /\S/;
const unescapedLatinCharacterRegExp = /[a-zA-Z]/;

/**
 * @name parse
 * @category Common Helpers
 * @summary Parse the date.
 *
 * @description
 * Return the date parsed from string using the given format string.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
 *
 * ```javascript
 * parse('23 AM', 'HH a', new Date())
 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
 * ```
 *
 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 001, ..., 999                |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
 * |                                 |     | PP      | May 29, 1453                      |       |
 * |                                 |     | PPP     | May 29th, 1453                    |       |
 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
 * |                                 |     | pp      | 12:00:00 AM                       |       |
 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `parse` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
 *
 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
 *
 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
 *
 *    while `uu` will just assign the year as is:
 *
 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
 *
 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)
 *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
 *    on the given locale.
 *
 *    using `en-US` locale: `P` => `MM/dd/yyyy`
 *    using `en-US` locale: `p` => `hh:mm a`
 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
 *    using `pt-BR` locale: `p` => `HH:mm`
 *
 * Values will be assigned to the date in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
 * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
 *
 * `referenceDate` must be passed for correct work of the function.
 * If you're not sure which `referenceDate` to supply, create a new instance of Date:
 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
 * In this case parsing will be done in the context of the current date.
 * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
 * then `Invalid Date` will be returned.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
 *
 * If parsing failed, `Invalid Date` will be returned.
 * Invalid Date is a Date, whose time value is NaN.
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateStr - The string to parse
 * @param formatStr - The string of tokens
 * @param referenceDate - defines values missing from the parsed dateString
 * @param options - An object with options.
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @returns The parsed date
 *
 * @throws `options.locale` must contain `match` property
 * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws format string contains an unescaped latin alphabet character
 *
 * @example
 * // Parse 11 February 2014 from middle-endian format:
 * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
 * //=> Tue Feb 11 2014 00:00:00
 *
 * @example
 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
 *   locale: eo
 * })
 * //=> Sun Feb 28 2010 00:00:00
 */
function parse(dateStr, formatStr, referenceDate, options) {
  const defaultOptions = (0,_getDefaultOptions_mjs__WEBPACK_IMPORTED_MODULE_2__.getDefaultOptions)();
  const locale = options?.locale ?? defaultOptions.locale ?? _lib_defaultLocale_mjs__WEBPACK_IMPORTED_MODULE_3__.enUS;

  const firstWeekContainsDate =
    options?.firstWeekContainsDate ??
    options?.locale?.options?.firstWeekContainsDate ??
    defaultOptions.firstWeekContainsDate ??
    defaultOptions.locale?.options?.firstWeekContainsDate ??
    1;

  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  if (formatStr === "") {
    if (dateStr === "") {
      return (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_4__.toDate)(referenceDate);
    } else {
      return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_5__.constructFrom)(referenceDate, NaN);
    }
  }

  const subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale,
  };

  // If timezone isn't specified, it will be set to the system timezone
  const setters = [new _parse_lib_Setter_mjs__WEBPACK_IMPORTED_MODULE_6__.DateToSystemTimezoneSetter()];

  const tokens = formatStr
    .match(longFormattingTokensRegExp)
    .map((substring) => {
      const firstCharacter = substring[0];
      if (firstCharacter in _lib_format_longFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__.longFormatters) {
        const longFormatter = _lib_format_longFormatters_mjs__WEBPACK_IMPORTED_MODULE_0__.longFormatters[firstCharacter];
        return longFormatter(substring, locale.formatLong);
      }
      return substring;
    })
    .join("")
    .match(formattingTokensRegExp);

  const usedTokens = [];

  for (let token of tokens) {
    if (
      !options?.useAdditionalWeekYearTokens &&
      (0,_lib_protectedTokens_mjs__WEBPACK_IMPORTED_MODULE_7__.isProtectedWeekYearToken)(token)
    ) {
      (0,_lib_protectedTokens_mjs__WEBPACK_IMPORTED_MODULE_7__.warnOrThrowProtectedError)(token, formatStr, dateStr);
    }
    if (
      !options?.useAdditionalDayOfYearTokens &&
      (0,_lib_protectedTokens_mjs__WEBPACK_IMPORTED_MODULE_7__.isProtectedDayOfYearToken)(token)
    ) {
      (0,_lib_protectedTokens_mjs__WEBPACK_IMPORTED_MODULE_7__.warnOrThrowProtectedError)(token, formatStr, dateStr);
    }

    const firstCharacter = token[0];
    const parser = _parse_lib_parsers_mjs__WEBPACK_IMPORTED_MODULE_1__.parsers[firstCharacter];
    if (parser) {
      const { incompatibleTokens } = parser;
      if (Array.isArray(incompatibleTokens)) {
        const incompatibleToken = usedTokens.find(
          (usedToken) =>
            incompatibleTokens.includes(usedToken.token) ||
            usedToken.token === firstCharacter,
        );
        if (incompatibleToken) {
          throw new RangeError(
            `The format string mustn't contain \`${incompatibleToken.fullToken}\` and \`${token}\` at the same time`,
          );
        }
      } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
        throw new RangeError(
          `The format string mustn't contain \`${token}\` and any other token at the same time`,
        );
      }

      usedTokens.push({ token: firstCharacter, fullToken: token });

      const parseResult = parser.run(
        dateStr,
        token,
        locale.match,
        subFnOptions,
      );

      if (!parseResult) {
        return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_5__.constructFrom)(referenceDate, NaN);
      }

      setters.push(parseResult.setter);

      dateStr = parseResult.rest;
    } else {
      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError(
          "Format string contains an unescaped latin alphabet character `" +
            firstCharacter +
            "`",
        );
      }

      // Replace two single quote characters with one single quote character
      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = cleanEscapedString(token);
      }

      // Cut token from string, or, if string doesn't match the token, return Invalid Date
      if (dateStr.indexOf(token) === 0) {
        dateStr = dateStr.slice(token.length);
      } else {
        return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_5__.constructFrom)(referenceDate, NaN);
      }
    }
  }

  // Check if the remaining input contains something other than whitespace
  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {
    return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_5__.constructFrom)(referenceDate, NaN);
  }

  const uniquePrioritySetters = setters
    .map((setter) => setter.priority)
    .sort((a, b) => b - a)
    .filter((priority, index, array) => array.indexOf(priority) === index)
    .map((priority) =>
      setters
        .filter((setter) => setter.priority === priority)
        .sort((a, b) => b.subPriority - a.subPriority),
    )
    .map((setterArray) => setterArray[0]);

  let date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_4__.toDate)(referenceDate);

  if (isNaN(date.getTime())) {
    return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_5__.constructFrom)(referenceDate, NaN);
  }

  const flags = {};
  for (const setter of uniquePrioritySetters) {
    if (!setter.validate(date, subFnOptions)) {
      return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_5__.constructFrom)(referenceDate, NaN);
    }

    const result = setter.set(date, flags, subFnOptions);
    // Result is tuple (date, flags)
    if (Array.isArray(result)) {
      date = result[0];
      Object.assign(flags, result[1]);
      // Result is date
    } else {
      date = result;
    }
  }

  return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_5__.constructFrom)(referenceDate, date);
}

function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);


/***/ }),

/***/ "./node_modules/date-fns/parseISO.mjs":
/*!********************************************!*\
  !*** ./node_modules/date-fns/parseISO.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   parseISO: () => (/* binding */ parseISO)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/date-fns/constants.mjs");


/**
 * The {@link parseISO} function options.
 */

/**
 * @name parseISO
 * @category Common Helpers
 * @summary Parse ISO string
 *
 * @description
 * Parse the given string in ISO 8601 format and return an instance of Date.
 *
 * Function accepts complete ISO 8601 formats as well as partial implementations.
 * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
 *
 * If the argument isn't a string, the function cannot parse the string or
 * the values are invalid, it returns Invalid Date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param argument - The value to convert
 * @param options - An object with options
 *
 * @returns The parsed date in the local time zone
 *
 * @example
 * // Convert string '2014-02-11T11:30:30' to date:
 * const result = parseISO('2014-02-11T11:30:30')
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert string '+02014101' to date,
 * // if the additional number of digits in the extended year format is 1:
 * const result = parseISO('+02014101', { additionalDigits: 1 })
 * //=> Fri Apr 11 2014 00:00:00
 */
function parseISO(argument, options) {
  const additionalDigits = options?.additionalDigits ?? 2;
  const dateStrings = splitDateString(argument);

  let date;
  if (dateStrings.date) {
    const parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }

  if (!date || isNaN(date.getTime())) {
    return new Date(NaN);
  }

  const timestamp = date.getTime();
  let time = 0;
  let offset;

  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return new Date(NaN);
    }
  }

  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);
    if (isNaN(offset)) {
      return new Date(NaN);
    }
  } else {
    const dirtyDate = new Date(timestamp + time);
    // JS parsed string assuming it's in UTC timezone
    // but we need it to be parsed in our timezone
    // so we use utc values to build date in our timezone.
    // Year values from 0 to 99 map to the years 1900 to 1999
    // so set year explicitly with setFullYear.
    const result = new Date(0);
    result.setFullYear(
      dirtyDate.getUTCFullYear(),
      dirtyDate.getUTCMonth(),
      dirtyDate.getUTCDate(),
    );
    result.setHours(
      dirtyDate.getUTCHours(),
      dirtyDate.getUTCMinutes(),
      dirtyDate.getUTCSeconds(),
      dirtyDate.getUTCMilliseconds(),
    );
    return result;
  }

  return new Date(timestamp + time + offset);
}

const patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/,
};

const dateRegex =
  /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
const timeRegex =
  /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
const timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;

function splitDateString(dateString) {
  const dateStrings = {};
  const array = dateString.split(patterns.dateTimeDelimiter);
  let timeString;

  // The regex match should only return at maximum two array elements.
  // [date], [time], or [date, time].
  if (array.length > 2) {
    return dateStrings;
  }

  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(
        dateStrings.date.length,
        dateString.length,
      );
    }
  }

  if (timeString) {
    const token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }

  return dateStrings;
}

function parseYear(dateString, additionalDigits) {
  const regex = new RegExp(
    "^(?:(\\d{4}|[+-]\\d{" +
      (4 + additionalDigits) +
      "})|(\\d{2}|[+-]\\d{" +
      (2 + additionalDigits) +
      "})$)",
  );

  const captures = dateString.match(regex);
  // Invalid ISO-formatted year
  if (!captures) return { year: NaN, restDateString: "" };

  const year = captures[1] ? parseInt(captures[1]) : null;
  const century = captures[2] ? parseInt(captures[2]) : null;

  // either year or century is null, not both
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length),
  };
}

function parseDate(dateString, year) {
  // Invalid ISO-formatted year
  if (year === null) return new Date(NaN);

  const captures = dateString.match(dateRegex);
  // Invalid ISO-formatted string
  if (!captures) return new Date(NaN);

  const isWeekDate = !!captures[4];
  const dayOfYear = parseDateUnit(captures[1]);
  const month = parseDateUnit(captures[2]) - 1;
  const day = parseDateUnit(captures[3]);
  const week = parseDateUnit(captures[4]);
  const dayOfWeek = parseDateUnit(captures[5]) - 1;

  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    const date = new Date(0);
    if (
      !validateDate(year, month, day) ||
      !validateDayOfYearDate(year, dayOfYear)
    ) {
      return new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}

function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}

function parseTime(timeString) {
  const captures = timeString.match(timeRegex);
  if (!captures) return NaN; // Invalid ISO-formatted time

  const hours = parseTimeUnit(captures[1]);
  const minutes = parseTimeUnit(captures[2]);
  const seconds = parseTimeUnit(captures[3]);

  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }

  return (
    hours * _constants_mjs__WEBPACK_IMPORTED_MODULE_0__.millisecondsInHour + minutes * _constants_mjs__WEBPACK_IMPORTED_MODULE_0__.millisecondsInMinute + seconds * 1000
  );
}

function parseTimeUnit(value) {
  return (value && parseFloat(value.replace(",", "."))) || 0;
}

function parseTimezone(timezoneString) {
  if (timezoneString === "Z") return 0;

  const captures = timezoneString.match(timezoneRegex);
  if (!captures) return 0;

  const sign = captures[1] === "+" ? -1 : 1;
  const hours = parseInt(captures[2]);
  const minutes = (captures[3] && parseInt(captures[3])) || 0;

  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }

  return sign * (hours * _constants_mjs__WEBPACK_IMPORTED_MODULE_0__.millisecondsInHour + minutes * _constants_mjs__WEBPACK_IMPORTED_MODULE_0__.millisecondsInMinute);
}

function dayOfISOWeekYear(isoWeekYear, week, day) {
  const date = new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  const fourthOfJanuaryDay = date.getUTCDay() || 7;
  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// Validation functions

// February is null to handle the leap year (using ||)
const daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function isLeapYearIndex(year) {
  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);
}

function validateDate(year, month, date) {
  return (
    month >= 0 &&
    month <= 11 &&
    date >= 1 &&
    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))
  );
}

function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}

function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}

function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }

  return (
    seconds >= 0 &&
    seconds < 60 &&
    minutes >= 0 &&
    minutes < 60 &&
    hours >= 0 &&
    hours < 25
  );
}

function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parseISO);


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/Parser.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/Parser.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Parser: () => (/* binding */ Parser)
/* harmony export */ });
/* harmony import */ var _Setter_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Setter.mjs */ "./node_modules/date-fns/parse/_lib/Setter.mjs");


class Parser {
  run(dateString, token, match, options) {
    const result = this.parse(dateString, token, match, options);
    if (!result) {
      return null;
    }

    return {
      setter: new _Setter_mjs__WEBPACK_IMPORTED_MODULE_0__.ValueSetter(
        result.value,
        this.validate,
        this.set,
        this.priority,
        this.subPriority,
      ),
      rest: result.rest,
    };
  }

  validate(_utcDate, _value, _options) {
    return true;
  }
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/Setter.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/Setter.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DateToSystemTimezoneSetter: () => (/* binding */ DateToSystemTimezoneSetter),
/* harmony export */   Setter: () => (/* binding */ Setter),
/* harmony export */   ValueSetter: () => (/* binding */ ValueSetter)
/* harmony export */ });
/* harmony import */ var _transpose_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../transpose.mjs */ "./node_modules/date-fns/transpose.mjs");
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");



const TIMEZONE_UNIT_PRIORITY = 10;

class Setter {
  subPriority = 0;

  validate(_utcDate, _options) {
    return true;
  }
}

class ValueSetter extends Setter {
  constructor(
    value,

    validateValue,

    setValue,

    priority,
    subPriority,
  ) {
    super();
    this.value = value;
    this.validateValue = validateValue;
    this.setValue = setValue;
    this.priority = priority;
    if (subPriority) {
      this.subPriority = subPriority;
    }
  }

  validate(date, options) {
    return this.validateValue(date, this.value, options);
  }

  set(date, flags, options) {
    return this.setValue(date, flags, this.value, options);
  }
}

class DateToSystemTimezoneSetter extends Setter {
  priority = TIMEZONE_UNIT_PRIORITY;
  subPriority = -1;
  set(date, flags) {
    if (flags.timestampIsSet) return date;
    return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(date, (0,_transpose_mjs__WEBPACK_IMPORTED_MODULE_1__.transpose)(date, Date));
  }
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/constants.mjs":
/*!********************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/constants.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   numericPatterns: () => (/* binding */ numericPatterns),
/* harmony export */   timezonePatterns: () => (/* binding */ timezonePatterns)
/* harmony export */ });
const numericPatterns = {
  month: /^(1[0-2]|0?\d)/, // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/, // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/, // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/, // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/, // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/, // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/, // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/, // 0 to 12
  minute: /^[0-5]?\d/, // 0 to 59
  second: /^[0-5]?\d/, // 0 to 59

  singleDigit: /^\d/, // 0 to 9
  twoDigits: /^\d{1,2}/, // 0 to 99
  threeDigits: /^\d{1,3}/, // 0 to 999
  fourDigits: /^\d{1,4}/, // 0 to 9999

  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/, // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/, // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/, // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/, // 0 to 9999, -0 to -9999
};

const timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/,
};


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers.mjs":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parsers: () => (/* binding */ parsers)
/* harmony export */ });
/* harmony import */ var _parsers_EraParser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers/EraParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/EraParser.mjs");
/* harmony import */ var _parsers_YearParser_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsers/YearParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/YearParser.mjs");
/* harmony import */ var _parsers_LocalWeekYearParser_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parsers/LocalWeekYearParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.mjs");
/* harmony import */ var _parsers_ISOWeekYearParser_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/ISOWeekYearParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.mjs");
/* harmony import */ var _parsers_ExtendedYearParser_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/ExtendedYearParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.mjs");
/* harmony import */ var _parsers_QuarterParser_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parsers/QuarterParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/QuarterParser.mjs");
/* harmony import */ var _parsers_StandAloneQuarterParser_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parsers/StandAloneQuarterParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.mjs");
/* harmony import */ var _parsers_MonthParser_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parsers/MonthParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/MonthParser.mjs");
/* harmony import */ var _parsers_StandAloneMonthParser_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parsers/StandAloneMonthParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.mjs");
/* harmony import */ var _parsers_LocalWeekParser_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parsers/LocalWeekParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.mjs");
/* harmony import */ var _parsers_ISOWeekParser_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parsers/ISOWeekParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.mjs");
/* harmony import */ var _parsers_DateParser_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parsers/DateParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/DateParser.mjs");
/* harmony import */ var _parsers_DayOfYearParser_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parsers/DayOfYearParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.mjs");
/* harmony import */ var _parsers_DayParser_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parsers/DayParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/DayParser.mjs");
/* harmony import */ var _parsers_LocalDayParser_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parsers/LocalDayParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/LocalDayParser.mjs");
/* harmony import */ var _parsers_StandAloneLocalDayParser_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./parsers/StandAloneLocalDayParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.mjs");
/* harmony import */ var _parsers_ISODayParser_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./parsers/ISODayParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/ISODayParser.mjs");
/* harmony import */ var _parsers_AMPMParser_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./parsers/AMPMParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/AMPMParser.mjs");
/* harmony import */ var _parsers_AMPMMidnightParser_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./parsers/AMPMMidnightParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.mjs");
/* harmony import */ var _parsers_DayPeriodParser_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./parsers/DayPeriodParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.mjs");
/* harmony import */ var _parsers_Hour1to12Parser_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./parsers/Hour1to12Parser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.mjs");
/* harmony import */ var _parsers_Hour0to23Parser_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./parsers/Hour0to23Parser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.mjs");
/* harmony import */ var _parsers_Hour0To11Parser_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./parsers/Hour0To11Parser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.mjs");
/* harmony import */ var _parsers_Hour1To24Parser_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./parsers/Hour1To24Parser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.mjs");
/* harmony import */ var _parsers_MinuteParser_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./parsers/MinuteParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/MinuteParser.mjs");
/* harmony import */ var _parsers_SecondParser_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./parsers/SecondParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/SecondParser.mjs");
/* harmony import */ var _parsers_FractionOfSecondParser_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./parsers/FractionOfSecondParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.mjs");
/* harmony import */ var _parsers_ISOTimezoneWithZParser_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./parsers/ISOTimezoneWithZParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.mjs");
/* harmony import */ var _parsers_ISOTimezoneParser_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./parsers/ISOTimezoneParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.mjs");
/* harmony import */ var _parsers_TimestampSecondsParser_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./parsers/TimestampSecondsParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.mjs");
/* harmony import */ var _parsers_TimestampMillisecondsParser_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./parsers/TimestampMillisecondsParser.mjs */ "./node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.mjs");
































/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any -- It's ok, we want any here
const parsers = {
  G: new _parsers_EraParser_mjs__WEBPACK_IMPORTED_MODULE_0__.EraParser(),
  y: new _parsers_YearParser_mjs__WEBPACK_IMPORTED_MODULE_1__.YearParser(),
  Y: new _parsers_LocalWeekYearParser_mjs__WEBPACK_IMPORTED_MODULE_2__.LocalWeekYearParser(),
  R: new _parsers_ISOWeekYearParser_mjs__WEBPACK_IMPORTED_MODULE_3__.ISOWeekYearParser(),
  u: new _parsers_ExtendedYearParser_mjs__WEBPACK_IMPORTED_MODULE_4__.ExtendedYearParser(),
  Q: new _parsers_QuarterParser_mjs__WEBPACK_IMPORTED_MODULE_5__.QuarterParser(),
  q: new _parsers_StandAloneQuarterParser_mjs__WEBPACK_IMPORTED_MODULE_6__.StandAloneQuarterParser(),
  M: new _parsers_MonthParser_mjs__WEBPACK_IMPORTED_MODULE_7__.MonthParser(),
  L: new _parsers_StandAloneMonthParser_mjs__WEBPACK_IMPORTED_MODULE_8__.StandAloneMonthParser(),
  w: new _parsers_LocalWeekParser_mjs__WEBPACK_IMPORTED_MODULE_9__.LocalWeekParser(),
  I: new _parsers_ISOWeekParser_mjs__WEBPACK_IMPORTED_MODULE_10__.ISOWeekParser(),
  d: new _parsers_DateParser_mjs__WEBPACK_IMPORTED_MODULE_11__.DateParser(),
  D: new _parsers_DayOfYearParser_mjs__WEBPACK_IMPORTED_MODULE_12__.DayOfYearParser(),
  E: new _parsers_DayParser_mjs__WEBPACK_IMPORTED_MODULE_13__.DayParser(),
  e: new _parsers_LocalDayParser_mjs__WEBPACK_IMPORTED_MODULE_14__.LocalDayParser(),
  c: new _parsers_StandAloneLocalDayParser_mjs__WEBPACK_IMPORTED_MODULE_15__.StandAloneLocalDayParser(),
  i: new _parsers_ISODayParser_mjs__WEBPACK_IMPORTED_MODULE_16__.ISODayParser(),
  a: new _parsers_AMPMParser_mjs__WEBPACK_IMPORTED_MODULE_17__.AMPMParser(),
  b: new _parsers_AMPMMidnightParser_mjs__WEBPACK_IMPORTED_MODULE_18__.AMPMMidnightParser(),
  B: new _parsers_DayPeriodParser_mjs__WEBPACK_IMPORTED_MODULE_19__.DayPeriodParser(),
  h: new _parsers_Hour1to12Parser_mjs__WEBPACK_IMPORTED_MODULE_20__.Hour1to12Parser(),
  H: new _parsers_Hour0to23Parser_mjs__WEBPACK_IMPORTED_MODULE_21__.Hour0to23Parser(),
  K: new _parsers_Hour0To11Parser_mjs__WEBPACK_IMPORTED_MODULE_22__.Hour0To11Parser(),
  k: new _parsers_Hour1To24Parser_mjs__WEBPACK_IMPORTED_MODULE_23__.Hour1To24Parser(),
  m: new _parsers_MinuteParser_mjs__WEBPACK_IMPORTED_MODULE_24__.MinuteParser(),
  s: new _parsers_SecondParser_mjs__WEBPACK_IMPORTED_MODULE_25__.SecondParser(),
  S: new _parsers_FractionOfSecondParser_mjs__WEBPACK_IMPORTED_MODULE_26__.FractionOfSecondParser(),
  X: new _parsers_ISOTimezoneWithZParser_mjs__WEBPACK_IMPORTED_MODULE_27__.ISOTimezoneWithZParser(),
  x: new _parsers_ISOTimezoneParser_mjs__WEBPACK_IMPORTED_MODULE_28__.ISOTimezoneParser(),
  t: new _parsers_TimestampSecondsParser_mjs__WEBPACK_IMPORTED_MODULE_29__.TimestampSecondsParser(),
  T: new _parsers_TimestampMillisecondsParser_mjs__WEBPACK_IMPORTED_MODULE_30__.TimestampMillisecondsParser(),
};


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AMPMMidnightParser: () => (/* binding */ AMPMMidnightParser)
/* harmony export */ });
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");



class AMPMMidnightParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 80;

  parse(dateString, token, match) {
    switch (token) {
      case "b":
      case "bb":
      case "bbb":
        return (
          match.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting",
          })
        );

      case "bbbbb":
        return match.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting",
        });
      case "bbbb":
      default:
        return (
          match.dayPeriod(dateString, {
            width: "wide",
            context: "formatting",
          }) ||
          match.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting",
          })
        );
    }
  }

  set(date, _flags, value) {
    date.setHours((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.dayPeriodEnumToHours)(value), 0, 0, 0);
    return date;
  }

  incompatibleTokens = ["a", "B", "H", "k", "t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/AMPMParser.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/AMPMParser.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AMPMParser: () => (/* binding */ AMPMParser)
/* harmony export */ });
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");



class AMPMParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 80;

  parse(dateString, token, match) {
    switch (token) {
      case "a":
      case "aa":
      case "aaa":
        return (
          match.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting",
          })
        );

      case "aaaaa":
        return match.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting",
        });
      case "aaaa":
      default:
        return (
          match.dayPeriod(dateString, {
            width: "wide",
            context: "formatting",
          }) ||
          match.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting",
          })
        );
    }
  }

  set(date, _flags, value) {
    date.setHours((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.dayPeriodEnumToHours)(value), 0, 0, 0);
    return date;
  }

  incompatibleTokens = ["b", "B", "H", "k", "t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/DateParser.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/DateParser.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DateParser: () => (/* binding */ DateParser)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




const DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
const DAYS_IN_MONTH_LEAP_YEAR = [
  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
];

// Day of the month
class DateParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 90;
  subPriority = 1;

  parse(dateString, token, match) {
    switch (token) {
      case "d":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.date, dateString);
      case "do":
        return match.ordinalNumber(dateString, { unit: "date" });
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
    }
  }

  validate(date, value) {
    const year = date.getFullYear();
    const isLeapYear = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isLeapYearIndex)(year);
    const month = date.getMonth();
    if (isLeapYear) {
      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
    } else {
      return value >= 1 && value <= DAYS_IN_MONTH[month];
    }
  }

  set(date, _flags, value) {
    date.setDate(value);
    date.setHours(0, 0, 0, 0);
    return date;
  }

  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "w",
    "I",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DayOfYearParser: () => (/* binding */ DayOfYearParser)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




class DayOfYearParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 90;

  subpriority = 1;

  parse(dateString, token, match) {
    switch (token) {
      case "D":
      case "DD":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.dayOfYear, dateString);
      case "Do":
        return match.ordinalNumber(dateString, { unit: "date" });
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
    }
  }

  validate(date, value) {
    const year = date.getFullYear();
    const isLeapYear = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isLeapYearIndex)(year);
    if (isLeapYear) {
      return value >= 1 && value <= 366;
    } else {
      return value >= 1 && value <= 365;
    }
  }

  set(date, _flags, value) {
    date.setMonth(0, value);
    date.setHours(0, 0, 0, 0);
    return date;
  }

  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "M",
    "L",
    "w",
    "I",
    "d",
    "E",
    "i",
    "e",
    "c",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/DayParser.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/DayParser.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DayParser: () => (/* binding */ DayParser)
/* harmony export */ });
/* harmony import */ var _setDay_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../setDay.mjs */ "./node_modules/date-fns/setDay.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");



// Day of week
class DayParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 90;

  parse(dateString, token, match) {
    switch (token) {
      // Tue
      case "E":
      case "EE":
      case "EEE":
        return (
          match.day(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.day(dateString, { width: "short", context: "formatting" }) ||
          match.day(dateString, { width: "narrow", context: "formatting" })
        );

      // T
      case "EEEEE":
        return match.day(dateString, {
          width: "narrow",
          context: "formatting",
        });
      // Tu
      case "EEEEEE":
        return (
          match.day(dateString, { width: "short", context: "formatting" }) ||
          match.day(dateString, { width: "narrow", context: "formatting" })
        );

      // Tuesday
      case "EEEE":
      default:
        return (
          match.day(dateString, { width: "wide", context: "formatting" }) ||
          match.day(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.day(dateString, { width: "short", context: "formatting" }) ||
          match.day(dateString, { width: "narrow", context: "formatting" })
        );
    }
  }

  validate(_date, value) {
    return value >= 0 && value <= 6;
  }

  set(date, _flags, value, options) {
    date = (0,_setDay_mjs__WEBPACK_IMPORTED_MODULE_1__.setDay)(date, value, options);
    date.setHours(0, 0, 0, 0);
    return date;
  }

  incompatibleTokens = ["D", "i", "e", "c", "t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DayPeriodParser: () => (/* binding */ DayPeriodParser)
/* harmony export */ });
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");



// in the morning, in the afternoon, in the evening, at night
class DayPeriodParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 80;

  parse(dateString, token, match) {
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return (
          match.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting",
          })
        );

      case "BBBBB":
        return match.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting",
        });
      case "BBBB":
      default:
        return (
          match.dayPeriod(dateString, {
            width: "wide",
            context: "formatting",
          }) ||
          match.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting",
          })
        );
    }
  }

  set(date, _flags, value) {
    date.setHours((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.dayPeriodEnumToHours)(value), 0, 0, 0);
    return date;
  }

  incompatibleTokens = ["a", "b", "t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/EraParser.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/EraParser.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EraParser: () => (/* binding */ EraParser)
/* harmony export */ });
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");


class EraParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 140;

  parse(dateString, token, match) {
    switch (token) {
      // AD, BC
      case "G":
      case "GG":
      case "GGG":
        return (
          match.era(dateString, { width: "abbreviated" }) ||
          match.era(dateString, { width: "narrow" })
        );

      // A, B
      case "GGGGG":
        return match.era(dateString, { width: "narrow" });
      // Anno Domini, Before Christ
      case "GGGG":
      default:
        return (
          match.era(dateString, { width: "wide" }) ||
          match.era(dateString, { width: "abbreviated" }) ||
          match.era(dateString, { width: "narrow" })
        );
    }
  }

  set(date, flags, value) {
    flags.era = value;
    date.setFullYear(value, 0, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }

  incompatibleTokens = ["R", "u", "t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtendedYearParser: () => (/* binding */ ExtendedYearParser)
/* harmony export */ });
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");



class ExtendedYearParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 130;

  parse(dateString, token) {
    if (token === "u") {
      return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigitsSigned)(4, dateString);
    }

    return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigitsSigned)(token.length, dateString);
  }

  set(date, _flags, value) {
    date.setFullYear(value, 0, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }

  incompatibleTokens = ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FractionOfSecondParser: () => (/* binding */ FractionOfSecondParser)
/* harmony export */ });
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");



class FractionOfSecondParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 30;

  parse(dateString, token) {
    const valueCallback = (value) =>
      Math.trunc(value * Math.pow(10, -token.length + 3));
    return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString), valueCallback);
  }

  set(date, _flags, value) {
    date.setMilliseconds(value);
    return date;
  }

  incompatibleTokens = ["t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hour0To11Parser: () => (/* binding */ Hour0To11Parser)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




class Hour0To11Parser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 70;

  parse(dateString, token, match) {
    switch (token) {
      case "K":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.hour11h, dateString);
      case "Ko":
        return match.ordinalNumber(dateString, { unit: "hour" });
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
    }
  }

  validate(_date, value) {
    return value >= 0 && value <= 11;
  }

  set(date, _flags, value) {
    const isPM = date.getHours() >= 12;
    if (isPM && value < 12) {
      date.setHours(value + 12, 0, 0, 0);
    } else {
      date.setHours(value, 0, 0, 0);
    }
    return date;
  }

  incompatibleTokens = ["h", "H", "k", "t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hour0to23Parser: () => (/* binding */ Hour0to23Parser)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




class Hour0to23Parser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 70;

  parse(dateString, token, match) {
    switch (token) {
      case "H":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.hour23h, dateString);
      case "Ho":
        return match.ordinalNumber(dateString, { unit: "hour" });
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
    }
  }

  validate(_date, value) {
    return value >= 0 && value <= 23;
  }

  set(date, _flags, value) {
    date.setHours(value, 0, 0, 0);
    return date;
  }

  incompatibleTokens = ["a", "b", "h", "K", "k", "t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hour1To24Parser: () => (/* binding */ Hour1To24Parser)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




class Hour1To24Parser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 70;

  parse(dateString, token, match) {
    switch (token) {
      case "k":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.hour24h, dateString);
      case "ko":
        return match.ordinalNumber(dateString, { unit: "hour" });
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
    }
  }

  validate(_date, value) {
    return value >= 1 && value <= 24;
  }

  set(date, _flags, value) {
    const hours = value <= 24 ? value % 24 : value;
    date.setHours(hours, 0, 0, 0);
    return date;
  }

  incompatibleTokens = ["a", "b", "h", "H", "K", "t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hour1to12Parser: () => (/* binding */ Hour1to12Parser)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




class Hour1to12Parser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 70;

  parse(dateString, token, match) {
    switch (token) {
      case "h":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.hour12h, dateString);
      case "ho":
        return match.ordinalNumber(dateString, { unit: "hour" });
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
    }
  }

  validate(_date, value) {
    return value >= 1 && value <= 12;
  }

  set(date, _flags, value) {
    const isPM = date.getHours() >= 12;
    if (isPM && value < 12) {
      date.setHours(value + 12, 0, 0, 0);
    } else if (!isPM && value === 12) {
      date.setHours(0, 0, 0, 0);
    } else {
      date.setHours(value, 0, 0, 0);
    }
    return date;
  }

  incompatibleTokens = ["H", "K", "k", "t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/ISODayParser.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/ISODayParser.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ISODayParser: () => (/* binding */ ISODayParser)
/* harmony export */ });
/* harmony import */ var _setISODay_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../setISODay.mjs */ "./node_modules/date-fns/setISODay.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




// ISO day of week
class ISODayParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 90;

  parse(dateString, token, match) {
    const valueCallback = (value) => {
      if (value === 0) {
        return 7;
      }
      return value;
    };

    switch (token) {
      // 2
      case "i":
      case "ii": // 02
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
      // 2nd
      case "io":
        return match.ordinalNumber(dateString, { unit: "day" });
      // Tue
      case "iii":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          match.day(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
            match.day(dateString, {
              width: "short",
              context: "formatting",
            }) ||
            match.day(dateString, {
              width: "narrow",
              context: "formatting",
            }),
          valueCallback,
        );
      // T
      case "iiiii":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          match.day(dateString, {
            width: "narrow",
            context: "formatting",
          }),
          valueCallback,
        );
      // Tu
      case "iiiiii":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          match.day(dateString, {
            width: "short",
            context: "formatting",
          }) ||
            match.day(dateString, {
              width: "narrow",
              context: "formatting",
            }),
          valueCallback,
        );
      // Tuesday
      case "iiii":
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          match.day(dateString, {
            width: "wide",
            context: "formatting",
          }) ||
            match.day(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.day(dateString, {
              width: "short",
              context: "formatting",
            }) ||
            match.day(dateString, {
              width: "narrow",
              context: "formatting",
            }),
          valueCallback,
        );
    }
  }

  validate(_date, value) {
    return value >= 1 && value <= 7;
  }

  set(date, _flags, value) {
    date = (0,_setISODay_mjs__WEBPACK_IMPORTED_MODULE_2__.setISODay)(date, value);
    date.setHours(0, 0, 0, 0);
    return date;
  }

  incompatibleTokens = [
    "y",
    "Y",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "w",
    "d",
    "D",
    "E",
    "e",
    "c",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ISOTimezoneParser: () => (/* binding */ ISOTimezoneParser)
/* harmony export */ });
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");
/* harmony import */ var _lib_getTimezoneOffsetInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../_lib/getTimezoneOffsetInMilliseconds.mjs */ "./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");






// Timezone (ISO-8601)
class ISOTimezoneParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 10;

  parse(dateString, token) {
    switch (token) {
      case "x":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseTimezonePattern)(
          _constants_mjs__WEBPACK_IMPORTED_MODULE_2__.timezonePatterns.basicOptionalMinutes,
          dateString,
        );
      case "xx":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseTimezonePattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.timezonePatterns.basic, dateString);
      case "xxxx":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseTimezonePattern)(
          _constants_mjs__WEBPACK_IMPORTED_MODULE_2__.timezonePatterns.basicOptionalSeconds,
          dateString,
        );
      case "xxxxx":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseTimezonePattern)(
          _constants_mjs__WEBPACK_IMPORTED_MODULE_2__.timezonePatterns.extendedOptionalSeconds,
          dateString,
        );
      case "xxx":
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseTimezonePattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.timezonePatterns.extended, dateString);
    }
  }

  set(date, flags, value) {
    if (flags.timestampIsSet) return date;
    return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_3__.constructFrom)(
      date,
      date.getTime() - (0,_lib_getTimezoneOffsetInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_4__.getTimezoneOffsetInMilliseconds)(date) - value,
    );
  }

  incompatibleTokens = ["t", "T", "X"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ISOTimezoneWithZParser: () => (/* binding */ ISOTimezoneWithZParser)
/* harmony export */ });
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");
/* harmony import */ var _lib_getTimezoneOffsetInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../_lib/getTimezoneOffsetInMilliseconds.mjs */ "./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");






// Timezone (ISO-8601. +00:00 is `'Z'`)
class ISOTimezoneWithZParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 10;

  parse(dateString, token) {
    switch (token) {
      case "X":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseTimezonePattern)(
          _constants_mjs__WEBPACK_IMPORTED_MODULE_2__.timezonePatterns.basicOptionalMinutes,
          dateString,
        );
      case "XX":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseTimezonePattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.timezonePatterns.basic, dateString);
      case "XXXX":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseTimezonePattern)(
          _constants_mjs__WEBPACK_IMPORTED_MODULE_2__.timezonePatterns.basicOptionalSeconds,
          dateString,
        );
      case "XXXXX":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseTimezonePattern)(
          _constants_mjs__WEBPACK_IMPORTED_MODULE_2__.timezonePatterns.extendedOptionalSeconds,
          dateString,
        );
      case "XXX":
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseTimezonePattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.timezonePatterns.extended, dateString);
    }
  }

  set(date, flags, value) {
    if (flags.timestampIsSet) return date;
    return (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_3__.constructFrom)(
      date,
      date.getTime() - (0,_lib_getTimezoneOffsetInMilliseconds_mjs__WEBPACK_IMPORTED_MODULE_4__.getTimezoneOffsetInMilliseconds)(date) - value,
    );
  }

  incompatibleTokens = ["t", "T", "x"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ISOWeekParser: () => (/* binding */ ISOWeekParser)
/* harmony export */ });
/* harmony import */ var _setISOWeek_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../setISOWeek.mjs */ "./node_modules/date-fns/setISOWeek.mjs");
/* harmony import */ var _startOfISOWeek_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../startOfISOWeek.mjs */ "./node_modules/date-fns/startOfISOWeek.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");






// ISO week of year
class ISOWeekParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 100;

  parse(dateString, token, match) {
    switch (token) {
      case "I":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.week, dateString);
      case "Io":
        return match.ordinalNumber(dateString, { unit: "week" });
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
    }
  }

  validate(_date, value) {
    return value >= 1 && value <= 53;
  }

  set(date, _flags, value) {
    return (0,_startOfISOWeek_mjs__WEBPACK_IMPORTED_MODULE_3__.startOfISOWeek)((0,_setISOWeek_mjs__WEBPACK_IMPORTED_MODULE_4__.setISOWeek)(date, value));
  }

  incompatibleTokens = [
    "y",
    "Y",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "w",
    "d",
    "D",
    "e",
    "c",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ISOWeekYearParser: () => (/* binding */ ISOWeekYearParser)
/* harmony export */ });
/* harmony import */ var _startOfISOWeek_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../startOfISOWeek.mjs */ "./node_modules/date-fns/startOfISOWeek.mjs");
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");





// ISO week-numbering year
class ISOWeekYearParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 130;

  parse(dateString, token) {
    if (token === "R") {
      return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigitsSigned)(4, dateString);
    }

    return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigitsSigned)(token.length, dateString);
  }

  set(date, _flags, value) {
    const firstWeekOfYear = (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_2__.constructFrom)(date, 0);
    firstWeekOfYear.setFullYear(value, 0, 4);
    firstWeekOfYear.setHours(0, 0, 0, 0);
    return (0,_startOfISOWeek_mjs__WEBPACK_IMPORTED_MODULE_3__.startOfISOWeek)(firstWeekOfYear);
  }

  incompatibleTokens = [
    "G",
    "y",
    "Y",
    "u",
    "Q",
    "q",
    "M",
    "L",
    "w",
    "d",
    "D",
    "e",
    "c",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/LocalDayParser.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/LocalDayParser.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LocalDayParser: () => (/* binding */ LocalDayParser)
/* harmony export */ });
/* harmony import */ var _setDay_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../setDay.mjs */ "./node_modules/date-fns/setDay.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




// Local day of week
class LocalDayParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 90;
  parse(dateString, token, match, options) {
    const valueCallback = (value) => {
      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0
      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;
      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;
    };

    switch (token) {
      // 3
      case "e":
      case "ee": // 03
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString), valueCallback);
      // 3rd
      case "eo":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          match.ordinalNumber(dateString, {
            unit: "day",
          }),
          valueCallback,
        );
      // Tue
      case "eee":
        return (
          match.day(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.day(dateString, { width: "short", context: "formatting" }) ||
          match.day(dateString, { width: "narrow", context: "formatting" })
        );

      // T
      case "eeeee":
        return match.day(dateString, {
          width: "narrow",
          context: "formatting",
        });
      // Tu
      case "eeeeee":
        return (
          match.day(dateString, { width: "short", context: "formatting" }) ||
          match.day(dateString, { width: "narrow", context: "formatting" })
        );

      // Tuesday
      case "eeee":
      default:
        return (
          match.day(dateString, { width: "wide", context: "formatting" }) ||
          match.day(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.day(dateString, { width: "short", context: "formatting" }) ||
          match.day(dateString, { width: "narrow", context: "formatting" })
        );
    }
  }

  validate(_date, value) {
    return value >= 0 && value <= 6;
  }

  set(date, _flags, value, options) {
    date = (0,_setDay_mjs__WEBPACK_IMPORTED_MODULE_2__.setDay)(date, value, options);
    date.setHours(0, 0, 0, 0);
    return date;
  }

  incompatibleTokens = [
    "y",
    "R",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "E",
    "i",
    "c",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LocalWeekParser: () => (/* binding */ LocalWeekParser)
/* harmony export */ });
/* harmony import */ var _setWeek_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../setWeek.mjs */ "./node_modules/date-fns/setWeek.mjs");
/* harmony import */ var _startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../startOfWeek.mjs */ "./node_modules/date-fns/startOfWeek.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");






// Local week of year
class LocalWeekParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 100;

  parse(dateString, token, match) {
    switch (token) {
      case "w":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.week, dateString);
      case "wo":
        return match.ordinalNumber(dateString, { unit: "week" });
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
    }
  }

  validate(_date, value) {
    return value >= 1 && value <= 53;
  }

  set(date, _flags, value, options) {
    return (0,_startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_3__.startOfWeek)((0,_setWeek_mjs__WEBPACK_IMPORTED_MODULE_4__.setWeek)(date, value, options), options);
  }

  incompatibleTokens = [
    "y",
    "R",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "i",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LocalWeekYearParser: () => (/* binding */ LocalWeekYearParser)
/* harmony export */ });
/* harmony import */ var _getWeekYear_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../getWeekYear.mjs */ "./node_modules/date-fns/getWeekYear.mjs");
/* harmony import */ var _startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../startOfWeek.mjs */ "./node_modules/date-fns/startOfWeek.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");





// Local week-numbering year
class LocalWeekYearParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 130;

  parse(dateString, token, match) {
    const valueCallback = (year) => ({
      year,
      isTwoDigitYear: token === "YY",
    });

    switch (token) {
      case "Y":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(4, dateString), valueCallback);
      case "Yo":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          match.ordinalNumber(dateString, {
            unit: "year",
          }),
          valueCallback,
        );
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString), valueCallback);
    }
  }

  validate(_date, value) {
    return value.isTwoDigitYear || value.year > 0;
  }

  set(date, flags, value, options) {
    const currentYear = (0,_getWeekYear_mjs__WEBPACK_IMPORTED_MODULE_2__.getWeekYear)(date, options);

    if (value.isTwoDigitYear) {
      const normalizedTwoDigitYear = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.normalizeTwoDigitYear)(
        value.year,
        currentYear,
      );
      date.setFullYear(
        normalizedTwoDigitYear,
        0,
        options.firstWeekContainsDate,
      );
      date.setHours(0, 0, 0, 0);
      return (0,_startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_3__.startOfWeek)(date, options);
    }

    const year =
      !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
    date.setFullYear(year, 0, options.firstWeekContainsDate);
    date.setHours(0, 0, 0, 0);
    return (0,_startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_3__.startOfWeek)(date, options);
  }

  incompatibleTokens = [
    "y",
    "R",
    "u",
    "Q",
    "q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "i",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/MinuteParser.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/MinuteParser.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MinuteParser: () => (/* binding */ MinuteParser)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




class MinuteParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 60;

  parse(dateString, token, match) {
    switch (token) {
      case "m":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.minute, dateString);
      case "mo":
        return match.ordinalNumber(dateString, { unit: "minute" });
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
    }
  }

  validate(_date, value) {
    return value >= 0 && value <= 59;
  }

  set(date, _flags, value) {
    date.setMinutes(value, 0, 0);
    return date;
  }

  incompatibleTokens = ["t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/MonthParser.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/MonthParser.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MonthParser: () => (/* binding */ MonthParser)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




class MonthParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "L",
    "w",
    "I",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T",
  ];

  priority = 110;

  parse(dateString, token, match) {
    const valueCallback = (value) => value - 1;

    switch (token) {
      // 1, 2, ..., 12
      case "M":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.month, dateString),
          valueCallback,
        );
      // 01, 02, ..., 12
      case "MM":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(2, dateString), valueCallback);
      // 1st, 2nd, ..., 12th
      case "Mo":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          match.ordinalNumber(dateString, {
            unit: "month",
          }),
          valueCallback,
        );
      // Jan, Feb, ..., Dec
      case "MMM":
        return (
          match.month(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.month(dateString, { width: "narrow", context: "formatting" })
        );

      // J, F, ..., D
      case "MMMMM":
        return match.month(dateString, {
          width: "narrow",
          context: "formatting",
        });
      // January, February, ..., December
      case "MMMM":
      default:
        return (
          match.month(dateString, { width: "wide", context: "formatting" }) ||
          match.month(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.month(dateString, { width: "narrow", context: "formatting" })
        );
    }
  }

  validate(_date, value) {
    return value >= 0 && value <= 11;
  }

  set(date, _flags, value) {
    date.setMonth(value, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/QuarterParser.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/QuarterParser.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   QuarterParser: () => (/* binding */ QuarterParser)
/* harmony export */ });
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");



class QuarterParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 120;

  parse(dateString, token, match) {
    switch (token) {
      // 1, 2, 3, 4
      case "Q":
      case "QQ": // 01, 02, 03, 04
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
      // 1st, 2nd, 3rd, 4th
      case "Qo":
        return match.ordinalNumber(dateString, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "QQQ":
        return (
          match.quarter(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.quarter(dateString, {
            width: "narrow",
            context: "formatting",
          })
        );

      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "QQQQQ":
        return match.quarter(dateString, {
          width: "narrow",
          context: "formatting",
        });
      // 1st quarter, 2nd quarter, ...
      case "QQQQ":
      default:
        return (
          match.quarter(dateString, {
            width: "wide",
            context: "formatting",
          }) ||
          match.quarter(dateString, {
            width: "abbreviated",
            context: "formatting",
          }) ||
          match.quarter(dateString, {
            width: "narrow",
            context: "formatting",
          })
        );
    }
  }

  validate(_date, value) {
    return value >= 1 && value <= 4;
  }

  set(date, _flags, value) {
    date.setMonth((value - 1) * 3, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }

  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "M",
    "L",
    "w",
    "I",
    "d",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/SecondParser.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/SecondParser.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SecondParser: () => (/* binding */ SecondParser)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




class SecondParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 50;

  parse(dateString, token, match) {
    switch (token) {
      case "s":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.second, dateString);
      case "so":
        return match.ordinalNumber(dateString, { unit: "second" });
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
    }
  }

  validate(_date, value) {
    return value >= 0 && value <= 59;
  }

  set(date, _flags, value) {
    date.setSeconds(value, 0);
    return date;
  }

  incompatibleTokens = ["t", "T"];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StandAloneLocalDayParser: () => (/* binding */ StandAloneLocalDayParser)
/* harmony export */ });
/* harmony import */ var _setDay_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../setDay.mjs */ "./node_modules/date-fns/setDay.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




// Stand-alone local day of week
class StandAloneLocalDayParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 90;

  parse(dateString, token, match, options) {
    const valueCallback = (value) => {
      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0
      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;
      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;
    };

    switch (token) {
      // 3
      case "c":
      case "cc": // 03
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString), valueCallback);
      // 3rd
      case "co":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          match.ordinalNumber(dateString, {
            unit: "day",
          }),
          valueCallback,
        );
      // Tue
      case "ccc":
        return (
          match.day(dateString, {
            width: "abbreviated",
            context: "standalone",
          }) ||
          match.day(dateString, { width: "short", context: "standalone" }) ||
          match.day(dateString, { width: "narrow", context: "standalone" })
        );

      // T
      case "ccccc":
        return match.day(dateString, {
          width: "narrow",
          context: "standalone",
        });
      // Tu
      case "cccccc":
        return (
          match.day(dateString, { width: "short", context: "standalone" }) ||
          match.day(dateString, { width: "narrow", context: "standalone" })
        );

      // Tuesday
      case "cccc":
      default:
        return (
          match.day(dateString, { width: "wide", context: "standalone" }) ||
          match.day(dateString, {
            width: "abbreviated",
            context: "standalone",
          }) ||
          match.day(dateString, { width: "short", context: "standalone" }) ||
          match.day(dateString, { width: "narrow", context: "standalone" })
        );
    }
  }

  validate(_date, value) {
    return value >= 0 && value <= 6;
  }

  set(date, _flags, value, options) {
    date = (0,_setDay_mjs__WEBPACK_IMPORTED_MODULE_2__.setDay)(date, value, options);
    date.setHours(0, 0, 0, 0);
    return date;
  }

  incompatibleTokens = [
    "y",
    "R",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "E",
    "i",
    "e",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StandAloneMonthParser: () => (/* binding */ StandAloneMonthParser)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




class StandAloneMonthParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 110;

  parse(dateString, token, match) {
    const valueCallback = (value) => value - 1;

    switch (token) {
      // 1, 2, ..., 12
      case "L":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNumericPattern)(_constants_mjs__WEBPACK_IMPORTED_MODULE_2__.numericPatterns.month, dateString),
          valueCallback,
        );
      // 01, 02, ..., 12
      case "LL":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(2, dateString), valueCallback);
      // 1st, 2nd, ..., 12th
      case "Lo":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          match.ordinalNumber(dateString, {
            unit: "month",
          }),
          valueCallback,
        );
      // Jan, Feb, ..., Dec
      case "LLL":
        return (
          match.month(dateString, {
            width: "abbreviated",
            context: "standalone",
          }) ||
          match.month(dateString, { width: "narrow", context: "standalone" })
        );

      // J, F, ..., D
      case "LLLLL":
        return match.month(dateString, {
          width: "narrow",
          context: "standalone",
        });
      // January, February, ..., December
      case "LLLL":
      default:
        return (
          match.month(dateString, { width: "wide", context: "standalone" }) ||
          match.month(dateString, {
            width: "abbreviated",
            context: "standalone",
          }) ||
          match.month(dateString, { width: "narrow", context: "standalone" })
        );
    }
  }

  validate(_date, value) {
    return value >= 0 && value <= 11;
  }

  set(date, _flags, value) {
    date.setMonth(value, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }

  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "M",
    "w",
    "I",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StandAloneQuarterParser: () => (/* binding */ StandAloneQuarterParser)
/* harmony export */ });
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");



class StandAloneQuarterParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 120;

  parse(dateString, token, match) {
    switch (token) {
      // 1, 2, 3, 4
      case "q":
      case "qq": // 01, 02, 03, 04
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString);
      // 1st, 2nd, 3rd, 4th
      case "qo":
        return match.ordinalNumber(dateString, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "qqq":
        return (
          match.quarter(dateString, {
            width: "abbreviated",
            context: "standalone",
          }) ||
          match.quarter(dateString, {
            width: "narrow",
            context: "standalone",
          })
        );

      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "qqqqq":
        return match.quarter(dateString, {
          width: "narrow",
          context: "standalone",
        });
      // 1st quarter, 2nd quarter, ...
      case "qqqq":
      default:
        return (
          match.quarter(dateString, {
            width: "wide",
            context: "standalone",
          }) ||
          match.quarter(dateString, {
            width: "abbreviated",
            context: "standalone",
          }) ||
          match.quarter(dateString, {
            width: "narrow",
            context: "standalone",
          })
        );
    }
  }

  validate(_date, value) {
    return value >= 1 && value <= 4;
  }

  set(date, _flags, value) {
    date.setMonth((value - 1) * 3, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }

  incompatibleTokens = [
    "Y",
    "R",
    "Q",
    "M",
    "L",
    "w",
    "I",
    "d",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T",
  ];
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimestampMillisecondsParser: () => (/* binding */ TimestampMillisecondsParser)
/* harmony export */ });
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




class TimestampMillisecondsParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 20;

  parse(dateString) {
    return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseAnyDigitsSigned)(dateString);
  }

  set(date, _flags, value) {
    return [(0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_2__.constructFrom)(date, value), { timestampIsSet: true }];
  }

  incompatibleTokens = "*";
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimestampSecondsParser: () => (/* binding */ TimestampSecondsParser)
/* harmony export */ });
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");




class TimestampSecondsParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 40;

  parse(dateString) {
    return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseAnyDigitsSigned)(dateString);
  }

  set(date, _flags, value) {
    return [(0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_2__.constructFrom)(date, value * 1000), { timestampIsSet: true }];
  }

  incompatibleTokens = "*";
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/parsers/YearParser.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/parsers/YearParser.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   YearParser: () => (/* binding */ YearParser)
/* harmony export */ });
/* harmony import */ var _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Parser.mjs */ "./node_modules/date-fns/parse/_lib/Parser.mjs");
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.mjs */ "./node_modules/date-fns/parse/_lib/utils.mjs");



// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
// |----------|-------|----|-------|-------|-------|
// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
class YearParser extends _Parser_mjs__WEBPACK_IMPORTED_MODULE_0__.Parser {
  priority = 130;
  incompatibleTokens = ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"];

  parse(dateString, token, match) {
    const valueCallback = (year) => ({
      year,
      isTwoDigitYear: token === "yy",
    });

    switch (token) {
      case "y":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(4, dateString), valueCallback);
      case "yo":
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)(
          match.ordinalNumber(dateString, {
            unit: "year",
          }),
          valueCallback,
        );
      default:
        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValue)((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseNDigits)(token.length, dateString), valueCallback);
    }
  }

  validate(_date, value) {
    return value.isTwoDigitYear || value.year > 0;
  }

  set(date, flags, value) {
    const currentYear = date.getFullYear();

    if (value.isTwoDigitYear) {
      const normalizedTwoDigitYear = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.normalizeTwoDigitYear)(
        value.year,
        currentYear,
      );
      date.setFullYear(normalizedTwoDigitYear, 0, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    const year =
      !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
    date.setFullYear(year, 0, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }
}


/***/ }),

/***/ "./node_modules/date-fns/parse/_lib/utils.mjs":
/*!****************************************************!*\
  !*** ./node_modules/date-fns/parse/_lib/utils.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dayPeriodEnumToHours: () => (/* binding */ dayPeriodEnumToHours),
/* harmony export */   isLeapYearIndex: () => (/* binding */ isLeapYearIndex),
/* harmony export */   mapValue: () => (/* binding */ mapValue),
/* harmony export */   normalizeTwoDigitYear: () => (/* binding */ normalizeTwoDigitYear),
/* harmony export */   parseAnyDigitsSigned: () => (/* binding */ parseAnyDigitsSigned),
/* harmony export */   parseNDigits: () => (/* binding */ parseNDigits),
/* harmony export */   parseNDigitsSigned: () => (/* binding */ parseNDigitsSigned),
/* harmony export */   parseNumericPattern: () => (/* binding */ parseNumericPattern),
/* harmony export */   parseTimezonePattern: () => (/* binding */ parseTimezonePattern)
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants.mjs */ "./node_modules/date-fns/constants.mjs");
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.mjs */ "./node_modules/date-fns/parse/_lib/constants.mjs");



function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }

  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest,
  };
}

function parseNumericPattern(pattern, dateString) {
  const matchResult = dateString.match(pattern);

  if (!matchResult) {
    return null;
  }

  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length),
  };
}

function parseTimezonePattern(pattern, dateString) {
  const matchResult = dateString.match(pattern);

  if (!matchResult) {
    return null;
  }

  // Input is 'Z'
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1),
    };
  }

  const sign = matchResult[1] === "+" ? 1 : -1;
  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;

  return {
    value:
      sign *
      (hours * _constants_mjs__WEBPACK_IMPORTED_MODULE_0__.millisecondsInHour +
        minutes * _constants_mjs__WEBPACK_IMPORTED_MODULE_0__.millisecondsInMinute +
        seconds * _constants_mjs__WEBPACK_IMPORTED_MODULE_0__.millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length),
  };
}

function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(_constants_mjs__WEBPACK_IMPORTED_MODULE_1__.numericPatterns.anyDigitsSigned, dateString);
}

function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(_constants_mjs__WEBPACK_IMPORTED_MODULE_1__.numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(_constants_mjs__WEBPACK_IMPORTED_MODULE_1__.numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(_constants_mjs__WEBPACK_IMPORTED_MODULE_1__.numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(_constants_mjs__WEBPACK_IMPORTED_MODULE_1__.numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}

function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(_constants_mjs__WEBPACK_IMPORTED_MODULE_1__.numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(_constants_mjs__WEBPACK_IMPORTED_MODULE_1__.numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(_constants_mjs__WEBPACK_IMPORTED_MODULE_1__.numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(_constants_mjs__WEBPACK_IMPORTED_MODULE_1__.numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}

function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}

function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  const isCommonEra = currentYear > 0;
  // Absolute number of the current year:
  // 1 -> 1 AC
  // 0 -> 1 BC
  // -1 -> 2 BC
  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;

  let result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    const rangeEnd = absCurrentYear + 50;
    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;
    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }

  return isCommonEra ? result : 1 - result;
}

function isLeapYearIndex(year) {
  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);
}


/***/ }),

/***/ "./node_modules/date-fns/setDay.mjs":
/*!******************************************!*\
  !*** ./node_modules/date-fns/setDay.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   setDay: () => (/* binding */ setDay)
/* harmony export */ });
/* harmony import */ var _addDays_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./addDays.mjs */ "./node_modules/date-fns/addDays.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");
/* harmony import */ var _lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/defaultOptions.mjs */ "./node_modules/date-fns/_lib/defaultOptions.mjs");




/**
 * The {@link setDay} function options.
 */

/**
 * @name setDay
 * @category Weekday Helpers
 * @summary Set the day of the week to the given date.
 *
 * @description
 * Set the day of the week to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param day - The day of the week of the new date
 * @param options - An object with options.
 *
 * @returns The new date with the day of the week set
 *
 * @example
 * // Set week day to Sunday, with the default weekStartsOn of Sunday:
 * const result = setDay(new Date(2014, 8, 1), 0)
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // Set week day to Sunday, with a weekStartsOn of Monday:
 * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 00:00:00
 */
function setDay(date, day, options) {
  const defaultOptions = (0,_lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultOptions)();
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_1__.toDate)(date);
  const currentDay = _date.getDay();

  const remainder = day % 7;
  const dayIndex = (remainder + 7) % 7;

  const delta = 7 - weekStartsOn;
  const diff =
    day < 0 || day > 6
      ? day - ((currentDay + delta) % 7)
      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);
  return (0,_addDays_mjs__WEBPACK_IMPORTED_MODULE_2__.addDays)(_date, diff);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setDay);


/***/ }),

/***/ "./node_modules/date-fns/setISODay.mjs":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/setISODay.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   setISODay: () => (/* binding */ setISODay)
/* harmony export */ });
/* harmony import */ var _addDays_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./addDays.mjs */ "./node_modules/date-fns/addDays.mjs");
/* harmony import */ var _getISODay_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getISODay.mjs */ "./node_modules/date-fns/getISODay.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");




/**
 * @name setISODay
 * @category Weekday Helpers
 * @summary Set the day of the ISO week to the given date.
 *
 * @description
 * Set the day of the ISO week to the given date.
 * ISO week starts with Monday.
 * 7 is the index of Sunday, 1 is the index of Monday etc.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param day - The day of the ISO week of the new date
 *
 * @returns The new date with the day of the ISO week set
 *
 * @example
 * // Set Sunday to 1 September 2014:
 * const result = setISODay(new Date(2014, 8, 1), 7)
 * //=> Sun Sep 07 2014 00:00:00
 */
function setISODay(date, day) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const currentDay = (0,_getISODay_mjs__WEBPACK_IMPORTED_MODULE_1__.getISODay)(_date);
  const diff = day - currentDay;
  return (0,_addDays_mjs__WEBPACK_IMPORTED_MODULE_2__.addDays)(_date, diff);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setISODay);


/***/ }),

/***/ "./node_modules/date-fns/setISOWeek.mjs":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/setISOWeek.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   setISOWeek: () => (/* binding */ setISOWeek)
/* harmony export */ });
/* harmony import */ var _getISOWeek_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getISOWeek.mjs */ "./node_modules/date-fns/getISOWeek.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");



/**
 * @name setISOWeek
 * @category ISO Week Helpers
 * @summary Set the ISO week to the given date.
 *
 * @description
 * Set the ISO week to the given date, saving the weekday number.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param week - The ISO week of the new date
 *
 * @returns The new date with the ISO week set
 *
 * @example
 * // Set the 53rd ISO week to 7 August 2004:
 * const result = setISOWeek(new Date(2004, 7, 7), 53)
 * //=> Sat Jan 01 2005 00:00:00
 */
function setISOWeek(date, week) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const diff = (0,_getISOWeek_mjs__WEBPACK_IMPORTED_MODULE_1__.getISOWeek)(_date) - week;
  _date.setDate(_date.getDate() - diff * 7);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setISOWeek);


/***/ }),

/***/ "./node_modules/date-fns/setWeek.mjs":
/*!*******************************************!*\
  !*** ./node_modules/date-fns/setWeek.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   setWeek: () => (/* binding */ setWeek)
/* harmony export */ });
/* harmony import */ var _getWeek_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWeek.mjs */ "./node_modules/date-fns/getWeek.mjs");
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");



/**
 * The {@link setWeek} function options.
 */

/**
 * @name setWeek
 * @category Week Helpers
 * @summary Set the local week to the given date.
 *
 * @description
 * Set the local week to the given date, saving the weekday number.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param week - The week of the new date
 * @param options - An object with options
 *
 * @returns The new date with the local week set
 *
 * @example
 * // Set the 1st week to 2 January 2005 with default options:
 * const result = setWeek(new Date(2005, 0, 2), 1)
 * //=> Sun Dec 26 2004 00:00:00
 *
 * @example
 * // Set the 1st week to 2 January 2005,
 * // if Monday is the first day of the week,
 * // and the first week of the year always contains 4 January:
 * const result = setWeek(new Date(2005, 0, 2), 1, {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> Sun Jan 4 2004 00:00:00
 */
function setWeek(date, week, options) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const diff = (0,_getWeek_mjs__WEBPACK_IMPORTED_MODULE_1__.getWeek)(_date, options) - week;
  _date.setDate(_date.getDate() - diff * 7);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setWeek);


/***/ }),

/***/ "./node_modules/date-fns/startOfDay.mjs":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/startOfDay.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfDay: () => (/* binding */ startOfDay)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name startOfDay
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a day
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */
function startOfDay(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfDay);


/***/ }),

/***/ "./node_modules/date-fns/startOfHour.mjs":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/startOfHour.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfHour: () => (/* binding */ startOfHour)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name startOfHour
 * @category Hour Helpers
 * @summary Return the start of an hour for the given date.
 *
 * @description
 * Return the start of an hour for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of an hour
 *
 * @example
 * // The start of an hour for 2 September 2014 11:55:00:
 * const result = startOfHour(new Date(2014, 8, 2, 11, 55))
 * //=> Tue Sep 02 2014 11:00:00
 */
function startOfHour(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  _date.setMinutes(0, 0, 0);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfHour);


/***/ }),

/***/ "./node_modules/date-fns/startOfISOWeek.mjs":
/*!**************************************************!*\
  !*** ./node_modules/date-fns/startOfISOWeek.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfISOWeek: () => (/* binding */ startOfISOWeek)
/* harmony export */ });
/* harmony import */ var _startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./startOfWeek.mjs */ "./node_modules/date-fns/startOfWeek.mjs");


/**
 * @name startOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the start of an ISO week for the given date.
 *
 * @description
 * Return the start of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of an ISO week
 *
 * @example
 * // The start of an ISO week for 2 September 2014 11:55:00:
 * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfISOWeek(date) {
  return (0,_startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_0__.startOfWeek)(date, { weekStartsOn: 1 });
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfISOWeek);


/***/ }),

/***/ "./node_modules/date-fns/startOfISOWeekYear.mjs":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/startOfISOWeekYear.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfISOWeekYear: () => (/* binding */ startOfISOWeekYear)
/* harmony export */ });
/* harmony import */ var _getISOWeekYear_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getISOWeekYear.mjs */ "./node_modules/date-fns/getISOWeekYear.mjs");
/* harmony import */ var _startOfISOWeek_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./startOfISOWeek.mjs */ "./node_modules/date-fns/startOfISOWeek.mjs");
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");




/**
 * @name startOfISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the start of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the start of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of an ISO week-numbering year
 *
 * @example
 * // The start of an ISO week-numbering year for 2 July 2005:
 * const result = startOfISOWeekYear(new Date(2005, 6, 2))
 * //=> Mon Jan 03 2005 00:00:00
 */
function startOfISOWeekYear(date) {
  const year = (0,_getISOWeekYear_mjs__WEBPACK_IMPORTED_MODULE_0__.getISOWeekYear)(date);
  const fourthOfJanuary = (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(date, 0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  return (0,_startOfISOWeek_mjs__WEBPACK_IMPORTED_MODULE_2__.startOfISOWeek)(fourthOfJanuary);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfISOWeekYear);


/***/ }),

/***/ "./node_modules/date-fns/startOfMinute.mjs":
/*!*************************************************!*\
  !*** ./node_modules/date-fns/startOfMinute.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfMinute: () => (/* binding */ startOfMinute)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name startOfMinute
 * @category Minute Helpers
 * @summary Return the start of a minute for the given date.
 *
 * @description
 * Return the start of a minute for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a minute
 *
 * @example
 * // The start of a minute for 1 December 2014 22:15:45.400:
 * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:00
 */
function startOfMinute(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  _date.setSeconds(0, 0);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfMinute);


/***/ }),

/***/ "./node_modules/date-fns/startOfMonth.mjs":
/*!************************************************!*\
  !*** ./node_modules/date-fns/startOfMonth.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfMonth: () => (/* binding */ startOfMonth)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name startOfMonth
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a month
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfMonth(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  _date.setDate(1);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfMonth);


/***/ }),

/***/ "./node_modules/date-fns/startOfQuarter.mjs":
/*!**************************************************!*\
  !*** ./node_modules/date-fns/startOfQuarter.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfQuarter: () => (/* binding */ startOfQuarter)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name startOfQuarter
 * @category Quarter Helpers
 * @summary Return the start of a year quarter for the given date.
 *
 * @description
 * Return the start of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a quarter
 *
 * @example
 * // The start of a quarter for 2 September 2014 11:55:00:
 * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Jul 01 2014 00:00:00
 */
function startOfQuarter(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const currentMonth = _date.getMonth();
  const month = currentMonth - (currentMonth % 3);
  _date.setMonth(month, 1);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfQuarter);


/***/ }),

/***/ "./node_modules/date-fns/startOfSecond.mjs":
/*!*************************************************!*\
  !*** ./node_modules/date-fns/startOfSecond.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfSecond: () => (/* binding */ startOfSecond)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");


/**
 * @name startOfSecond
 * @category Second Helpers
 * @summary Return the start of a second for the given date.
 *
 * @description
 * Return the start of a second for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a second
 *
 * @example
 * // The start of a second for 1 December 2014 22:15:45.400:
 * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.000
 */
function startOfSecond(date) {
  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  _date.setMilliseconds(0);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfSecond);


/***/ }),

/***/ "./node_modules/date-fns/startOfWeek.mjs":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/startOfWeek.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfWeek: () => (/* binding */ startOfWeek)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");
/* harmony import */ var _lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/defaultOptions.mjs */ "./node_modules/date-fns/_lib/defaultOptions.mjs");



/**
 * The {@link startOfWeek} function options.
 */

/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The start of a week
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfWeek(date, options) {
  const defaultOptions = (0,_lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultOptions)();
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const _date = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_1__.toDate)(date);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;

  _date.setDate(_date.getDate() - diff);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfWeek);


/***/ }),

/***/ "./node_modules/date-fns/startOfWeekYear.mjs":
/*!***************************************************!*\
  !*** ./node_modules/date-fns/startOfWeekYear.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfWeekYear: () => (/* binding */ startOfWeekYear)
/* harmony export */ });
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");
/* harmony import */ var _getWeekYear_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWeekYear.mjs */ "./node_modules/date-fns/getWeekYear.mjs");
/* harmony import */ var _startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./startOfWeek.mjs */ "./node_modules/date-fns/startOfWeek.mjs");
/* harmony import */ var _lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/defaultOptions.mjs */ "./node_modules/date-fns/_lib/defaultOptions.mjs");





/**
 * The {@link startOfWeekYear} function options.
 */

/**
 * @name startOfWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Return the start of a local week-numbering year for the given date.
 *
 * @description
 * Return the start of a local week-numbering year.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The start of a week-numbering year
 *
 * @example
 * // The start of an a week-numbering year for 2 July 2005 with default settings:
 * const result = startOfWeekYear(new Date(2005, 6, 2))
 * //=> Sun Dec 26 2004 00:00:00
 *
 * @example
 * // The start of a week-numbering year for 2 July 2005
 * // if Monday is the first day of week
 * // and 4 January is always in the first week of the year:
 * const result = startOfWeekYear(new Date(2005, 6, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> Mon Jan 03 2005 00:00:00
 */
function startOfWeekYear(date, options) {
  const defaultOptions = (0,_lib_defaultOptions_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultOptions)();
  const firstWeekContainsDate =
    options?.firstWeekContainsDate ??
    options?.locale?.options?.firstWeekContainsDate ??
    defaultOptions.firstWeekContainsDate ??
    defaultOptions.locale?.options?.firstWeekContainsDate ??
    1;

  const year = (0,_getWeekYear_mjs__WEBPACK_IMPORTED_MODULE_1__.getWeekYear)(date, options);
  const firstWeek = (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_2__.constructFrom)(date, 0);
  firstWeek.setFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setHours(0, 0, 0, 0);
  const _date = (0,_startOfWeek_mjs__WEBPACK_IMPORTED_MODULE_3__.startOfWeek)(firstWeek, options);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfWeekYear);


/***/ }),

/***/ "./node_modules/date-fns/startOfYear.mjs":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/startOfYear.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfYear: () => (/* binding */ startOfYear)
/* harmony export */ });
/* harmony import */ var _toDate_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.mjs */ "./node_modules/date-fns/toDate.mjs");
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");



/**
 * @name startOfYear
 * @category Year Helpers
 * @summary Return the start of a year for the given date.
 *
 * @description
 * Return the start of a year for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a year
 *
 * @example
 * // The start of a year for 2 September 2014 11:55:00:
 * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Jan 01 2014 00:00:00
 */
function startOfYear(date) {
  const cleanDate = (0,_toDate_mjs__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const _date = (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(date, 0);
  _date.setFullYear(cleanDate.getFullYear(), 0, 1);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfYear);


/***/ }),

/***/ "./node_modules/date-fns/toDate.mjs":
/*!******************************************!*\
  !*** ./node_modules/date-fns/toDate.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   toDate: () => (/* binding */ toDate)
/* harmony export */ });
/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param argument - The value to convert
 *
 * @returns The parsed date in the local time zone
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */
function toDate(argument) {
  const argStr = Object.prototype.toString.call(argument);

  // Clone the date
  if (
    argument instanceof Date ||
    (typeof argument === "object" && argStr === "[object Date]")
  ) {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new argument.constructor(+argument);
  } else if (
    typeof argument === "number" ||
    argStr === "[object Number]" ||
    typeof argument === "string" ||
    argStr === "[object String]"
  ) {
    // TODO: Can we get rid of as?
    return new Date(argument);
  } else {
    // TODO: Can we get rid of as?
    return new Date(NaN);
  }
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toDate);


/***/ }),

/***/ "./node_modules/date-fns/transpose.mjs":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/transpose.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   transpose: () => (/* binding */ transpose)
/* harmony export */ });
/* harmony import */ var _constructFrom_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.mjs */ "./node_modules/date-fns/constructFrom.mjs");


/**
 * @name transpose
 * @category Generic Helpers
 * @summary Transpose the date to the given constructor.
 *
 * @description
 * The function transposes the date to the given constructor. It helps you
 * to transpose the date in the system time zone to say `UTCDate` or any other
 * date extension.
 *
 * @typeParam DateInputType - The input `Date` type derived from the passed argument.
 * @typeParam DateOutputType - The output `Date` type derived from the passed constructor.
 *
 * @param fromDate - The date to use values from
 * @param constructor - The date constructor to use
 *
 * @returns Date transposed to the given constructor
 *
 * @example
 * // Create July 10, 2022 00:00 in locale time zone
 * const date = new Date(2022, 6, 10)
 * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'
 *
 * @example
 * // Transpose the date to July 10, 2022 00:00 in UTC
 * transpose(date, UTCDate)
 * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'
 */
function transpose(fromDate, constructor) {
  const date =
    constructor instanceof Date
      ? (0,_constructFrom_mjs__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(constructor, 0)
      : new constructor(0);
  date.setFullYear(
    fromDate.getFullYear(),
    fromDate.getMonth(),
    fromDate.getDate(),
  );
  date.setHours(
    fromDate.getHours(),
    fromDate.getMinutes(),
    fromDate.getSeconds(),
    fromDate.getMilliseconds(),
  );
  return date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (transpose);


/***/ }),

/***/ "./data/model_dt.json":
/*!****************************!*\
  !*** ./data/model_dt.json ***!
  \****************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[{"indent":1,"rule":"|--- FatContent <= 8.85"},{"indent":2,"rule":"|   |--- CarbohydrateContent <= 25.15"},{"indent":3,"rule":"|   |   |--- FatContent <= 3.65"},{"indent":4,"rule":"|   |   |   |--- CarbohydrateContent <= 8.35"},{"indent":5,"rule":"|   |   |   |   |--- FiberContent <= 0.45"},{"indent":6,"rule":"|   |   |   |   |   |--- ProteinContent <= 10.55"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 1.55"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 0.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 0.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 0.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  0.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  0.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 738.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  738.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 1791.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  1791.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  0.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 3.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 145.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 413.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 26"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  413.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":96,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  145.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 146.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  146.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  3.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 4.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":3,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 21","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  4.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 1.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 28","class_distribution":{"0":25,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  1.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  1.55"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 115.50"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 2.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 60.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 0.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  0.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  60.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 62.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  62.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  2.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 2.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  2.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 0.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  0.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  115.50"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 3.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 0.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  0.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  3.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 14.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  14.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":6,"rule":"|   |   |   |   |   |--- ProteinContent >  10.55"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SugarContent <= 1.55"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 0.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 96.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 10.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  10.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 33.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  33.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":5,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  96.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 118.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  118.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 492.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  492.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  0.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 523.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 33.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  33.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 2.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  2.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  523.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 3.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 98.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  98.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  3.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SugarContent >  1.55"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 28.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 13.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  13.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 99.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  99.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 2.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  2.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  28.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 178.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  178.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":5,"rule":"|   |   |   |   |--- FiberContent >  0.45"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent <= 0.85"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 0.45"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent <= 1.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 5.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  5.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 0.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 2.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  2.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  0.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 4.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  4.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent >  1.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 2.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 0.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 2.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  2.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  0.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 1.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  1.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  2.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 6.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 5.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  5.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  6.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  0.45"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 2.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 730.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 9.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  9.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  730.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 0.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  0.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  2.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 62.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1209.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  0.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 23"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  1209.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 2.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  2.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  62.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 7.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 4.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":12,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  4.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  7.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 154.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":45,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  154.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent >  0.85"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 8.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 1.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 5.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 226.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 21.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  21.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  226.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 3.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  3.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":11,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  5.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 9.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 5.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  5.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  9.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 1.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  1.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  1.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 1.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 32.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  32.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 131.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  131.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  1.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 2.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 2.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":15,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  2.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  2.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 3.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  3.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  8.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent <= 5.60"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 7.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  7.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 526.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  526.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent >  5.60"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 37.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 73.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 252.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  252.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  73.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 2.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  2.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  37.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 62.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 1.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  1.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  62.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 68.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  68.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17"},{"indent":4,"rule":"|   |   |   |--- CarbohydrateContent >  8.35"},{"indent":5,"rule":"|   |   |   |   |--- CarbohydrateContent <= 14.75"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent <= 2.55"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 0.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 1.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 0.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 0.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 2.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  2.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 20","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  0.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  0.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 9.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 1.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  1.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  9.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  1.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 1.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 12.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 50.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  50.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  12.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 2.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  2.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  1.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 62.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  62.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 12.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  12.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  0.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent <= 16.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 56.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 1.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 9.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 28","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  9.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  1.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 246.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  246.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  56.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 12.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 3.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  3.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  12.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 99.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 22","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  99.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent >  16.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 0.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 1.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  1.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  0.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  0.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 32.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 25.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":5,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  25.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  32.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 1.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  1.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent >  2.55"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 3.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 1.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 2.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 11.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 4.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  4.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  11.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 2.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  2.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":7,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  2.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 13.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  13.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  1.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 7.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 1.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 7.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  7.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  1.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 2.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  2.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  7.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 68.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 66.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  66.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":14,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  68.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 14.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  14.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  3.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 109.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 10.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 67.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  67.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 2.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":10,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  2.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  10.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 55.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  0.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  55.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 2.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":0,"1":6},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  2.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":5,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  109.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 28.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 57.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  57.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  0.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  28.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 3.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 57.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  57.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  3.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":5,"rule":"|   |   |   |   |--- CarbohydrateContent >  14.75"},{"indent":6,"rule":"|   |   |   |   |   |--- CholesterolContent <= 0.95"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 0.55"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 0.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 132.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 0.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 73.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  73.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  0.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  132.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 14.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  14.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 20.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  20.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  0.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 23.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 3.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  3.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 3.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  3.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  23.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 23.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  23.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 23.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  23.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  0.55"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent <= 1.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 8.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 85.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 83.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":12,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  83.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  85.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 295.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  295.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  8.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 12.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  12.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 13.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  13.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent >  1.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 96.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 5.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  5.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 2.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 35","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  2.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  96.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 4098.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 415.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 24"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  415.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 22","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  4098.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 101.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  101.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":6,"rule":"|   |   |   |   |   |--- CholesterolContent >  0.95"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 4.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 103.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 2.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 16.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  16.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  0.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  2.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 331.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 3.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  3.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  331.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 96.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  96.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  103.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 101.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 2.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 91.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  91.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":11,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  2.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 113.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  113.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  101.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 4.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  4.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 3.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  3.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  4.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent <= 19.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 219.80"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 2.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 52.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  52.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 22","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  2.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":38,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  1.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  219.80"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1256.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1256.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":73,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  1.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 1.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  1.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":9,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent >  19.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 116.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 117.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  117.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  116.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 3.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  3.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":3,"rule":"|   |   |--- FatContent >  3.65"},{"indent":4,"rule":"|   |   |   |--- ProteinContent <= 18.85"},{"indent":5,"rule":"|   |   |   |   |--- FiberContent <= 1.65"},{"indent":6,"rule":"|   |   |   |   |   |--- CarbohydrateContent <= 19.75"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories <= 242.50"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 151.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 7.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  7.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":10,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  1.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 15.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  15.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 4.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 164.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  164.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  4.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 8.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  8.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":5,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  151.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 5.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 14.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  14.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  5.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 181.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 17.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":18,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  17.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  181.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 6.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  6.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories >  242.50"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 4.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 19.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 4.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  4.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  19.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  4.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 4.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 1.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 0.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  0.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  1.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 69.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  69.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  4.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 15.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 10.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  10.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  15.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 16.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  16.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":6,"rule":"|   |   |   |   |   |--- CarbohydrateContent >  19.75"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 4.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 2.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 153.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 4.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 11.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  11.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  4.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 203.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  203.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  153.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 4.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 13.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  13.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  4.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 141.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  141.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  2.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 1.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 63.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 3.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  3.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  63.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 4.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  4.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  1.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 3.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 124.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  124.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  3.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  4.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 6.90"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 5.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 153.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 147.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  147.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  153.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 12.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  12.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  5.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 291.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 0.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  0.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":14,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  291.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  6.90"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 6.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 16.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 187.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  187.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  16.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 22.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  22.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  6.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 16.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 20.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  20.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":50,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  16.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 18.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":15,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  18.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":5,"rule":"|   |   |   |   |--- FiberContent >  1.65"},{"indent":6,"rule":"|   |   |   |   |   |--- SaturatedFatContent <= 3.05"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent <= 3.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 5.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 19.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 130.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 17.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 26"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  17.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  130.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 61.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  61.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  19.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 4.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 34.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  34.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  4.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 479.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  479.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  5.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 7.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 537.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 26","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  537.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 8.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  8.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  7.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 182.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 6.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  6.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  182.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 6.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  6.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent >  3.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 350.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 12.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 11.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 12.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  12.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 22","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  11.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 121.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  121.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  12.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 191.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 4.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  4.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  191.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 7.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  7.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  350.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 23.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 4.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  4.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1132.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 26","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1132.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":14,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  23.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 5.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1058.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":1,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1058.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  5.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 31.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  31.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":26,"1":0},"truncated":true},{"indent":6,"rule":"|   |   |   |   |   |--- SaturatedFatContent >  3.05"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent <= 3.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 249.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 404.00"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 212.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 11.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  11.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  212.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 181.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  181.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  404.00"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 406.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  406.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 7.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  7.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  249.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent >  3.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 7.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 6.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 7.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 192.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  192.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  7.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 19.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  19.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  6.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 4.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  4.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 1.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  1.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  7.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 348.20"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 194.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  194.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  348.20"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":4,"rule":"|   |   |   |--- ProteinContent >  18.85"},{"indent":5,"rule":"|   |   |   |   |--- FatContent <= 6.55"},{"indent":6,"rule":"|   |   |   |   |   |--- Calories <= 207.70"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 6.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 1.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 166.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 59.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  59.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 172.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  172.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  166.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  1.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 204.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 15.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 201.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 30","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  201.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  15.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 4.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  4.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  204.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 29.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 62.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  62.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  29.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  1.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  6.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 191.00"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 4.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 38.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 7.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  7.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  38.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  4.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 23.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  23.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  191.00"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 74.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 206.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 200.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":9,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  200.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  206.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  74.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 25.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 9.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  9.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  25.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 204.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  204.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":6,"rule":"|   |   |   |   |   |--- Calories >  207.70"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent <= 1.65"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent <= 7.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 811.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 669.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 55.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  55.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  669.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 24.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  24.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  811.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 4.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 393.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  393.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  4.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 63.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  63.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent >  7.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 235.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 18.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 34.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  34.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  18.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 90.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  90.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  235.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 23.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 5.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  5.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  23.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 213.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  213.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent >  1.65"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 83.40"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  83.40"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 35.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 31.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 37.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  37.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  31.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 261.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  261.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  35.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 6.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  6.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 519.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  519.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":5,"rule":"|   |   |   |   |--- FatContent >  6.55"},{"indent":6,"rule":"|   |   |   |   |   |--- Calories <= 248.45"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories <= 217.80"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 11.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 6.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 202.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 9.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  9.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  202.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 515.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  515.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  6.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 28.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  1.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  28.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 206.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  206.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  11.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 26.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 20.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 6.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  6.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  20.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 65.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  65.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  26.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories >  217.80"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 7.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 10.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 78.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  78.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  0.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 240.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  240.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  10.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 19.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  19.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 222.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  222.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  7.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 38.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 21.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  21.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  38.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 7.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 238.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  238.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  7.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 40.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  40.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":6,"rule":"|   |   |   |   |   |--- Calories >  248.45"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 7.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 790.40"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 250.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 7.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 28.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  28.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  7.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  250.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 44.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 3.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  3.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  44.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 404.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  404.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  790.40"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 55.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 301.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 2.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  2.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  301.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 4.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  4.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  55.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  7.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent <= 16.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 47.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 308.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  308.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 403.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  403.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  47.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 363.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 9.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":18,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  9.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  363.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 66.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  66.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent >  16.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 2.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  2.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 23.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  23.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":2,"rule":"|   |--- CarbohydrateContent >  25.15"},{"indent":3,"rule":"|   |   |--- FatContent <= 6.65"},{"indent":4,"rule":"|   |   |   |--- ProteinContent <= 7.65"},{"indent":5,"rule":"|   |   |   |   |--- CholesterolContent <= 1.05"},{"indent":6,"rule":"|   |   |   |   |   |--- ProteinContent <= 0.25"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SodiumContent <= 0.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 113.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 0.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  0.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  113.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 186.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  186.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 0.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  0.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SodiumContent >  0.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent <= 25.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 1.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 62.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 107.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  107.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  62.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 10.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  10.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  1.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 124.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":14},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  124.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent >  25.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 0.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 116.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 102.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":7},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  102.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  116.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 117.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  117.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 21"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  0.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 0.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  0.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 5.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  5.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":6,"rule":"|   |   |   |   |   |--- ProteinContent >  0.25"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SodiumContent <= 600.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 35.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 5.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 183.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 100.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  100.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 26"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  183.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 187.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  187.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  5.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 190.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  190.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 24.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  24.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  35.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 0.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 1.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  1.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 178.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  178.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  0.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 146.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 3.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 33","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  3.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 31"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  146.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 115.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  115.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SodiumContent >  600.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 1.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 26.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  26.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 28.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  28.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":11,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  1.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 1.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 678.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 58.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  58.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  678.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 173.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  173.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  1.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 6.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 2790.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 21"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  2790.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  6.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 52.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  52.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":5,"rule":"|   |   |   |   |--- CholesterolContent >  1.05"},{"indent":6,"rule":"|   |   |   |   |   |--- CarbohydrateContent <= 29.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 5.45"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 0.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 2.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 4.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  4.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  2.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 2.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  2.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 7.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  7.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  0.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 352.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 1.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 25.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  25.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":5},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  1.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  352.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 1.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  1.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 167.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  167.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":20,"1":0},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  5.45"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 4.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 5.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 166.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":10,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  166.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  5.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 1.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 178.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  178.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  1.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 237.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  237.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  4.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 5.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 26.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 10.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  10.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":20,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  26.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 6.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  6.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  5.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 6.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 5.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  5.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  6.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 2.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  2.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":6,"rule":"|   |   |   |   |   |--- CarbohydrateContent >  29.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SugarContent <= 8.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 2.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 70.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 1.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 5.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  5.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  1.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 7.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  7.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  70.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  0.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 30.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  30.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  2.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 2.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 156.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 4.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":124,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  4.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  156.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 4.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  4.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  2.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 2.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 769.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  769.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":66,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  2.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 205.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  205.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SugarContent >  8.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 903.30"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 2.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 6.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  1.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  6.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 242.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  242.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  2.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 3.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  3.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 18"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 33.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":31,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  33.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 37"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  903.30"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 8.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 8.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  8.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 3.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  3.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  8.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 337.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  337.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":4,"rule":"|   |   |   |--- ProteinContent >  7.65"},{"indent":5,"rule":"|   |   |   |   |--- SugarContent <= 20.25"},{"indent":6,"rule":"|   |   |   |   |   |--- SugarContent <= 0.65"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent <= 5.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 2381.70"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 0.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 28.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  28.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":7,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  0.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 177.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 150.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  150.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  177.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 0.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  0.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  2381.70"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 37732.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  37732.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent >  5.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 45.80"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 13.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 26.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  26.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  0.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  13.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  45.80"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 190.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 269.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  269.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 484.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  484.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  190.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 249.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  249.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 49.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  49.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":6,"rule":"|   |   |   |   |   |--- SugarContent >  0.65"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SaturatedFatContent <= 2.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 125.20"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 6.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 9.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 25","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  9.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 407.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  407.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 20"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  6.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 48.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 17.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  17.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 27"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  48.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 10.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 23","class_distribution":{"0":0,"1":6},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  10.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  125.20"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 7.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1172.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 702.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  702.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  1172.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 48.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  48.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  7.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 3375.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":5,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  3375.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 3.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  3.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SaturatedFatContent >  2.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 41.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 113.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 25.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 59.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  59.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  25.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 3.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  3.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 18","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  113.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 80.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  80.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":24,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  41.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 14.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1206.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 5.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  5.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":13,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  1206.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 107.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  107.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  14.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 97.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 4.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  4.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  97.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 4916.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  4916.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":5,"rule":"|   |   |   |   |--- SugarContent >  20.25"},{"indent":6,"rule":"|   |   |   |   |   |--- SaturatedFatContent <= 1.65"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SodiumContent <= 7.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 7.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  7.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SodiumContent >  7.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 11.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 86.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 11.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  11.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  86.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 28.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  28.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 473.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 8.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  8.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  473.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 1469.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  1469.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  11.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 34.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 27.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 113.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  113.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  27.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 39.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  39.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  34.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 115.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 86.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  86.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  115.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 32.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  32.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":6,"rule":"|   |   |   |   |   |--- SaturatedFatContent >  1.65"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SodiumContent <= 215.65"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 30.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 66.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 1.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  1.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 9.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  9.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  66.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 11.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  11.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  0.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 34.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  34.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  30.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SodiumContent >  215.65"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent <= 46.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 91.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 4.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 316.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  316.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  4.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1584.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":17,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1584.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  91.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 8.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  8.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":26,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent >  46.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 5.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 625.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 8.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  8.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  625.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  5.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 14.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 53.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  53.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  14.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":3,"rule":"|   |   |--- FatContent >  6.65"},{"indent":4,"rule":"|   |   |   |--- Calories <= 224.95"},{"indent":5,"rule":"|   |   |   |   |--- FiberContent <= 2.45"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent <= 7.25"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories <= 208.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 8.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 1.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 28.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  28.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 2.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":22,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  2.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":10,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  1.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 34.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 204.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  204.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  34.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  8.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 6.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  6.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 9.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  9.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories >  208.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 0.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 4.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  4.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 28.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  28.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  0.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 24.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 17.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  0.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  17.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 49.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  49.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  24.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 222.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  222.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  1.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent >  7.25"},{"indent":7,"rule":"|   |   |   |   |   |   |--- CarbohydrateContent <= 36.45"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 169.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 3.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  3.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  169.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 731.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  731.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 8.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 1.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  1.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  8.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":7,"rule":"|   |   |   |   |   |   |--- CarbohydrateContent >  36.45"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent <= 22.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 223.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  223.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent >  22.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 7.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 29.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  29.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  7.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":5,"rule":"|   |   |   |   |--- FiberContent >  2.45"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent <= 7.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories <= 219.70"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent <= 12.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 684.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 34.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 12.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  12.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  34.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 7.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  7.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  684.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent >  12.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 2.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 576.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 213.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  213.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  576.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  2.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 38.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 6.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":26,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  6.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  38.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories >  219.70"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 7.30"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  7.30"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 220.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  220.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent >  7.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- CholesterolContent <= 5.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent <= 5.60"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 29.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":12,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  29.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 8.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  8.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 28.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 3.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  3.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  28.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent >  5.60"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 195.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 141.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  141.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  195.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- CholesterolContent >  5.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 3.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 2.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 42.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  42.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  2.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  3.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 4.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 17.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  17.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 9.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  9.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  4.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 68.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  68.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 5.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  5.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":4,"rule":"|   |   |   |--- Calories >  224.95"},{"indent":5,"rule":"|   |   |   |   |--- CarbohydrateContent <= 40.25"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent <= 7.85"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent <= 1.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 262.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 29.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 225.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  225.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 156.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  156.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  29.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 91.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  91.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 30.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  30.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  262.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 180.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 0.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  0.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  180.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 29.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 301.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  301.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  29.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent >  1.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 66.70"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 231.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 228.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 14.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  14.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  228.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  231.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 18.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 37.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  37.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  18.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  66.70"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 3.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 9.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 3.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  3.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  9.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 309.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  309.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  3.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1529.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 12.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  12.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  1529.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 32.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  32.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent >  7.85"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories <= 246.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 3.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 7.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 6.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 9.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  9.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  6.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  7.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 7.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  7.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  3.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 27.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  27.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 12.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 226.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  226.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  12.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories >  246.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 641.60"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 8.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 21.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  21.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":5,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  8.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 28.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  28.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 1.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  1.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  641.60"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 676.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 3.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 8.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  8.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  3.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  676.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 34.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 831.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  831.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  34.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 8.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  8.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":5,"rule":"|   |   |   |   |--- CarbohydrateContent >  40.25"},{"indent":6,"rule":"|   |   |   |   |   |--- FiberContent <= 3.85"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories <= 257.65"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 7.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 7.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 229.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  229.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 42.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  42.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  7.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 33.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  33.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  7.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 5.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 4.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 8.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  8.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  4.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 4.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  4.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  5.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 4.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 7.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  7.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  4.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories >  257.65"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 13.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 14.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 13.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 2.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  2.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  13.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 59.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  59.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  14.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 46.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 3.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":0,"1":5},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  3.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  46.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  13.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 49.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 6.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":9},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  6.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 512.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 18"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  512.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  49.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 641.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 339.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  339.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  641.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 761.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  761.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":6,"rule":"|   |   |   |   |   |--- FiberContent >  3.85"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SaturatedFatContent <= 2.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 3.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 143.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 8.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 6.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  6.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  8.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  143.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 34.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  34.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 7.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  7.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  3.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 7.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 297.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 46.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  46.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  297.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  7.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 29.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 43.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  43.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":10,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  29.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 255.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  255.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 32","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- SaturatedFatContent >  2.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 214.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 4.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 52.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 20.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  20.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  52.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 1.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  1.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  4.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 20.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 0.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  0.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  20.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 159.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  159.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  214.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 11.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 51.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 277.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  277.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  51.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 8.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  8.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  11.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 16.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 439.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  439.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  16.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 8.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  8.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":1,"rule":"|--- FatContent >  8.85"},{"indent":2,"rule":"|   |--- CarbohydrateContent <= 49.65"},{"indent":3,"rule":"|   |   |--- SaturatedFatContent <= 5.25"},{"indent":4,"rule":"|   |   |   |--- FiberContent <= 2.55"},{"indent":5,"rule":"|   |   |   |   |--- ProteinContent <= 44.65"},{"indent":6,"rule":"|   |   |   |   |   |--- Calories <= 291.85"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent <= 2.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 46.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 37.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 18"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  37.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  1.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 10.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  10.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":5},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  46.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 8.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  8.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 9.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  9.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SaturatedFatContent >  2.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 1.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 47.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 279.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  279.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  47.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 289.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  289.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  1.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 130.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 129.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  129.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  130.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 9.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  9.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":24,"1":0},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent >  2.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 32.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 8.40"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 3.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  3.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 19.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  19.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  8.40"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 25.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  25.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  32.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 0.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 14.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  14.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  0.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 116.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 9.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  9.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  116.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 60.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  60.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":6,"rule":"|   |   |   |   |   |--- Calories >  291.85"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 11.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 316.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 10.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 7.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 49.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  49.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  7.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 7.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  7.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  10.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 311.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 186.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  186.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  311.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 10.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  10.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  316.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 221.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 40.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  0.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  40.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  221.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 323.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  323.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":10,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  0.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 414.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  414.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  11.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 12.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 357.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 334.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 68.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  68.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  334.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 11.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  11.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  357.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  1.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 37.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  37.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  12.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 401.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 40.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  40.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 56.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  56.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  401.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 13.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 140.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  140.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  13.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 16.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":2,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  16.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":5,"rule":"|   |   |   |   |--- ProteinContent >  44.65"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent <= 14.95"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SugarContent <= 11.70"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 51.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 10.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 45.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  45.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  0.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 290.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  290.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  10.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 346.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 432.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  432.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  346.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  51.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 9.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 496.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  496.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  9.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 10.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 11.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  11.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  10.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 10.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  10.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SugarContent >  11.70"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent <= 26.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 264.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 146.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 22.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  22.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  146.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  264.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent >  26.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 0.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 41.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  41.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  0.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 38.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  38.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  2.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent >  14.95"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 89.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 539.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 69.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 15.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 8.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  8.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  15.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  69.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 200.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  200.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  539.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 21.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 3.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  3.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 142.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  142.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  21.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 128.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 565.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  565.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  128.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  89.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 1.60"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 494.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 597.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 4.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  4.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  597.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  494.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  1.60"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 0"},{"indent":4,"rule":"|   |   |   |--- FiberContent >  2.55"},{"indent":5,"rule":"|   |   |   |   |--- FatContent <= 12.55"},{"indent":6,"rule":"|   |   |   |   |   |--- Calories <= 337.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories <= 288.15"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent <= 17.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 4.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 3.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 39.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 24","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  39.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  3.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 341.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  341.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":8},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  4.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 30.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 14.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  14.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  30.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 7.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 21"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  7.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent >  17.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 56.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 6.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 16.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  16.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":7,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  6.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 10.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  10.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  56.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 29.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 69.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  69.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  29.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 276.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  276.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":7,"1":0},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories >  288.15"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 10.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 9.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 4.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 7.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  7.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  4.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  9.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 9.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 303.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  303.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":32,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  9.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 27.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  27.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  10.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 68.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 30.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 206.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  206.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  30.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 54.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  54.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  68.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 9.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  9.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 17.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  17.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":6,"rule":"|   |   |   |   |   |--- Calories >  337.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 11.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 3.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 38.80"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 20.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  20.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 24.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  24.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  38.80"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 14.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  14.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 38.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  38.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  3.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 220.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 408.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 9.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  9.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  408.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 6.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  6.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  220.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 2265.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 32.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  32.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  2265.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  11.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 370.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 11.80"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 359.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 259.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  259.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  359.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 361.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  361.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  11.80"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  370.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 4.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 376.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  376.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  4.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":5,"rule":"|   |   |   |   |--- FatContent >  12.55"},{"indent":6,"rule":"|   |   |   |   |   |--- FiberContent <= 4.55"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SaturatedFatContent <= 2.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 523.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 64.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 6.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  0.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  6.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 3.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  3.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  64.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 378.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 68.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  68.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  378.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 381.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  381.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":13,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  523.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SaturatedFatContent >  2.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 36.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 69.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 27.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 11.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 20","class_distribution":{"0":0,"1":8},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  11.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":10,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  27.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 12.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  12.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  69.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 84.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 35.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  35.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  84.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 3.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  3.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  36.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 21.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 36.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 36.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":17,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  36.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  36.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 3.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  3.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  21.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 15.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1271.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1271.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  15.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 375.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  375.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":6,"rule":"|   |   |   |   |   |--- FiberContent >  4.55"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 5.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 20.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 13.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 284.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  284.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 5.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  5.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  13.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 5.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  5.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  20.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 195.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  0.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  195.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1502.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 207.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  207.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16","class_distribution":{"0":11,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  1502.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  5.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 48.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 76.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1483.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 9.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 24"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  9.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  1483.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 33.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  33.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  76.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 495.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 13.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  13.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  495.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 15.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  15.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  48.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 16.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 24.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  24.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 9.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  9.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  16.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 51.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 130.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  130.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  51.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 74.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  74.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":3,"rule":"|   |   |--- SaturatedFatContent >  5.25"},{"indent":4,"rule":"|   |   |   |--- SaturatedFatContent <= 7.15"},{"indent":5,"rule":"|   |   |   |   |--- FiberContent <= 3.95"},{"indent":6,"rule":"|   |   |   |   |   |--- CarbohydrateContent <= 41.05"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 63.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 289.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 3.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 950.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 6.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  6.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  950.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 951.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  951.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":7,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  3.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 3.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  3.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 7.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  7.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  289.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 11.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 331.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 289.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  289.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  331.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  11.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 12.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 360.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  360.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  12.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  1.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  63.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 18.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 1.20"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 33.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 72.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  72.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  33.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  1.20"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 64.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 63.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  63.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  64.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  18.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 31.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 21.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 21.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  21.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  21.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  31.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 74.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  74.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":6,"rule":"|   |   |   |   |   |--- CarbohydrateContent >  41.05"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 9.45"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 274.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 7.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 45.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  45.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 37.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  37.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  7.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  274.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 60.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 29.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 22.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  22.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":57,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  29.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 43.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  43.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  60.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  9.45"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 8.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 16.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 2.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  2.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 358.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  358.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  16.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 24.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  24.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  0.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 48.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  48.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  8.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 12.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 39.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 10.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  10.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":21,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  39.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  12.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 55.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 44.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  44.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  55.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":5,"rule":"|   |   |   |   |--- FiberContent >  3.95"},{"indent":6,"rule":"|   |   |   |   |   |--- CarbohydrateContent <= 24.65"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent <= 14.20"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 92.50"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 6.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 445.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 160.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  160.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  445.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 23.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  23.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  6.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 16.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 453.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  453.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  16.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 488.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  488.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  92.50"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent >  14.20"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 8.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  8.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 0"},{"indent":6,"rule":"|   |   |   |   |   |--- CarbohydrateContent >  24.65"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent <= 5.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 69.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 19.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 44.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 44.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  44.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  44.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  19.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 12.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1006.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1006.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  12.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 26.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  26.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  69.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent >  5.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 10.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 6.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 2.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  2.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 81.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  81.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  6.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 5.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  5.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 27.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  27.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  10.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 20.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1134.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 5.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  5.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19","class_distribution":{"0":18,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  1134.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 14.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  14.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":5,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  20.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 21.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 509.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  509.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":5,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  21.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 52.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  52.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":5},"truncated":true},{"indent":4,"rule":"|   |   |   |--- SaturatedFatContent >  7.15"},{"indent":5,"rule":"|   |   |   |   |--- FiberContent <= 5.15"},{"indent":6,"rule":"|   |   |   |   |   |--- SugarContent <= 52.25"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 11.15"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 310.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 9.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 4.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  4.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  9.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 46.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  46.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 9.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  9.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  310.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 1.20"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  1.20"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 1.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 1.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  1.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  1.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  11.15"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 97.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 9.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 85.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 3.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  3.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  85.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 21.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  21.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":7},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  9.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 44.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  1.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  44.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 14.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  14.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  97.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 8.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 23.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  23.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 6895.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  6895.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  8.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 30.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 963.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  963.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  30.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 283.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  283.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":6,"rule":"|   |   |   |   |   |--- SugarContent >  52.25"},{"indent":7,"rule":"|   |   |   |   |   |   |--- class: 1"},{"indent":5,"rule":"|   |   |   |   |--- FiberContent >  5.15"},{"indent":6,"rule":"|   |   |   |   |   |--- SaturatedFatContent <= 10.55"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent <= 24.15"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent <= 4.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 1263.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 38.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 18.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  18.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":7},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  38.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 16.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  16.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  1263.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 17.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 40.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  40.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  17.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 7.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  7.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent >  4.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 41.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 20.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 8.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  8.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  20.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  41.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 41.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 7.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  7.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  41.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 582.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  582.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":13,"1":0},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent >  24.15"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 11.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 45.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  45.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 397.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  397.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  11.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 0"},{"indent":6,"rule":"|   |   |   |   |   |--- SaturatedFatContent >  10.55"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SaturatedFatContent <= 13.15"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent <= 7.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 20.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 36.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  36.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 36.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  36.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  20.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 11.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  11.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent >  7.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 7.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 97.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  97.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 495.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  495.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  7.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 11.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 48.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  48.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  11.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 17.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  17.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SaturatedFatContent >  13.15"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent <= 20.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 9.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  9.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 10.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 14.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  14.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  10.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 14.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  14.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SugarContent >  20.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 14.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 46.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  46.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 16.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  16.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  14.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 44.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  44.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":2,"rule":"|   |--- CarbohydrateContent >  49.65"},{"indent":3,"rule":"|   |   |--- FatContent <= 16.75"},{"indent":4,"rule":"|   |   |   |--- CarbohydrateContent <= 64.75"},{"indent":5,"rule":"|   |   |   |   |--- FatContent <= 11.85"},{"indent":6,"rule":"|   |   |   |   |   |--- CarbohydrateContent <= 57.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 10.65"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 10.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 1.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 4.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 9.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  9.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  4.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 343.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  343.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  1.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 50.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 9.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  9.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  50.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 6.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  6.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  10.75"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 27.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 13.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1393.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1393.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  13.80"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  27.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 53.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 464.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":11,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  464.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  53.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 972.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":1,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  972.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  10.65"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 7.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 325.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 63.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 51.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  51.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  63.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  325.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 328.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  328.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 10.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  10.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  7.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 4.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 44.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  44.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 50.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  50.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":2,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  4.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 52.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1308.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1308.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  52.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 27.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  27.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":6,"rule":"|   |   |   |   |   |--- CarbohydrateContent >  57.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SugarContent <= 23.55"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 11.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 16.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 21.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 8.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  8.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":0,"1":7},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  21.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  16.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1462.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1046.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1046.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  1462.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  11.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 0.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  0.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 60.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  60.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 16.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  16.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- SugarContent >  23.55"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 11.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 27.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 9.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 439.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  439.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  9.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  27.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 8.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 61.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16","class_distribution":{"0":16,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  61.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  8.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  11.05"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 349.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 36.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  36.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  349.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1192.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 156.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  156.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":16,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  1192.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":5,"rule":"|   |   |   |   |--- FatContent >  11.85"},{"indent":6,"rule":"|   |   |   |   |   |--- ProteinContent <= 20.05"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 9.65"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 4.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 12.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 360.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 3.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  3.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  360.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 12.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  12.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  12.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 546.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 64.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  64.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  546.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  4.45"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 35.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 30.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 29.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":15,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  29.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  30.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 16.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  16.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  35.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 63.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  63.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 7.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  7.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  9.65"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 13.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 1.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 161.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  161.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 12.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  12.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  1.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 53.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 340.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  340.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  53.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 10.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  10.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  13.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 6.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 14.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 410.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  410.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  14.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 456.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  456.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  6.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 6.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 56.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  56.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  6.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 11.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  11.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":6,"rule":"|   |   |   |   |   |--- ProteinContent >  20.05"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 28.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 15.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 7.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 6.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 4.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  4.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  6.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 44.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  44.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  7.75"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 437.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 439.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  439.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  437.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 445.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  445.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  15.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 60.00"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 54.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 28.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  28.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  54.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 6.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  6.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  60.00"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 51.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 481.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  481.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  51.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 8.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  8.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  28.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 6.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 46.20"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 447.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  447.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 12.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  12.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  46.20"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 15.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  15.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  1.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 4.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  4.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  6.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 51.80"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 62.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 35.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  35.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  62.60"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 33.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  33.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  51.80"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 16.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  16.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":4,"rule":"|   |   |   |--- CarbohydrateContent >  64.75"},{"indent":5,"rule":"|   |   |   |   |--- SugarContent <= 52.25"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent <= 15.15"},{"indent":7,"rule":"|   |   |   |   |   |   |--- SugarContent <= 31.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 361.80"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  361.80"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 3.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 999.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 967.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 30","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  967.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  999.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  3.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 510.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 64.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  64.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  510.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 14.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  14.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":0,"1":7},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- SugarContent >  31.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 13.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 1254.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 376.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  376.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 31.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  31.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  1254.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 11.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 25.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  25.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  11.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 317.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  317.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  13.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 451.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 14.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 412.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  412.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  14.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 12.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  12.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  451.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 14.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 79.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  79.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  14.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 15.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  15.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent >  15.15"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories <= 476.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 5.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 1.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  1.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 5.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 5.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  5.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  5.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  5.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 16.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 9.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 15.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  15.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  9.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 17.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  17.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  16.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories >  476.25"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 93.10"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 537.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 533.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 15.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  15.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  533.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  537.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 3.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 33.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  33.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  3.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1364.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1364.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  93.10"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 180.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 16.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 6.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15","class_distribution":{"0":5,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  6.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  16.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 20.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  20.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  180.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 123.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 40.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  40.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  123.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":5,"rule":"|   |   |   |   |--- SugarContent >  52.25"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent <= 14.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- CholesterolContent <= 21.20"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 0.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  0.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent <= 7.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 12.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 105.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  105.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  12.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 565.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  565.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FiberContent >  7.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 7.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 11.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  11.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  7.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 2732.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  2732.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- CholesterolContent >  21.20"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 24.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 73.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 5.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  5.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 114.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  114.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  73.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 8.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  1.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  8.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 58.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  58.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  24.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 1091.20"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 3.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 677.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  677.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  3.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 685.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  685.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  1091.20"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent <= 62.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 71.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  71.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SugarContent >  62.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 13.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  13.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent >  14.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories <= 482.60"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 15.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 75.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 7.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 400.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  400.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  7.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 457.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  457.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  75.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 4.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 55.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  55.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  4.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 20.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  20.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  15.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 512.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  512.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 461.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  461.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- Calories >  482.60"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent <= 66.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 15.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  15.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 77.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  77.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":7,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 104.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 2.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  2.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  104.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 111.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  111.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CholesterolContent >  66.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 215.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 168.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 13.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  13.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  168.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  215.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 496.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  496.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 16.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  16.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":3,"rule":"|   |   |--- FatContent >  16.75"},{"indent":4,"rule":"|   |   |   |--- SaturatedFatContent <= 9.65"},{"indent":5,"rule":"|   |   |   |   |--- CarbohydrateContent <= 135.80"},{"indent":6,"rule":"|   |   |   |   |   |--- FiberContent <= 5.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent <= 27.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 88.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 3.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 16.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 6.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  6.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  16.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 0.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  0.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  3.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 18.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 581.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  581.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  18.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 18.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  18.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  88.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 18.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 22.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 1.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  1.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  22.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 9.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  9.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  18.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 23.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 640.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  640.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  23.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 25.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  25.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- ProteinContent >  27.05"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 71.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 19.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 35.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 0.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  0.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":7,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  35.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1019.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1019.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  19.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 64.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 62.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":0,"1":7},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  62.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  64.90"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 29.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  29.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  71.95"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 27.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 66.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 23.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  23.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  66.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 318.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  318.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  27.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 81.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  81.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 102.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  102.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":6,"rule":"|   |   |   |   |   |--- FiberContent >  5.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 22.45"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories <= 568.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 516.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 7.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 370.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  370.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  7.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  516.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 17.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 551.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":12},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  551.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  17.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 8.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 21"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  8.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- Calories >  568.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 73.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 654.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 19.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  19.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  654.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 851.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  851.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  73.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 20.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 26.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  26.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  20.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 2.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  2.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  22.45"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent <= 114.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 4.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1583.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 6.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  6.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 17"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  1583.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 5.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  5.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  4.65"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 98.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 23.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  23.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 19"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  98.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 32.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  32.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":5,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- ProteinContent >  114.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 1"},{"indent":5,"rule":"|   |   |   |   |--- CarbohydrateContent >  135.80"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent <= 31.05"},{"indent":7,"rule":"|   |   |   |   |   |   |--- CarbohydrateContent <= 239.15"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 3161.30"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 0.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  0.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 40.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 161.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  161.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  40.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 62.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  62.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  3161.30"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 46.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 206.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 195.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  195.20"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  206.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  46.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 62.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 17.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  17.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  62.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 1499.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  1499.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":7,"rule":"|   |   |   |   |   |   |--- CarbohydrateContent >  239.15"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent <= 10256.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 28.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 6.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1268.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1268.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  6.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 1801.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 12"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  1801.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  28.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 29.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  29.20"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 61.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  61.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":6},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- SodiumContent >  10256.25"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 27.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  27.50"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent >  31.05"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent <= 8.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 244.90"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 7.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 40.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1384.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1384.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":5},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  40.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 28.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":8,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  28.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  7.55"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 6.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 157.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  157.95"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  6.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 221.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  221.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  244.90"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 53.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 2976.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 14.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  14.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  2976.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  53.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1630.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 1971.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  1971.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SodiumContent >  1630.65"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent >  8.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 79.70"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories <= 1312.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 1108.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 13.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  13.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":7,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  1108.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 185.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  185.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- Calories >  1312.60"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 15.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 7.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  7.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  15.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 1988.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  1988.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  79.70"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 0"},{"indent":4,"rule":"|   |   |   |--- SaturatedFatContent >  9.65"},{"indent":5,"rule":"|   |   |   |   |--- CarbohydrateContent <= 113.95"},{"indent":6,"rule":"|   |   |   |   |   |--- SaturatedFatContent <= 14.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- CarbohydrateContent <= 89.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 11.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 97.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 16.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 10.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  10.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  16.15"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 22.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  22.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16","class_distribution":{"0":0,"1":5},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  97.25"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 66.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 53.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  53.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  66.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  11.85"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent <= 93.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 7.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  7.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 63.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  63.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SodiumContent >  93.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 88.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 18.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  18.00"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 14"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  88.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 75.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  75.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":7,"rule":"|   |   |   |   |   |   |--- CarbohydrateContent >  89.95"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 20.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent <= 51.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 103.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 6.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":5,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  6.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  103.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 339.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  339.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":9,"1":0},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CholesterolContent >  51.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 5.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 18.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  18.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  5.25"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 4.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  4.15"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  20.65"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent <= 28.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 29.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 813.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  813.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  29.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 27.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  27.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SugarContent >  28.30"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 34.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 101.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  101.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  34.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":6,"rule":"|   |   |   |   |   |--- SaturatedFatContent >  14.35"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent <= 57.30"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent <= 11.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 25.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 827.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 37.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  37.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  827.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  25.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 1772.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 197.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  197.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  1772.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 99.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  99.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FiberContent >  11.55"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 18.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 1852.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 19.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8","class_distribution":{"0":6,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  19.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":7,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  1852.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  18.35"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 22.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 22.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  22.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  22.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FiberContent >  57.30"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 92.40"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  92.40"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- class: 0"},{"indent":5,"rule":"|   |   |   |   |--- CarbohydrateContent >  113.95"},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent <= 43.25"},{"indent":7,"rule":"|   |   |   |   |   |   |--- CarbohydrateContent <= 200.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent <= 27.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 136.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 13.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 12.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  12.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":10,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  13.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 20.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  20.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7","class_distribution":{"0":0,"1":5},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  136.45"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 48.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 197.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 11","class_distribution":{"0":2,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  197.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  48.30"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 3211.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  3211.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- FatContent >  27.35"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent <= 26.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 32.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 917.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  917.25"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  32.05"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 1215.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  1215.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- ProteinContent >  26.70"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 106.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 30.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  30.75"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  106.70"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 130.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  130.65"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- CarbohydrateContent >  200.35"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 250.00"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 24.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 216.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 34.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CholesterolContent >  34.55"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  216.40"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 20.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":17},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  20.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  24.15"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 2.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  2.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  250.00"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 22.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 43.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  43.00"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 13.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  13.05"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  22.05"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 23.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 12.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  12.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 16","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  23.55"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 273.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  273.40"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13","class_distribution":{"0":4,"1":0},"truncated":true},{"indent":6,"rule":"|   |   |   |   |   |--- FatContent >  43.25"},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent <= 90.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 306.10"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 273.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 33.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent <= 22.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FiberContent >  22.10"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3","class_distribution":{"0":0,"1":11},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  33.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 49.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  49.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 10","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- CarbohydrateContent >  273.10"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 67.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 25.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  25.80"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  67.10"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories <= 2426.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- Calories >  2426.90"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  306.10"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 73.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent <= 7.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent <= 476.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SugarContent >  476.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- ProteinContent >  7.50"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent <= 104.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 13"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- ProteinContent >  104.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":1},"truncated":true},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  73.85"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 2522.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 10.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":7},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  10.30"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  2522.85"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 8779.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9","class_distribution":{"0":3,"1":0},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  8779.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":7,"rule":"|   |   |   |   |   |   |--- FatContent >  90.85"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent <= 502.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 12.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent <= 21.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 279.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  279.50"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- CholesterolContent >  21.95"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- SaturatedFatContent >  12.95"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent <= 41.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 103.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  103.45"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":1,"1":0},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FiberContent >  41.35"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent <= 15.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SaturatedFatContent >  15.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":8,"rule":"|   |   |   |   |   |   |   |--- CarbohydrateContent >  502.15"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent <= 119.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories <= 3506.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 107.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":2},"truncated":true},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  107.35"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2","class_distribution":{"0":0,"1":3},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- Calories >  3506.45"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent <= 92.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 0"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- FatContent >  92.70"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8"},{"indent":9,"rule":"|   |   |   |   |   |   |   |   |--- FatContent >  119.90"},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent <= 180.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent <= 836.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- CarbohydrateContent >  836.60"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6","class_distribution":{"0":0,"1":4},"truncated":true},{"indent":10,"rule":"|   |   |   |   |   |   |   |   |   |--- FatContent >  180.75"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent <= 18.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- class: 1"},{"indent":11,"rule":"|   |   |   |   |   |   |   |   |   |   |--- SodiumContent >  18.85"},{"indent":12,"rule":"|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7"}]');

/***/ }),

/***/ "./data/model_lr.json":
/*!****************************!*\
  !*** ./data/model_lr.json ***!
  \****************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"coefficients":[-0.00022939060099092377,-0.092023521899023,-0.10083344200949419,-0.0007686420091523613,-0.000037430650104498506,0.023503440816719578,0.010110698249991515,-0.007310574578543519,0.022138526814765153],"intercept":-1.014133841830455,"scaler_mean":[471.649145379238,23.82079905167082,9.287279550949266,84.55058661468972,746.5353407238039,47.70879406638304,3.695585396480312,20.84909430815076,17.432030473977175],"scaler_scale":[1063.4755500482884,79.6701030342529,34.63416459230431,242.24101152001487,3683.120834590571,95.22644652202685,6.016274174592719,64.25951664890387,48.673802992409044]}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/chart.js");
/* harmony import */ var chartjs_plugin_datalabels__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chartjs-plugin-datalabels */ "./node_modules/chartjs-plugin-datalabels/dist/chartjs-plugin-datalabels.esm.js");
/* harmony import */ var chartjs_adapter_date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chartjs-adapter-date-fns */ "./node_modules/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.esm.js");
/* harmony import */ var bootstrap_icons_font_bootstrap_icons_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bootstrap-icons/font/bootstrap-icons.css */ "./node_modules/bootstrap-icons/font/bootstrap-icons.css");
/* harmony import */ var _data_model_lr_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/model_lr.json */ "./data/model_lr.json");
/* harmony import */ var _data_model_dt_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/model_dt.json */ "./data/model_dt.json");








var chart_data;

async function initialize() {
  chart_js__WEBPACK_IMPORTED_MODULE_5__.Chart.register(...chart_js__WEBPACK_IMPORTED_MODULE_5__.registerables, chartjs_plugin_datalabels__WEBPACK_IMPORTED_MODULE_0__["default"]);
  chart_js__WEBPACK_IMPORTED_MODULE_5__.Chart.defaults.backgroundColor = '#fff';

  const response = await fetch("data/data.json");
  chart_data = await response.json();

  let l1 =document.getElementById("n_recipes")
  l1.addEventListener("click", function () {display_chart("n_recipes")});

  let l2 =document.getElementById("n_ratings")
  l2.addEventListener("click", function () {display_chart("n_ratings") });

  let l3 =document.getElementById("n_categories")
  l3.addEventListener("click", function () {display_chart("n_categories") });

  let l4 =document.getElementById("n_authors")
  l4.addEventListener("click", function () {display_chart("n_authors") });

  let l5 =document.getElementById("n_description_length")
  l5.addEventListener("click", function () {display_chart("n_description_length") });

  let exploring_go_back =document.getElementById("exploring_go_back")
  exploring_go_back.addEventListener("click", function () { turn_on_charts(false)}
    );

  let lh1 =document.getElementById("health_definition")
  lh1.addEventListener("click", function () {display_health_chart("n_healthy_composition") });   

  let lh2 =document.getElementById("health_trend")
  lh2.addEventListener("click", function () {display_health_chart("n_healthy_time") });   

  let health_go_back =document.getElementById("health_go_back")
  health_go_back.addEventListener("click", function () { turn_on_health_charts(false)}
    );


  let submit_results =document.getElementById("submit_results")
  submit_results.addEventListener("click", function () { predictClass()}
      );

  document.getElementById('nav_header').addEventListener('click', function() {
    document.getElementById('header').scrollIntoView({
      behavior: 'smooth', // Smooth scrolling
      block: 'start'      // Align the top of the div to the top of the viewport
    });
  });

  document.getElementById('nav_page_1').addEventListener('click', function() {
    document.getElementById('page_1').scrollIntoView({
      behavior: 'smooth', // Smooth scrolling
      block: 'start'      // Align the top of the div to the top of the viewport
    });
  });

  document.getElementById('nav_page_2').addEventListener('click', function() {
    document.getElementById('page_2').scrollIntoView({
      behavior: 'smooth', // Smooth scrolling
      block: 'start'      // Align the top of the div to the top of the viewport
    });
  });

  document.getElementById('nav_page_3').addEventListener('click', function() {
    document.getElementById('page_3').scrollIntoView({
      behavior: 'smooth', // Smooth scrolling
      block: 'start'      // Align the top of the div to the top of the viewport
    });
  });

  document.getElementById('nav_page_4').addEventListener('click', function() {
    document.getElementById('page_4').scrollIntoView({
      behavior: 'smooth', // Smooth scrolling
      block: 'start'      // Align the top of the div to the top of the viewport
    });
  });

  document.getElementById('nav_page_5').addEventListener('click', function() {
    document.getElementById('page_5').scrollIntoView({
      behavior: 'smooth', // Smooth scrolling
      block: 'start'      // Align the top of the div to the top of the viewport
    });
  });

    document.getElementById('nav_page_6').addEventListener('click', function() {
    document.getElementById('page_6').scrollIntoView({
      behavior: 'smooth', // Smooth scrolling
      block: 'start'      // Align the top of the div to the top of the viewport
    });
  });

  document.getElementById('health_comparison').addEventListener('click', function() {
    document.getElementById('page_5').scrollIntoView({
      behavior: 'smooth', // Smooth scrolling
      block: 'start'      // Align the top of the div to the top of the viewport
    });
  });

  

  const navItems = document.querySelectorAll('.nav-item');
  const sections = document.querySelectorAll('.page');
  const wrap = document.getElementById('wrap');

  function checkActiveSection() {
    let currentSection = null;

    for (let i = 0; i < sections.length; i++) {
      const section = sections[i];
      const sectionTop = section.getBoundingClientRect().top;
      const sectionHeight = section.offsetHeight;
  
      if (sectionTop <= window.innerHeight / 2 && sectionTop + sectionHeight >= window.innerHeight / 2) {
        currentSection = section;
        break;
      }
    }

    navItems.forEach(item => {
      item.classList.remove('active');
      var item_id = item.getAttribute('id').slice(4)
      if (currentSection && item_id === currentSection.getAttribute('id')) {
        item.classList.add('active');
      }
    });
  }
  

  predictClass()

  wrap.addEventListener('scroll', checkActiveSection);


}

function get_data(ch) {

  var data = chart_data.filter(a => a.id == ch)[0];

  var type; var options; var explanation; var title;

  if (ch == 'n_recipes') {

      explanation = "By plotting the number of recipes published over time, we undestand the data ranges from <b>August 1998 to September 2020 </b>. "
      explanation += "The number of recipes published has not been constant over time, wich much <b>more publications between 2005 and 2010 </b>, reaching a maximum of 749 publications in January 2009.<br><br>"
      explanation += "After 2014, the number of recipes published has generally been under 10 per month, <b>with September 2020 only having one publication</b>. "
      explanation += "From this, we can determine the <b>most accurate data can be extracted from the 2005 and 2010 range</b>, as the other timelines might not have enough publications to be representative."

      let non_nan_array = (data['datasets'][0]['data']).filter((a) => a == "NaN" ? 0 : parseInt(a));
      let max_value = Math.max(...non_nan_array)
      data['datasets'][0]['borderColor'] = '#3436ca';
      data['datasets'][0]['datalabels'] = {
        align: 'top',
        anchor: 'end'
      }
      type = 'line';
      options = {
        plugins: {
          legend: {
              display: false
          },
          title: {
            display: true,
            text: 'Number of recipes over published time',
            color: "#242449",
            padding: {
              bottom: 40  // Space below the title (between title and chart)
          },
            font: {
              size: 18
          }
        },
          datalabels: {
            display: true,
            borderRadius: 4,
            color: '#ffffff',
            backgroundColor:  function(context)  {
              if (context.dataIndex === context.dataset.data.length - 1 ||  context.dataset.data[context.dataIndex] == max_value)
                {
                    return context.dataset.borderColor;
                }
                return "";
            },
            font: {
              weight: 'bold'
            },
            formatter: function(value, context) {
              if (context.dataIndex === context.dataset.data.length - 1 || value == max_value)
              {
                  return value;
              }
              return "";
          },
            padding: 6
          }
      },
      elements: {
        point: {
          pointStyle: false,
          hitRadius: 2,
        },
        line: {
          tension: 0.4
        }
      },
      layout: {
        padding: {
          right: 20, // Add 20 pixels of extra padding to the right side
          top: 0
        }
      },
      maintainAspectRatio: false,

    }
  }

  if (ch == 'n_ratings') {

    explanation = "The <b>average rating is 4.63 / 5 </b> and is quite constant over time, with a standard deviation of only 0.68 points. We can see a <b>slightly decline on ratings starting 2014</b>, but this can be attributated to <b>less number of recipes available</b> to get a big enough sample. In some cases, we can see the graph line breaking, indicating that the recipes posted did not get a single rating.<br><br>"
    explanation += "Overall, we can conclude that <b>most of the recipes get positive reviews</b>."

    data['datasets'][0]['borderColor'] = '#3436ca';
    data['datasets'][0]['datalabels'] = {
      align: 'top',
      anchor: 'end'
    }
    type = 'line';
    options = {
      plugins: {
        legend: {
            display: false
        },
        title: {
          display: true,
          text: 'Average rating over published time',
          color: "#242449",
          padding: {
            bottom: 40  // Space below the title (between title and chart)
        },
          font: {
            size: 18
        }
        },
        datalabels: {
          display: false,
          borderRadius: 4,
          color:  function(context) {
            return context.dataset.backgroundColor;
          },
          font: {
            weight: 'bold'
          },
          formatter: function(value) {
            return parseFloat(value.toFixed(2));
          },
          padding: 6
        }
    },
    elements: {
      point: {
        pointStyle: false,
        hitRadius: 2,
      },
      line: {
        tension: 0.4,
        spanGaps: false
      }
    },
    scales: {
      y: {
        min: 2.5,
        max: 6
      }
    },
    maintainAspectRatio: false,

  }
}

if (ch == 'n_authors') {

  explanation = "First thing we see  is the number of unique contributors closely matches the number of recipes published. That is, <b>the more authors then the more recipes get published</b>.<br><br>"
  explanation += "Similarly to the first graph in the exploring section, <b>most authors were active between 2005 and 2010</b>, reaching a maximum of <b>415 authors in September 2009</b>."

  let non_nan_array = (data['datasets'][0]['data']).filter((a) => a == "NaN" ? 0 : parseInt(a));
  let max_value = Math.max(...non_nan_array)
  data['datasets'][0]['borderColor'] = '#3436ca';
  data['datasets'][0]['datalabels'] = {
    align: 'top',
    anchor: 'end'
  }
  type = 'line';
  options = {
    plugins: {
      legend: {
          display: false
      },
      title: {
        display: true,
        text: 'Number of unique contributors over time',
        color: "#242449",
        padding: {
          bottom: 40  // Space below the title (between title and chart)
      },
        font: {
          size: 18
      }
      },
      datalabels: {
            display: true,
            borderRadius: 4,
            color: '#ffffff',
            backgroundColor:  function(context)  {
              if (context.dataIndex === context.dataset.data.length - 1 ||  context.dataset.data[context.dataIndex] == max_value)
                {
                    return context.dataset.borderColor;
                }
                return "";
            },
            font: {
              weight: 'bold'
            },
            formatter: function(value, context) {
              if (context.dataIndex === context.dataset.data.length - 1 || value == max_value)
              {
                  return value;
              }
              return "";
          },
            padding: 6
          }
      },
  elements: {
    point: {
      pointStyle: false,
      hitRadius: 2,
    },
    line: {
      tension: 0.4,
      spanGaps: true
    }
  },
  layout: {
    padding: {
      right: 20, // Add 20 pixels of extra padding to the right side
      top: 0
    }
  },
  maintainAspectRatio: false,

}
}

if (ch == 'n_categories') {

  explanation = "There are <b>312 unique categories</b> in the dataset, which is a lot to start. To easy the job, we grouped any category representing < 1% recipes in the <b>'Other' category</b>. Although it is now the 'most popular' category, it makes it easier to focus on the rest.<br><br>"
  explanation += "The most popular category are <b>desserts, followed by Launch/Snacks, Breakfast and Quick Breads</b>. Breads in particular is an interesting category, cause it appears several times: Quick Breads, Breads, Yeast Breads...<br><br>"
  explanation += "From this, we can see we might need to do a <b>better job with categorizing the recipes, based on Keywords instead.</b>"

  type = 'doughnut';
  options = {
    plugins: {
      legend: {
          display: false
      },
      title: {
        display: true,
        text: 'Numer of recipes per category',
        color: "#242449",
        padding: {
          bottom: 40
        },
        font: {
          size: 18
      }
      },
        datalabels: {
          display: 'auto',
          formatter: (value, ctx) => {
            let sum = 0;
            let dataArr = ctx.chart.data.datasets[0].data;
            let label = ctx.chart.data.labels[ctx.dataIndex];
            dataArr.map(data => {
              sum += data;
            });
            let percentage = (value * 100 / sum).toFixed(2) + "%";
            return `${label}: ${percentage}`;
            ;
          },
          color: '#242449',
          font: {
            weight: 'bold',
            size: 14
          },
          padding: 6,
          anchor: 'end',
          align: 'end'
        }

  },
  maintainAspectRatio: false,
  cutout: '50%',
}
}

if (ch == 'n_description_length') {

  explanation = "This is just a funny one for me to check... There is this belief that nowadays most recipes include a super long introduction by the author, before actually jumping to the recipe.<br><br>"
  explanation += "We can check the <b>description length over time</b> to see if that is a new trend. The length hovers on an <b>average of 230 charaters for the 2005 - 2010 range</b>, when most of the recipes were published. We do hit a <b>max of 385 on May 2019</b>, but the recent trends seem more variable than actually moving upwards.<br><br>"
  explanation += "From this data alone, we cannot determine that the inner joke is actually true!"

  let non_nan_array = (data['datasets'][0]['data']).filter((a) => a == "NaN" ? 0 : parseInt(a));
  let max_value = Math.max(...non_nan_array)
  data['datasets'][0]['borderColor'] = '#3436ca';
  data['datasets'][0]['datalabels'] = {
    align: 'top',
    anchor: 'end'
  }
  type = 'line';
  options = {
    plugins: {
      legend: {
          display: false
      },
      title: {
        display: true,
        text: 'Number of unique contributors over time',
        color: "#242449",
        padding: {
          bottom: 40  // Space below the title (between title and chart)
      },
        font: {
          size: 18
      }
      },
      datalabels: {
            display: true,
            borderRadius: 4,
            color: '#ffffff',
            backgroundColor:  function(context)  {
              if (context.dataIndex === context.dataset.data.length - 1 ||  context.dataset.data[context.dataIndex] == max_value)
                {
                    return context.dataset.borderColor;
                }
                return "";
            },
            font: {
              weight: 'bold'
            },
            formatter: function(value, context) {
              if (context.dataIndex === context.dataset.data.length - 1 || value == max_value)
              {
                  return value;
              }
              return "";
          },
            padding: 6
          }
      },
  elements: {
    point: {
      pointStyle: false,
      hitRadius: 2,
    },
    line: {
      tension: 0.4,
      spanGaps: true
    }
  },
  layout: {
    padding: {
      right: 20, // Add 20 pixels of extra padding to the right side
      top: 0
    }
  },
  maintainAspectRatio: false,

}
}

if (ch == 'n_healthy_composition') {

  title = "What is healthy?"
  explanation = "After normalizing the data, we can faithfuly compare recipes with the keyword 'healthy' vs the others. We see healthy recipes having <b>much lower levels of Fat, Saturated Fat and Cholesterol</b>, when compared to Non-Healthy ones.<br><br>"
  explanation += "On the opposite, Healthy ones have <b>larger amounts of Carbohydrates, Fiber and Sugar</b>. Healthy recipes tend to have <b>lower level of calories and proteins </b>.<br><br>"
  explanation += "To deep dive on <b>why Sugar content is higher in healthy recipes</b>, we can check the top categories, including different kinds of Breads (22.5%), Desserts (10.3%), Breakfast (7.3%) and Beverages (5.6%). These categories all have higher than average contents of sugar, which explains the deviation.<br><br>"
  explanation += "Although <b>'healthy' is spectrum rather than binary variable</b>, and many more aspects are involved (quantities, cooking techniques, ingredients), we should be able to leverage this data to classify other recipes!"

  type = 'radar';
  options = {
    plugins: {
      legend: {
          display: true
      },
      title: {
        display: true,
        text: 'Content of healthy and non-healthy recipes',
        color: "#242449",
        padding: {
          bottom: 40  // Space below the title (between title and chart)
      },
        font: {
          size: 18
      }
      },
      datalabels: {
        display: true,
        borderRadius: 4,
        color: '#ffffff',
        backgroundColor:  function(context)  {
                return context.dataset.borderColor
        },
        font: {
          weight: 'bold'
        },
        formatter: function(value, context) {
              return value.toFixed(2);
        },
        padding: 6
      }
    },
  elements: {
    line: {
      tension: 0,
      borderWidth: 3
    },
    point: {
      pointStyle: true,
      hitRadius: 2,
    },
  },
  layout: {
    padding: {
      top: 20
    }
  },
  maintainAspectRatio: true,
  scales: {
    r: {
        max: 1.25,
        min: 0,
        pointLabels: {
          font: {
            weight: 'bold',
            size: 16
          }
        },
        ticks: {
            stepSize: 0.25,
            display:false,
        }
    }
}

}

}

if (ch == 'n_healthy_time') {

  title = "Is health a trend?"
  explanation = "We will be looking at the healthy recipe's publication rate to determine whether it is a recent trend. From the graphs, we see the <b>highest amount was published between 2005 and 2009</b>, reaching a <b>maximum of #773</b>. These times match with time most recipes were published.<br><br>"
  explanation += "The average % of healthy recipes is close to 17.2%</b>. Although this percentage has increased over time, <b>we cannot for sure say it is a trend due to the low number of recipes published in recent years </b>.<br><br>"

  type = 'bar';
  options = {
    plugins: {
      legend: {
          display: true
      },
      title: {
        display: true,
        text: 'Number and % of healthy recipes published over time',
        color: "#242449",
        padding: {
          bottom: 40  // Space below the title (between title and chart)
      },
        font: {
          size: 18
      }
      },
      datalabels: {
        display: false
      }
    },
  elements: {
    line: {
      tension: 0.5,
      borderWidth: 3
    },
    point: {
      pointStyle: false,
      hitRadius: 2,
    },
  },
  layout: {
    padding: {
      top: 0
    }
  },
  maintainAspectRatio: false,
  scales: {
    y: {
      type: 'linear',
      display: true,
      position: 'left',
      title: {
        display: false,
        text: '%'
      },
      ticks: {
        callback: function(value, index, ticks) {
          return value + '%';
        }
      }
    },
    y1: {
      type: 'linear',
      display: true,
      position: 'right',
      title: {
        display: false,
        text: '#'
      },
      grid: {
        drawOnChartArea: false
      }
    }
  }

}

}



  return [data, type, options, explanation, title]
}

function turn_on_charts(mode) {

  let div_id = "exploring_charts";
  let figure_id = "exploring_figure";
  let options_id = "exploring_options"
  let explanation_id = "exploring_explanation"

  if (mode) {
    document.getElementById(figure_id).style.display = "none";
    document.getElementById(options_id).style.display = "none";
  
    document.getElementById(div_id).style.display = "block";
    document.getElementById(explanation_id).style.display = "block";
  } else {
    document.getElementById(div_id).style.display = "none";
    document.getElementById(explanation_id).style.display = "none";

    document.getElementById(figure_id).style.display = "block";
    document.getElementById(options_id).style.display = "block";
  
  }

}

function display_chart(ch) {
  let canvas_id = "exploring_canvas"
  let explanation_text_id = "explanation_text";

  turn_on_charts(true);
  let [data,type, options, explanation] = get_data(ch);

  document.getElementById(explanation_text_id).innerHTML = explanation;

  construct_chart(canvas_id, data, type, options);

}

function turn_on_health_charts(mode) {

  let div_id = "health_container";
  let health_id = "health_view_container"

  if (mode) {
    document.getElementById(div_id).style.display = "none";
    document.getElementById(health_id).style.display = "flex";
  } else {
    document.getElementById(health_id).style.display = "none";
    document.getElementById(div_id).style.display = "block";
  
  }

}

function display_health_chart(ch) {

  let canvas_id = "health_canvas"
  let explanation_text_id = "health_explanation_text";
  let explanation_title = "health_explanation_title"
  turn_on_health_charts(true);

  let [data,type, options, explanation,title] = get_data(ch);

  document.getElementById(explanation_text_id).innerHTML = explanation;
  document.getElementById(explanation_title).innerHTML = title;



  construct_chart(canvas_id, data, type, options);

}

function construct_chart(canvas_id, data, type, options) {

  const ctx = document.getElementById(canvas_id);

  let chartStatus = chart_js__WEBPACK_IMPORTED_MODULE_5__.Chart.getChart(canvas_id); // <canvas> id
  if (chartStatus != undefined) {
    chartStatus.destroy();
  }
  
  new chart_js__WEBPACK_IMPORTED_MODULE_5__.Chart(ctx, {
    type: type,
    data: data,
    options: options
    }
  );

}

initialize()

// Reconstruct the linear regression model
function predictWithLinearRegression(inputData) {
  const { coefficients, intercept, scaler_mean, scaler_scale } = _data_model_lr_json__WEBPACK_IMPORTED_MODULE_3__;

  // Apply the same scaling as in the Python preprocessing
  const scaledInput = inputData //.map((value, index) => (value - scaler_mean[index]) / scaler_scale[index]);

  const prediction = scaledInput.reduce((sum, value, index) => sum + value * coefficients[index], intercept);

  const predictedClass = prediction >= 0 ? 1 : 0;
  return predictedClass;
}

function predictWithDecisionTree(input) {

      // Load the tree from the JSON file and use it in your prediction logic
    const tree = _data_model_dt_json__WEBPACK_IMPORTED_MODULE_4__;
    const features = ['Calories',
      'FatContent',
      'SaturatedFatContent',
      'CholesterolContent',
      'SodiumContent',
      'CarbohydrateContent',
      'FiberContent',
      'SugarContent',
      'ProteinContent']

      

  function getFeatureIndex(featureName) {
    return features.indexOf(featureName);
  }

  function handleTruncatedBranch(classDistribution) {
    let maxClass = null;
    let maxCount = -1;

    for (const [classLabel, count] of Object.entries(classDistribution)) {
        if (count > maxCount) {
            maxClass = parseInt(classLabel);
            maxCount = count;
        }
    }

    return maxClass;
}

  let currentIndent = 1;

  for (let i = 0; i < tree.length; i++) {
      const node = tree[i];

      if (node.indent != currentIndent) {
          continue;  // Skip backtracking in the tree
      }


      if (node.truncated) {
        return handleTruncatedBranch(node.class_distribution);
    }
      
      if (node.rule.includes("class")) {
          return parseInt(node.rule.split(":")[1].trim());
      }

      const d_parts = node.rule.split("|--- ")[1]; 
      const parts = d_parts.split(" "); 
      const featureName = parts[0].trim();
      const operator = parts[1].trim();
      var th_pos = 2;
      if (operator == ">") {th_pos = 3}
      const threshold = parseFloat(parts[th_pos].trim());
      const featureIndex = getFeatureIndex(featureName);


      if (operator === "<=" && input[featureIndex] <= threshold) {
          currentIndent = node.indent + 1;
      } else if (operator === ">" && input[featureIndex] > threshold) {
          currentIndent = node.indent + 1;
      } 
  }

  return null;  // Default return if no class is reached
}

function draw_prediction(user_data, prediction) {

  let canvas_id = "health_prediction_canvas"
  let explanation_text_id = "prediction_result";
  let prediction_result = prediction == 0 ? 'Not-Healthy' : 'Healthy';

  var ch = "prediction";
  var data = chart_data.filter(a => a.id == ch)[0];
  var type; var options; var title;

  if (ch == 'prediction') {

    title = "Healthy Analysis"
    data['datasets'][0]['backgroundColor'] = "rgba(54, 162, 235, 0.3)";
    data['datasets'][0]['borderColor'] = "rgba(54, 162, 235, 0.6)";
    data['datasets'][0]['borderDash'] = [5,5]
    data['datasets'][1]['backgroundColor'] = "rgba(255, 99, 132, 0.3)"
    data['datasets'][1]['borderColor'] = "rgba(255, 99, 132, 0.5)"
    data['datasets'][1]['borderDash'] = [5,5]
    data['datasets'][2]['backgroundColor'] = "rgba(129, 179, 4, 0.5)"
    data['datasets'][2]['borderColor'] = "rgba(129, 179, 4)"
    data['datasets'][2]['data'] = user_data;
  
    type = 'radar';
    options = {
      plugins: {
        legend: {
            display: true
        },
        title: {
          display: true,
          text: 'Healthy, Non-Healthy and User Input composition',
          color: "#242449",

          font: {
            size: 18
        }
        },
        datalabels: {
          display: function(context) {
            return context.datasetIndex === 2;
          },
          borderRadius: 4,
          color: '#ffffff',
          backgroundColor:  function(context)  {
                  return context.dataset.borderColor
          },
          font: {
            weight: 'bold'
          },
          formatter: function(value, context) {
                return value.toFixed(2);
          },
          padding: 6
        }
      },
    elements: {
      line: {
        tension: 0,
        borderWidth: 3
      },
      point: {
        pointStyle: true,
        hitRadius: 2,
      },
    },
    layout: {
      padding: {
        top: 20
      }
    },
    maintainAspectRatio: true,
    scales: {
      r: {
          max: 2,
          min: 0,
          pointLabels: {
            font: {
              weight: 'bold',
              size: 16
            }
          },
          ticks: {
              stepSize: 0.25,
              display:false,
          }
      }
  }
  
  }
  
  }

  document.getElementById(explanation_text_id).innerHTML = prediction_result;
  document.getElementById(explanation_text_id).className = "";
  document.getElementById(explanation_text_id).className = prediction_result;

  construct_chart(canvas_id, data, type, options);
}


function predictClass() {
  const calories = parseInt(document.getElementById('calories').value);
  const fatContent = parseInt(document.getElementById('fatContent').value);
  const saturatedFatContent = parseInt(document.getElementById('saturatedFatContent').value);
  const cholesterolContent = parseInt(document.getElementById('cholesterolContent').value);
  const sodiumContent = parseInt(document.getElementById('sodiumContent').value);
  const carbohydrateContent = parseInt(document.getElementById('carbohydrateContent').value);
  const fiberContent = parseInt(document.getElementById('fiberContent').value);
  const sugarContent = parseInt(document.getElementById('sugarContent').value);
  const proteinContent = parseInt(document.getElementById('proteinContent').value);

  const data = [calories, fatContent, saturatedFatContent, cholesterolContent, sodiumContent, carbohydrateContent, fiberContent, sugarContent, proteinContent];
  const predictionModel = document.querySelector('input[name="predictionModel"]:checked').value;



  let prediction;
  if (predictionModel === 'linearRegression') {
    prediction = predictWithLinearRegression(data);
  } else {
    prediction = predictWithDecisionTree(data);
  }

  function normalize(d) {
    var ch = "radar_chart_normalization";
    var m = chart_data.filter(a => a.id == ch)[0]['values'];
    const result = d.map((value, index) => value / m[index]);
    return result
  }

  var normalized_data = normalize(data)

  draw_prediction(normalized_data, prediction)

}
/******/ })()
;
//# sourceMappingURL=main.js.map